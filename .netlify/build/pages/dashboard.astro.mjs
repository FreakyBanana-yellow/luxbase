/* empty css                                     */
import { c as createComponent, d as renderComponent, r as renderTemplate, m as maybeRenderHead } from '../chunks/astro/server_BM0YAzyH.mjs';
import 'kleur/colors';
import 'html-escaper';
import { $ as $$DashboardLayout } from '../chunks/DashboardLayout_C-7bYCNc.mjs';
/* empty css                                 */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate`${renderComponent($$result, "DashboardLayout", $$DashboardLayout, { "title": "Dein Luxbase Dashboard" }, { "default": async ($$result2) => renderTemplate(_a || (_a = __template([" ", '<section class="max-w-6xl mx-auto px-4 py-6 space-y-6" id="dashboardRoot"> <!-- Header / Kontext --> <header class="space-y-2"> <h1 class="text-lg sm:text-xl font-semibold text-white">\xDCbersicht deiner VIP-Performance</h1> <p class="text-sm text-white/70">\nHier siehst du Umsatz, aktive VIPs und Neuabschl\xFCsse f\xFCr den ausgew\xE4hlten Zeitraum.\n        Optional kannst du die <b>Vorperiode</b> zum Vergleich einblenden. Unten kannst du\n        die Daten als CSV exportieren \u2013 inkl. USt-Spalten und SKR-Konten.\n</p> <p id="dataStamp" class="text-[12px] text-white/50">\u2013</p> </header> <!-- Controls: Range + Compare + Demo --> <div class="flex flex-wrap items-center justify-between gap-3"> <div class="flex gap-1 sm:gap-2" id="rangeControls"> <button data-range="7" class="range-btn">7T</button> <button data-range="30" class="range-btn is-active">30T</button> <button data-range="90" class="range-btn">90T</button> </div> <div class="flex items-center gap-2"> <label class="inline-flex items-center gap-2 text-xs sm:text-[13px] text-white/70"> <input type="checkbox" id="compareToggle" class="accent-[#f6c453] w-4 h-4">\nVorperiode vergleichen\n</label> <button id="demoToggle" type="button" class="demo-btn">Demo: AUS</button> </div> </div> <!-- KPI Cards --> <div class="grid grid-cols-2 md:grid-cols-4 gap-3"> <!-- Umsatz --> <article class="kpi-card"> <h3 class="kpi-title">Umsatz (<span id="labelRange1">30</span> Tage)</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiRevenue">\u2013</p> <span class="kpi-delta" id="kpiRevenueDelta"></span> </div> <p class="kpi-note" id="kpiRevenueNote"></p> <div class="kpi-spark"><canvas id="sparkRevenue"></canvas></div> </article> <!-- Aktive VIPs --> <article class="kpi-card"> <h3 class="kpi-title">Aktive VIPs</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiActive">\u2013</p> <span class="kpi-delta" id="kpiActiveDelta"></span> </div> <p class="kpi-note" id="kpiActiveNote"></p> <div class="kpi-spark"><canvas id="sparkActive"></canvas></div> </article> <!-- Neue VIPs --> <article class="kpi-card"> <h3 class="kpi-title">Neue VIPs (<span id="labelRange2">30</span> Tage)</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiNew">\u2013</p> <span class="kpi-delta" id="kpiNewDelta"></span> </div> <p class="kpi-note" id="kpiNewNote"></p> <div class="kpi-spark"><canvas id="sparkNew"></canvas></div> </article> <!-- Conversion Demo --> <article class="kpi-card"> <h3 class="kpi-title">Conversion (Demo)</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiConv">\u2013</p> </div> <p class="kpi-note">Platzhalter \u2013 an Datenquelle anbindbar</p> <div class="kpi-spark opacity-30"><canvas></canvas></div> </article> </div> <!-- Charts --> <div class="charts-wrap overflow-x-auto snap-x snap-mandatory flex gap-4 pb-2 -mx-4 px-4 md:grid md:grid-cols-2 md:overflow-visible md:snap-none md:mx-0 md:px-0"> <article class="chart-card min-w-[88%] snap-start"> <header class="chart-header"> <h3 class="chart-title">Umsatzverlauf</h3> <span class="chart-meta" id="revMeta">\u2013</span> </header> <div class="h-60 sm:h-[260px]"><canvas id="revChart"></canvas></div> </article> <article class="chart-card min-w-[88%] snap-start"> <header class="chart-header"> <h3 class="chart-title">Neue VIPs / Tag</h3> <span class="chart-meta" id="vipMeta">\u2013</span> </header> <div class="h-60 sm:h-[260px]"><canvas id="vipChart"></canvas></div> </article> </div> <!-- \u{1F525} Highlights: Top- & Flop-Tag + optionaler KI-Tipp --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-3"> <div class="flex items-center justify-between gap-3"> <h3 class="text-sm font-semibold text-luxgold">Highlights: Top- & Flop-Tag</h3> <button id="tfToggleTip" class="border border-luxgray rounded-xl px-3 py-1.5 text-xs">\u{1F4A1} Tipp anzeigen</button> </div> <div class="grid grid-cols-1 sm:grid-cols-3 gap-3 items-center"> <div class="rounded-xl border border-white/5 bg-black/40 p-3"> <div class="text-[11px] text-white/60">Top-Tag</div> <div class="mt-1 text-sm text-white/80"><span id="tfTopDate">\u2013</span></div> <div class="mt-1 text-lg font-semibold text-luxgold"><span id="tfTopValue">\u2013</span></div> <div class="mt-1 text-[12px]"><span id="tfTopDelta" class="px-1.5 py-0.5 rounded-md"></span></div> </div> <div class="rounded-xl border border-white/5 bg-black/40 p-3"> <div class="text-[11px] text-white/60">Flop-Tag</div> <div class="mt-1 text-sm text-white/80"><span id="tfFlopDate">\u2013</span></div> <div class="mt-1 text-lg font-semibold text-white/80"><span id="tfFlopValue">\u2013</span></div> <div class="mt-1 text-[12px]"><span id="tfFlopDelta" class="px-1.5 py-0.5 rounded-md"></span></div> </div> <div class="rounded-xl border border-white/5 bg-black/40 p-3"> <div class="text-[11px] text-white/60">Durchschnitt / Tag</div> <div class="mt-1 text-sm text-white/80"><span id="tfAvgDate">im Zeitraum</span></div> <div class="mt-1 text-lg font-semibold text-white/90"><span id="tfAvgValue">\u2013</span></div> </div> </div> <div id="tfTipWrap" class="hidden rounded-xl border border-white/5 bg-black/30 p-3 text-sm text-white/85 leading-6"> <div class="flex items-start gap-2"> <div>\u{1F4A1}</div> <p id="tfTip">\u2013</p> </div> </div> </div> <!-- Export --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-3"> <div class="flex items-center justify-between gap-3"> <h3 class="text-sm font-semibold text-luxgold">Export</h3> <span class="text-[11px] text-white/60">Zeitraum: <span id="exportRangeLabel">\u2013</span></span> </div> <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-3 items-end"> <label class="block"> <span class="text-xs text-white/70">USt-Satz</span> <select id="optVatRate" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm"> <option value="19" selected>19 %</option> <option value="7">7 %</option> <option value="0">0 % (steuerfrei)</option> </select> </label> <label class="block"> <span class="text-xs text-white/70">Kontenplan</span> <select id="optKontoPlan" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm"> <option value="SKR03" selected>SKR03</option> <option value="SKR04">SKR04</option> </select> </label> <label class="block"> <span class="text-xs text-white/70">Erl\xF6skonto (z. B. 8400 / 4400)</span> <input id="optKonto" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm" placeholder="8400" value="8400"> </label> <label class="block"> <span class="text-xs text-white/70">Gegenkonto (Bank, z. B. 1200)</span> <input id="optContra" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm" placeholder="1200" value="1200"> </label> </div> <div class="flex flex-wrap gap-2"> <button id="btnExportSales" class="border border-luxgray rounded-xl px-3 py-2 text-sm">Umsatz (CSV, Steuer)</button> <button id="btnExportVIPs" class="border border-luxgray rounded-xl px-3 py-2 text-sm">VIP-Liste (CSV)</button> </div> <p class="text-[11px] text-white/50 leading-5">\nHinweis: Dieser Export basiert auf deinen VIP-Verk\xE4ufen im gew\xE4hlten Zeitraum und dem eingestellten Preis.\n        F\xFCr Geb\xFChren/Refunds nutze zus\xE4tzlich die Stripe-Berichte. Kontonummern kannst du hier anpassen.\n</p> </div> <!-- Debug --> <pre id="debugBox" class="bg-black/40 border border-luxgray/50 rounded-xl p-3 text-xs text-white/70 overflow-auto"></pre> </section>  <script type="module">\nconst dbg = (...args) => {\n  const parts = [];\n  for (const a of args) { try { parts.push(typeof a === "string" ? a : JSON.stringify(a, null, 2)); } catch { parts.push(String(a)); } }\n  const msg = parts.join(" ");\n  console.log(...args);\n  const box = document.getElementById("debugBox"); if (box) box.textContent += msg + "\\n";\n};\n\ntry {\n  // ENV check\n  const meta = document.getElementById("supabase-config");\n  if (!meta?.dataset?.url || !meta?.dataset?.key) { dbg("\u274C Supabase ENV fehlt:", { url: meta?.dataset?.url, keySet: !!meta?.dataset?.key }); throw new Error("Supabase ENV fehlt"); }\n\n  // ---------- Libraries ----------\n  const supaMod = await import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm");\n  await import("https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js");\n  if (!window.Chart) throw new Error("Chart.js nicht geladen");\n  const { createClient } = supaMod;\n  const Chart = window.Chart;\n\n  // --- Demo-Flag (persistiert); URL-Override via ?demo=1|0\n  let DEMO = (typeof window !== "undefined" && localStorage.getItem("lux_demo") === "1");\n  if (typeof window !== "undefined") {\n    const qp = new URLSearchParams(location.search);\n    if (qp.has("demo")) {\n      DEMO = qp.get("demo") === "1";\n      localStorage.setItem("lux_demo", DEMO ? "1" : "0");\n    }\n  }\n\n  // Supabase client\n  const supabase = createClient(meta.dataset.url, meta.dataset.key);\n\n  // DOM shorthands\n  const el = (id) => document.getElementById(id);\n  const qsA = (sel) => Array.from(document.querySelectorAll(sel));\n  const fmtEUR = (n) => (typeof n === "number" ? n : Number(n || 0)).toLocaleString("de-DE",{style:"currency",currency:"EUR",maximumFractionDigits:0});\n\n  // Date helpers\n  const now = new Date();\n  const toISO = (d) => new Date(d).toISOString().slice(0,10);\n  const daysAgo = (d) => new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()-d));\n  function labelsLastNDays(n){const arr=[];for(let i=n-1;i>=0;i--){arr.push(toISO(daysAgo(i)));}return arr;}\n  const stamp = new Intl.DateTimeFormat(\'de-DE\',{dateStyle:\'medium\', timeStyle:\'short\'}).format(new Date());\n  const baseStampText = `Datenstand: ${stamp}`;\n  el("dataStamp").textContent = baseStampText;\n\n  // Auth\n  const { data: { user } } = await supabase.auth.getUser();\n  if (!user) { dbg("\u274C Kein User \u2013 redirect /"); window.location.href = "/"; throw new Error("redirect"); }\n\n  // Config\n  const { data: cfg } = await supabase\n    .from("creator_config")\n    .select("preis, vip_dauer")\n    .eq("creator_id", user.id)\n    .maybeSingle();\n\n  const preis = Number(cfg?.preis || 0);\n  const vipDauer = Number(cfg?.vip_dauer || 30);\n\n  // VIPs (echte Daten)\n  const { data: vipData } = await supabase\n    .from("vip_users")\n    .select("letzter_kontakt, vip_bis, status")\n    .eq("creator_id", user.id);\n\n  const vipRowsReal = vipData || [];\n  let vipRows = [];\n\n  // Demo-Rows Generator\n  function makeDemoRows() {\n    const base = new Date();\n    const mk = (offset, days=vipDauer) => ({\n      letzter_kontakt: new Date(base.getTime()-offset*86400000).toISOString(),\n      vip_bis:         new Date(base.getTime()+(days-offset)*86400000).toISOString(),\n      status: "active",\n    });\n    // leichte Streuung f\xFCr Sparklines/Charts\n    const rows = [];\n    for (let i=1;i<=28;i++){ const c = Math.random()<0.55 ? 1 : 0; for(let k=0;k<c;k++) rows.push(mk(i)); }\n    return rows.length ? rows : [mk(1), mk(2), mk(5), mk(7), mk(8), mk(10), mk(15)];\n  }\n\n  // ---------- Aggregation & Rendering ----------\n  let RANGE = 30; // default\n  const compareToggle = el("compareToggle");\n  const exportRangeLabel = el("exportRangeLabel");\n\n  let revChart, vipChart, sparkRev, sparkActive, sparkNew;\n\n  function computeSeries(rangeDays){\n    const labels = labelsLastNDays(rangeDays);\n    const mapNew = Object.fromEntries(labels.map(d=>[d,0]));\n    vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNew[d]!==undefined) mapNew[d]+=1;});\n    const newVipSeries = labels.map(d=>mapNew[d]);\n\n    const revenueByDay = labels.map((_,i)=> (preis>0 ? newVipSeries[i]*preis : 0));\n    const activeEachDay = labels.map(d=> vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= d).length );\n\n    const revenueTotal = revenueByDay.reduce((a,b)=>a+b,0);\n    const activeToday  = activeEachDay.at(-1) || 0;\n    const newTotal     = newVipSeries.reduce((a,b)=>a+b,0);\n\n    return { labels, newVipSeries, revenueByDay, activeEachDay, totals:{ revenueTotal, activeToday, newTotal } };\n  }\n\n  function computePrevSeries(rangeDays){\n    const endPrev = daysAgo(rangeDays);\n    const labelsPrev = [];\n    for(let i=rangeDays-1;i>=0;i--){ labelsPrev.push(toISO(new Date(endPrev.getTime()-i*86400000))); }\n    const mapNewPrev = Object.fromEntries(labelsPrev.map(d=>[d,0]));\n    vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNewPrev[d]!==undefined) mapNewPrev[d]+=1;});\n    const newVipPrev = labelsPrev.map(d=>mapNewPrev[d]);\n    const revPrevByDay = labelsPrev.map((_,i)=> (preis>0 ? newVipPrev[i]*preis : 0));\n    const activePrevEnd = vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= labelsPrev.at(-1)).length;\n    return {\n      newVipPrev, revPrevByDay,\n      totals:{ revenueTotal: revPrevByDay.reduce((a,b)=>a+b,0), activeToday: activePrevEnd, newTotal: newVipPrev.reduce((a,b)=>a+b,0) }\n    };\n  }\n\n  function delta(elm, curr, prev){\n    elm.textContent = "";\n    elm.classList.remove("up","down");\n    if (!compareToggle.checked) return;\n    const d = prev>0 ? (curr-prev)/prev : (curr>0 ? 1 : 0);\n    const txt = (d>=0?"+":"")+ (Math.abs(d)*100).toFixed(1) + "% " + (d>0?"\u2197\uFE0E":"\u2198\uFE0E");\n    elm.textContent = txt;\n    if (d>0) elm.classList.add("up"); else if (d<0) elm.classList.add("down");\n  }\n\n  // Sparklines\n  function renderSpark(canvas, data, color="#f6c453"){\n    const ctx = canvas.getContext("2d");\n    return new Chart(ctx,{\n      type:"line",\n      data:{ labels:data.map((_,i)=>i), datasets:[{ data, borderColor:color, pointRadius:0, tension:.35, borderWidth:2 }]},\n      options:{ responsive:true, maintainAspectRatio:false, plugins:{legend:{display:false},tooltip:{enabled:false}}, scales:{x:{display:false},y:{display:false}} }\n    });\n  }\n\n  function renderKPIs(series, prevTotals){\n    el("labelRange1").textContent = String(RANGE);\n    el("labelRange2").textContent = String(RANGE);\n    exportRangeLabel.textContent = `${series.labels[0]} \u2013 ${series.labels.at(-1)}`;\n\n    el("kpiRevenue").textContent = fmtEUR(series.totals.revenueTotal);\n    el("kpiActive").textContent  = String(series.totals.activeToday);\n    el("kpiNew").textContent     = String(series.totals.newTotal);\n\n    delta(el("kpiRevenueDelta"), series.totals.revenueTotal, prevTotals?.revenueTotal ?? 0);\n    delta(el("kpiActiveDelta"),  series.totals.activeToday,  prevTotals?.activeToday ?? 0);\n    delta(el("kpiNewDelta"),     series.totals.newTotal,     prevTotals?.newTotal ?? 0);\n\n    el("kpiRevenueNote").textContent =\n      (DEMO ? "Demo-Daten: " : "") + (preis>0 ? "Basierend auf Preis \xD7 neue VIPs" : "Kein Preis in creator_config");\n    el("kpiNewNote").textContent     = `Zeitraum: ${series.labels[0]} \u2013 ${series.labels.at(-1)}`;\n\n    if (sparkRev) sparkRev.destroy(); if (sparkActive) sparkActive.destroy(); if (sparkNew) sparkNew.destroy();\n    sparkRev    = renderSpark(document.getElementById("sparkRevenue"), series.revenueByDay);\n    sparkActive = renderSpark(document.getElementById("sparkActive"),  series.activeEachDay);\n    sparkNew    = renderSpark(document.getElementById("sparkNew"),     series.newVipSeries);\n  }\n\n  function renderCharts(series, prevSeries){\n    el("revMeta").textContent = `${series.labels[0]} \u2013 ${series.labels.at(-1)}`;\n    el("vipMeta").textContent = el("revMeta").textContent;\n\n    if (revChart) revChart.destroy();\n    if (vipChart) vipChart.destroy();\n\n    const revCtx = document.getElementById("revChart").getContext("2d");\n    const grad = revCtx.createLinearGradient(0,0,0,revCtx.canvas.height);\n    grad.addColorStop(0,"rgba(246,196,83,0.35)");\n    grad.addColorStop(1,"rgba(246,196,83,0.03)");\n\n    const revDatasets = [{\n      label: "Umsatz", data: series.revenueByDay, fill:true,\n      backgroundColor: grad, borderColor:"#f6c453", tension:.35, pointRadius:0, borderWidth:2\n    }];\n    if (compareToggle.checked && prevSeries){\n      revDatasets.push({\n        label:"Vorperiode", data: prevSeries.revPrevByDay, fill:false,\n        borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], tension:.35, pointRadius:0, borderWidth:1.5\n      });\n    }\n\n    revChart = new Chart(revCtx,{\n      type: "line",\n      data: { labels: series.labels, datasets: revDatasets },\n      options: {\n        responsive:true, maintainAspectRatio:false,\n        plugins:{ legend:{display:false}, tooltip:{ callbacks:{ label:(ctx)=>fmtEUR(ctx.parsed.y) } } },\n        scales:{\n          x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},\n          y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)", callback:(v)=>fmtEUR(v), maxTicksLimit:5 }, beginAtZero:true }\n        }\n      }\n    });\n\n    const vipCtx = document.getElementById("vipChart").getContext("2d");\n    const vipDatasets = [{\n      label:"Neue VIPs", data: series.newVipSeries, borderRadius:6, borderSkipped:false,\n      backgroundColor:"rgba(246,196,83,.85)"\n    }];\n    if (compareToggle.checked && prevSeries){\n      vipDatasets.push({\n        label:"Vorperiode", type:"line", data: prevSeries.newVipPrev,\n        borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], pointRadius:0, tension:.35, fill:false\n      });\n    }\n\n    vipChart = new Chart(vipCtx,{\n      type:"bar",\n      data:{ labels: series.labels, datasets: vipDatasets },\n      options:{\n        responsive:true, maintainAspectRatio:false, plugins:{ legend:{display:false} },\n        scales:{\n          x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},\n          y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)" }, beginAtZero:true }\n        }\n      }\n    });\n  }\n\n  // -------- Top/Flop & KI-Tipp --------\n  const wdayDE = (iso) => ["So","Mo","Di","Mi","Do","Fr","Sa"][new Date(iso).getDay()] || "";\n\n  function renderTopFlop(series){\n    const labels = series.labels;\n    const rev    = series.revenueByDay;\n    if (!labels.length) return;\n\n    const max = Math.max(...rev), min = Math.min(...rev);\n    const topIdx  = rev.indexOf(max);\n    const flopIdx = rev.indexOf(min);\n    const avg = rev.reduce((a,b)=>a+b,0)/Math.max(1,rev.length);\n\n    el("tfTopDate") .textContent = `${labels[topIdx]} (${wdayDE(labels[topIdx])})`;\n    el("tfTopValue").textContent = fmtEUR(max);\n    el("tfFlopDate").textContent = `${labels[flopIdx]} (${wdayDE(labels[flopIdx])})`;\n    el("tfFlopValue").textContent= fmtEUR(min);\n    el("tfAvgValue").textContent = fmtEUR(avg);\n\n    const badge = (node, val, positiveGood=true)=>{\n      const d = avg>0 ? (val-avg)/avg : 0;\n      const txt = (d>=0?"+":"\u2212") + (Math.abs(d)*100).toFixed(1) + "% vs. \xD8";\n      node.textContent = txt;\n      node.classList.remove("badge-pos","badge-neg");\n      node.classList.add(((d>=0)===positiveGood) ? "badge-pos" : "badge-neg");\n    };\n    badge(el("tfTopDelta"),  max, true);\n    badge(el("tfFlopDelta"), min, false);\n\n    window.__tfSummary = buildTipPayload(series);\n  }\n\n  function buildTipPayload(series){\n    const { labels, revenueByDay, newVipSeries, totals } = series;\n    const wdNames=["So","Mo","Di","Mi","Do","Fr","Sa"];\n    const byWd = wdNames.reduce((a,k)=> (a[k]={revenue:0,newVips:0}, a), {});\n    labels.forEach((d,i)=>{\n      const wd=wdNames[new Date(d).getDay()];\n      byWd[wd].revenue += revenueByDay[i]||0;\n      byWd[wd].newVips += newVipSeries[i]||0;\n    });\n    const max = Math.max(...revenueByDay), min = Math.min(...revenueByDay);\n    const topIdx=revenueByDay.indexOf(max), flopIdx=revenueByDay.indexOf(min);\n    const avg = revenueByDay.reduce((a,b)=>a+b,0)/Math.max(1,revenueByDay.length);\n\n    return {\n      rangeDays: labels.length,\n      start: labels[0], end: labels.at(-1),\n      currency: "EUR",\n      price: Number(preis||0),\n      totals: { revenue: totals.revenueTotal, newVips: totals.newTotal, activeToday: totals.activeToday },\n      avgRevenuePerDay: avg,\n      volatility: (Math.max(...revenueByDay) - Math.min(...revenueByDay)) / Math.max(1, avg),\n      top:  { date: labels[topIdx],  value: max,  weekday: wdayDE(labels[topIdx]),  newVips: newVipSeries[topIdx]||0 },\n      flop: { date: labels[flopIdx], value: min,  weekday: wdayDE(labels[flopIdx]), newVips: newVipSeries[flopIdx]||0 },\n      revenueByDay: labels.map((d,i)=> [d, Number(revenueByDay[i]||0)]),\n      newVipByDay:  labels.map((d,i)=> [d, Number(newVipSeries[i]||0)]),\n      weekdayBreakdown: byWd\n    };\n  }\n\n  const TIP_ENDPOINT = "/api/insight-tip";\n  const tipCache = new Map();\n  async function fetchAiTip(summary){\n    const key = `${summary.start}-${summary.end}`;\n    if (tipCache.has(key)) return tipCache.get(key);\n\n    const resp = await fetch(TIP_ENDPOINT, {\n      method:"POST",\n      headers:{ "content-type":"application/json" },\n      body: JSON.stringify(summary)\n    });\n    if (!resp.ok) throw new Error(`AI ${resp.status}`);\n    const data = await resp.json();\n    const tip = (data?.tip || "").trim();\n    if (tip) tipCache.set(key, tip);\n    return tip;\n  }\n\n  function fallbackTip(summary){\n    const { top, flop, avgRevenuePerDay, volatility } = summary;\n    const lines = [];\n    if (["Sa","So"].includes(flop.weekday)){\n      lines.push(`Am Wochenende war es ruhiger. Teste am Freitagabend (19\u201321 Uhr) eine kurze Aktion mit Story und Countdown, um Schwung mitzunehmen.`);\n    } else {\n      lines.push(`Am ${flop.weekday} war es ruhiger. Plane am Vorabend (19\u201321 Uhr) eine Story mit klarem Hinweis, was man tun soll (z. B. \u201EJetzt beitreten\u201C), und pinne sie bis ${flop.weekday}.`);\n    }\n    if (top.value > avgRevenuePerDay*1.3){\n      lines.push(`Der Top-Tag (${top.weekday}) lief deutlich besser. Wiederhole Format und Uhrzeit zeitnah \u2013 gleicher Aufh\xE4nger, klarer Nutzen.`);\n    }\n    if (volatility > 1.2){\n      lines.push(`Die Werte schwanken stark. F\xFClle ruhige Tage mit kleinen Anreizen (z. B. 5 % f\xFCr 12 Std.) oder kurzen Erinnerungs-DMs.`);\n    }\n    return lines.join(" ");\n  }\n\n  const tipBtn = el("tfToggleTip");\n  tipBtn.addEventListener("click", async ()=>{\n    const box = el("tfTipWrap");\n    const isHidden = box.classList.contains("hidden");\n    if (!isHidden){\n      box.classList.add("hidden");\n      tipBtn.textContent = "\u{1F4A1} Tipp anzeigen";\n      return;\n    }\n    tipBtn.disabled = true;\n    tipBtn.textContent = "\u2026 Tipp wird generiert";\n    try{\n      const series = computeSeries(RANGE);\n      const summary = buildTipPayload(series);\n      const tip = await fetchAiTip(summary).catch(()=> fallbackTip(summary));\n      el("tfTip").textContent = tip || fallbackTip(summary);\n      box.classList.remove("hidden");\n      tipBtn.textContent = "\u{1F4A1} Tipp ausblenden";\n    } catch(err){\n      dbg("\u26A0\uFE0F KI-Tipp Fehler:", err?.message||err);\n      el("tfTip").textContent = "Konnte den Tipp gerade nicht laden. Bitte sp\xE4ter erneut versuchen.";\n      box.classList.remove("hidden");\n      tipBtn.textContent = "\u{1F4A1} Tipp ausblenden";\n    } finally {\n      tipBtn.disabled = false;\n    }\n  });\n\n  // --- Demo Mode anwenden & UI updaten\n  function applyDemoMode(){\n    vipRows = DEMO ? makeDemoRows() : vipRowsReal.slice();\n    const btn = document.getElementById("demoToggle");\n    if (btn){\n      btn.textContent = DEMO ? "Demo: AN" : "Demo: AUS";\n      btn.classList.toggle("is-active", DEMO);\n    }\n    const stampEl = document.getElementById("dataStamp");\n    if (stampEl){\n      stampEl.textContent = DEMO ? `${baseStampText} \u2022 Demo aktiv` : baseStampText;\n    }\n  }\n\n  // Initial render\n  function rerender(){\n    const series = computeSeries(RANGE);\n    const prev   = compareToggle.checked ? computePrevSeries(RANGE) : null;\n    renderKPIs(series, prev?.totals);\n    renderCharts(series, prev);\n    renderTopFlop(series);\n  }\n\n  // Range events\n  qsA(".range-btn").forEach(btn=>{\n    btn.addEventListener("click", ()=>{\n      qsA(".range-btn").forEach(b=>b.classList.remove("is-active"));\n      btn.classList.add("is-active");\n      RANGE = Number(btn.dataset.range || 30);\n      rerender();\n    });\n  });\n  compareToggle.addEventListener("change", rerender);\n\n  // Demo Toggle\n  const demoBtn = document.getElementById("demoToggle");\n  if (demoBtn){\n    demoBtn.addEventListener("click", ()=>{\n      DEMO = !DEMO;\n      localStorage.setItem("lux_demo", DEMO ? "1" : "0");\n      applyDemoMode();\n      rerender();\n    });\n  }\n\n  // Kick\n  applyDemoMode();\n  rerender();\n\n} catch (e) {\n  dbg("\u274C Render error:", e?.message || e);\n}\n<\/script> '], [" ", '<section class="max-w-6xl mx-auto px-4 py-6 space-y-6" id="dashboardRoot"> <!-- Header / Kontext --> <header class="space-y-2"> <h1 class="text-lg sm:text-xl font-semibold text-white">\xDCbersicht deiner VIP-Performance</h1> <p class="text-sm text-white/70">\nHier siehst du Umsatz, aktive VIPs und Neuabschl\xFCsse f\xFCr den ausgew\xE4hlten Zeitraum.\n        Optional kannst du die <b>Vorperiode</b> zum Vergleich einblenden. Unten kannst du\n        die Daten als CSV exportieren \u2013 inkl. USt-Spalten und SKR-Konten.\n</p> <p id="dataStamp" class="text-[12px] text-white/50">\u2013</p> </header> <!-- Controls: Range + Compare + Demo --> <div class="flex flex-wrap items-center justify-between gap-3"> <div class="flex gap-1 sm:gap-2" id="rangeControls"> <button data-range="7" class="range-btn">7T</button> <button data-range="30" class="range-btn is-active">30T</button> <button data-range="90" class="range-btn">90T</button> </div> <div class="flex items-center gap-2"> <label class="inline-flex items-center gap-2 text-xs sm:text-[13px] text-white/70"> <input type="checkbox" id="compareToggle" class="accent-[#f6c453] w-4 h-4">\nVorperiode vergleichen\n</label> <button id="demoToggle" type="button" class="demo-btn">Demo: AUS</button> </div> </div> <!-- KPI Cards --> <div class="grid grid-cols-2 md:grid-cols-4 gap-3"> <!-- Umsatz --> <article class="kpi-card"> <h3 class="kpi-title">Umsatz (<span id="labelRange1">30</span> Tage)</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiRevenue">\u2013</p> <span class="kpi-delta" id="kpiRevenueDelta"></span> </div> <p class="kpi-note" id="kpiRevenueNote"></p> <div class="kpi-spark"><canvas id="sparkRevenue"></canvas></div> </article> <!-- Aktive VIPs --> <article class="kpi-card"> <h3 class="kpi-title">Aktive VIPs</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiActive">\u2013</p> <span class="kpi-delta" id="kpiActiveDelta"></span> </div> <p class="kpi-note" id="kpiActiveNote"></p> <div class="kpi-spark"><canvas id="sparkActive"></canvas></div> </article> <!-- Neue VIPs --> <article class="kpi-card"> <h3 class="kpi-title">Neue VIPs (<span id="labelRange2">30</span> Tage)</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiNew">\u2013</p> <span class="kpi-delta" id="kpiNewDelta"></span> </div> <p class="kpi-note" id="kpiNewNote"></p> <div class="kpi-spark"><canvas id="sparkNew"></canvas></div> </article> <!-- Conversion Demo --> <article class="kpi-card"> <h3 class="kpi-title">Conversion (Demo)</h3> <div class="flex items-baseline gap-2"> <p class="kpi-value" id="kpiConv">\u2013</p> </div> <p class="kpi-note">Platzhalter \u2013 an Datenquelle anbindbar</p> <div class="kpi-spark opacity-30"><canvas></canvas></div> </article> </div> <!-- Charts --> <div class="charts-wrap overflow-x-auto snap-x snap-mandatory flex gap-4 pb-2 -mx-4 px-4 md:grid md:grid-cols-2 md:overflow-visible md:snap-none md:mx-0 md:px-0"> <article class="chart-card min-w-[88%] snap-start"> <header class="chart-header"> <h3 class="chart-title">Umsatzverlauf</h3> <span class="chart-meta" id="revMeta">\u2013</span> </header> <div class="h-60 sm:h-[260px]"><canvas id="revChart"></canvas></div> </article> <article class="chart-card min-w-[88%] snap-start"> <header class="chart-header"> <h3 class="chart-title">Neue VIPs / Tag</h3> <span class="chart-meta" id="vipMeta">\u2013</span> </header> <div class="h-60 sm:h-[260px]"><canvas id="vipChart"></canvas></div> </article> </div> <!-- \u{1F525} Highlights: Top- & Flop-Tag + optionaler KI-Tipp --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-3"> <div class="flex items-center justify-between gap-3"> <h3 class="text-sm font-semibold text-luxgold">Highlights: Top- & Flop-Tag</h3> <button id="tfToggleTip" class="border border-luxgray rounded-xl px-3 py-1.5 text-xs">\u{1F4A1} Tipp anzeigen</button> </div> <div class="grid grid-cols-1 sm:grid-cols-3 gap-3 items-center"> <div class="rounded-xl border border-white/5 bg-black/40 p-3"> <div class="text-[11px] text-white/60">Top-Tag</div> <div class="mt-1 text-sm text-white/80"><span id="tfTopDate">\u2013</span></div> <div class="mt-1 text-lg font-semibold text-luxgold"><span id="tfTopValue">\u2013</span></div> <div class="mt-1 text-[12px]"><span id="tfTopDelta" class="px-1.5 py-0.5 rounded-md"></span></div> </div> <div class="rounded-xl border border-white/5 bg-black/40 p-3"> <div class="text-[11px] text-white/60">Flop-Tag</div> <div class="mt-1 text-sm text-white/80"><span id="tfFlopDate">\u2013</span></div> <div class="mt-1 text-lg font-semibold text-white/80"><span id="tfFlopValue">\u2013</span></div> <div class="mt-1 text-[12px]"><span id="tfFlopDelta" class="px-1.5 py-0.5 rounded-md"></span></div> </div> <div class="rounded-xl border border-white/5 bg-black/40 p-3"> <div class="text-[11px] text-white/60">Durchschnitt / Tag</div> <div class="mt-1 text-sm text-white/80"><span id="tfAvgDate">im Zeitraum</span></div> <div class="mt-1 text-lg font-semibold text-white/90"><span id="tfAvgValue">\u2013</span></div> </div> </div> <div id="tfTipWrap" class="hidden rounded-xl border border-white/5 bg-black/30 p-3 text-sm text-white/85 leading-6"> <div class="flex items-start gap-2"> <div>\u{1F4A1}</div> <p id="tfTip">\u2013</p> </div> </div> </div> <!-- Export --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-3"> <div class="flex items-center justify-between gap-3"> <h3 class="text-sm font-semibold text-luxgold">Export</h3> <span class="text-[11px] text-white/60">Zeitraum: <span id="exportRangeLabel">\u2013</span></span> </div> <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-3 items-end"> <label class="block"> <span class="text-xs text-white/70">USt-Satz</span> <select id="optVatRate" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm"> <option value="19" selected>19 %</option> <option value="7">7 %</option> <option value="0">0 % (steuerfrei)</option> </select> </label> <label class="block"> <span class="text-xs text-white/70">Kontenplan</span> <select id="optKontoPlan" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm"> <option value="SKR03" selected>SKR03</option> <option value="SKR04">SKR04</option> </select> </label> <label class="block"> <span class="text-xs text-white/70">Erl\xF6skonto (z. B. 8400 / 4400)</span> <input id="optKonto" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm" placeholder="8400" value="8400"> </label> <label class="block"> <span class="text-xs text-white/70">Gegenkonto (Bank, z. B. 1200)</span> <input id="optContra" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm" placeholder="1200" value="1200"> </label> </div> <div class="flex flex-wrap gap-2"> <button id="btnExportSales" class="border border-luxgray rounded-xl px-3 py-2 text-sm">Umsatz (CSV, Steuer)</button> <button id="btnExportVIPs" class="border border-luxgray rounded-xl px-3 py-2 text-sm">VIP-Liste (CSV)</button> </div> <p class="text-[11px] text-white/50 leading-5">\nHinweis: Dieser Export basiert auf deinen VIP-Verk\xE4ufen im gew\xE4hlten Zeitraum und dem eingestellten Preis.\n        F\xFCr Geb\xFChren/Refunds nutze zus\xE4tzlich die Stripe-Berichte. Kontonummern kannst du hier anpassen.\n</p> </div> <!-- Debug --> <pre id="debugBox" class="bg-black/40 border border-luxgray/50 rounded-xl p-3 text-xs text-white/70 overflow-auto"></pre> </section>  <script type="module">\nconst dbg = (...args) => {\n  const parts = [];\n  for (const a of args) { try { parts.push(typeof a === "string" ? a : JSON.stringify(a, null, 2)); } catch { parts.push(String(a)); } }\n  const msg = parts.join(" ");\n  console.log(...args);\n  const box = document.getElementById("debugBox"); if (box) box.textContent += msg + "\\\\n";\n};\n\ntry {\n  // ENV check\n  const meta = document.getElementById("supabase-config");\n  if (!meta?.dataset?.url || !meta?.dataset?.key) { dbg("\u274C Supabase ENV fehlt:", { url: meta?.dataset?.url, keySet: !!meta?.dataset?.key }); throw new Error("Supabase ENV fehlt"); }\n\n  // ---------- Libraries ----------\n  const supaMod = await import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm");\n  await import("https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js");\n  if (!window.Chart) throw new Error("Chart.js nicht geladen");\n  const { createClient } = supaMod;\n  const Chart = window.Chart;\n\n  // --- Demo-Flag (persistiert); URL-Override via ?demo=1|0\n  let DEMO = (typeof window !== "undefined" && localStorage.getItem("lux_demo") === "1");\n  if (typeof window !== "undefined") {\n    const qp = new URLSearchParams(location.search);\n    if (qp.has("demo")) {\n      DEMO = qp.get("demo") === "1";\n      localStorage.setItem("lux_demo", DEMO ? "1" : "0");\n    }\n  }\n\n  // Supabase client\n  const supabase = createClient(meta.dataset.url, meta.dataset.key);\n\n  // DOM shorthands\n  const el = (id) => document.getElementById(id);\n  const qsA = (sel) => Array.from(document.querySelectorAll(sel));\n  const fmtEUR = (n) => (typeof n === "number" ? n : Number(n || 0)).toLocaleString("de-DE",{style:"currency",currency:"EUR",maximumFractionDigits:0});\n\n  // Date helpers\n  const now = new Date();\n  const toISO = (d) => new Date(d).toISOString().slice(0,10);\n  const daysAgo = (d) => new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()-d));\n  function labelsLastNDays(n){const arr=[];for(let i=n-1;i>=0;i--){arr.push(toISO(daysAgo(i)));}return arr;}\n  const stamp = new Intl.DateTimeFormat(\'de-DE\',{dateStyle:\'medium\', timeStyle:\'short\'}).format(new Date());\n  const baseStampText = \\`Datenstand: \\${stamp}\\`;\n  el("dataStamp").textContent = baseStampText;\n\n  // Auth\n  const { data: { user } } = await supabase.auth.getUser();\n  if (!user) { dbg("\u274C Kein User \u2013 redirect /"); window.location.href = "/"; throw new Error("redirect"); }\n\n  // Config\n  const { data: cfg } = await supabase\n    .from("creator_config")\n    .select("preis, vip_dauer")\n    .eq("creator_id", user.id)\n    .maybeSingle();\n\n  const preis = Number(cfg?.preis || 0);\n  const vipDauer = Number(cfg?.vip_dauer || 30);\n\n  // VIPs (echte Daten)\n  const { data: vipData } = await supabase\n    .from("vip_users")\n    .select("letzter_kontakt, vip_bis, status")\n    .eq("creator_id", user.id);\n\n  const vipRowsReal = vipData || [];\n  let vipRows = [];\n\n  // Demo-Rows Generator\n  function makeDemoRows() {\n    const base = new Date();\n    const mk = (offset, days=vipDauer) => ({\n      letzter_kontakt: new Date(base.getTime()-offset*86400000).toISOString(),\n      vip_bis:         new Date(base.getTime()+(days-offset)*86400000).toISOString(),\n      status: "active",\n    });\n    // leichte Streuung f\xFCr Sparklines/Charts\n    const rows = [];\n    for (let i=1;i<=28;i++){ const c = Math.random()<0.55 ? 1 : 0; for(let k=0;k<c;k++) rows.push(mk(i)); }\n    return rows.length ? rows : [mk(1), mk(2), mk(5), mk(7), mk(8), mk(10), mk(15)];\n  }\n\n  // ---------- Aggregation & Rendering ----------\n  let RANGE = 30; // default\n  const compareToggle = el("compareToggle");\n  const exportRangeLabel = el("exportRangeLabel");\n\n  let revChart, vipChart, sparkRev, sparkActive, sparkNew;\n\n  function computeSeries(rangeDays){\n    const labels = labelsLastNDays(rangeDays);\n    const mapNew = Object.fromEntries(labels.map(d=>[d,0]));\n    vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNew[d]!==undefined) mapNew[d]+=1;});\n    const newVipSeries = labels.map(d=>mapNew[d]);\n\n    const revenueByDay = labels.map((_,i)=> (preis>0 ? newVipSeries[i]*preis : 0));\n    const activeEachDay = labels.map(d=> vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= d).length );\n\n    const revenueTotal = revenueByDay.reduce((a,b)=>a+b,0);\n    const activeToday  = activeEachDay.at(-1) || 0;\n    const newTotal     = newVipSeries.reduce((a,b)=>a+b,0);\n\n    return { labels, newVipSeries, revenueByDay, activeEachDay, totals:{ revenueTotal, activeToday, newTotal } };\n  }\n\n  function computePrevSeries(rangeDays){\n    const endPrev = daysAgo(rangeDays);\n    const labelsPrev = [];\n    for(let i=rangeDays-1;i>=0;i--){ labelsPrev.push(toISO(new Date(endPrev.getTime()-i*86400000))); }\n    const mapNewPrev = Object.fromEntries(labelsPrev.map(d=>[d,0]));\n    vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNewPrev[d]!==undefined) mapNewPrev[d]+=1;});\n    const newVipPrev = labelsPrev.map(d=>mapNewPrev[d]);\n    const revPrevByDay = labelsPrev.map((_,i)=> (preis>0 ? newVipPrev[i]*preis : 0));\n    const activePrevEnd = vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= labelsPrev.at(-1)).length;\n    return {\n      newVipPrev, revPrevByDay,\n      totals:{ revenueTotal: revPrevByDay.reduce((a,b)=>a+b,0), activeToday: activePrevEnd, newTotal: newVipPrev.reduce((a,b)=>a+b,0) }\n    };\n  }\n\n  function delta(elm, curr, prev){\n    elm.textContent = "";\n    elm.classList.remove("up","down");\n    if (!compareToggle.checked) return;\n    const d = prev>0 ? (curr-prev)/prev : (curr>0 ? 1 : 0);\n    const txt = (d>=0?"+":"")+ (Math.abs(d)*100).toFixed(1) + "% " + (d>0?"\u2197\uFE0E":"\u2198\uFE0E");\n    elm.textContent = txt;\n    if (d>0) elm.classList.add("up"); else if (d<0) elm.classList.add("down");\n  }\n\n  // Sparklines\n  function renderSpark(canvas, data, color="#f6c453"){\n    const ctx = canvas.getContext("2d");\n    return new Chart(ctx,{\n      type:"line",\n      data:{ labels:data.map((_,i)=>i), datasets:[{ data, borderColor:color, pointRadius:0, tension:.35, borderWidth:2 }]},\n      options:{ responsive:true, maintainAspectRatio:false, plugins:{legend:{display:false},tooltip:{enabled:false}}, scales:{x:{display:false},y:{display:false}} }\n    });\n  }\n\n  function renderKPIs(series, prevTotals){\n    el("labelRange1").textContent = String(RANGE);\n    el("labelRange2").textContent = String(RANGE);\n    exportRangeLabel.textContent = \\`\\${series.labels[0]} \u2013 \\${series.labels.at(-1)}\\`;\n\n    el("kpiRevenue").textContent = fmtEUR(series.totals.revenueTotal);\n    el("kpiActive").textContent  = String(series.totals.activeToday);\n    el("kpiNew").textContent     = String(series.totals.newTotal);\n\n    delta(el("kpiRevenueDelta"), series.totals.revenueTotal, prevTotals?.revenueTotal ?? 0);\n    delta(el("kpiActiveDelta"),  series.totals.activeToday,  prevTotals?.activeToday ?? 0);\n    delta(el("kpiNewDelta"),     series.totals.newTotal,     prevTotals?.newTotal ?? 0);\n\n    el("kpiRevenueNote").textContent =\n      (DEMO ? "Demo-Daten: " : "") + (preis>0 ? "Basierend auf Preis \xD7 neue VIPs" : "Kein Preis in creator_config");\n    el("kpiNewNote").textContent     = \\`Zeitraum: \\${series.labels[0]} \u2013 \\${series.labels.at(-1)}\\`;\n\n    if (sparkRev) sparkRev.destroy(); if (sparkActive) sparkActive.destroy(); if (sparkNew) sparkNew.destroy();\n    sparkRev    = renderSpark(document.getElementById("sparkRevenue"), series.revenueByDay);\n    sparkActive = renderSpark(document.getElementById("sparkActive"),  series.activeEachDay);\n    sparkNew    = renderSpark(document.getElementById("sparkNew"),     series.newVipSeries);\n  }\n\n  function renderCharts(series, prevSeries){\n    el("revMeta").textContent = \\`\\${series.labels[0]} \u2013 \\${series.labels.at(-1)}\\`;\n    el("vipMeta").textContent = el("revMeta").textContent;\n\n    if (revChart) revChart.destroy();\n    if (vipChart) vipChart.destroy();\n\n    const revCtx = document.getElementById("revChart").getContext("2d");\n    const grad = revCtx.createLinearGradient(0,0,0,revCtx.canvas.height);\n    grad.addColorStop(0,"rgba(246,196,83,0.35)");\n    grad.addColorStop(1,"rgba(246,196,83,0.03)");\n\n    const revDatasets = [{\n      label: "Umsatz", data: series.revenueByDay, fill:true,\n      backgroundColor: grad, borderColor:"#f6c453", tension:.35, pointRadius:0, borderWidth:2\n    }];\n    if (compareToggle.checked && prevSeries){\n      revDatasets.push({\n        label:"Vorperiode", data: prevSeries.revPrevByDay, fill:false,\n        borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], tension:.35, pointRadius:0, borderWidth:1.5\n      });\n    }\n\n    revChart = new Chart(revCtx,{\n      type: "line",\n      data: { labels: series.labels, datasets: revDatasets },\n      options: {\n        responsive:true, maintainAspectRatio:false,\n        plugins:{ legend:{display:false}, tooltip:{ callbacks:{ label:(ctx)=>fmtEUR(ctx.parsed.y) } } },\n        scales:{\n          x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},\n          y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)", callback:(v)=>fmtEUR(v), maxTicksLimit:5 }, beginAtZero:true }\n        }\n      }\n    });\n\n    const vipCtx = document.getElementById("vipChart").getContext("2d");\n    const vipDatasets = [{\n      label:"Neue VIPs", data: series.newVipSeries, borderRadius:6, borderSkipped:false,\n      backgroundColor:"rgba(246,196,83,.85)"\n    }];\n    if (compareToggle.checked && prevSeries){\n      vipDatasets.push({\n        label:"Vorperiode", type:"line", data: prevSeries.newVipPrev,\n        borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], pointRadius:0, tension:.35, fill:false\n      });\n    }\n\n    vipChart = new Chart(vipCtx,{\n      type:"bar",\n      data:{ labels: series.labels, datasets: vipDatasets },\n      options:{\n        responsive:true, maintainAspectRatio:false, plugins:{ legend:{display:false} },\n        scales:{\n          x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},\n          y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)" }, beginAtZero:true }\n        }\n      }\n    });\n  }\n\n  // -------- Top/Flop & KI-Tipp --------\n  const wdayDE = (iso) => ["So","Mo","Di","Mi","Do","Fr","Sa"][new Date(iso).getDay()] || "";\n\n  function renderTopFlop(series){\n    const labels = series.labels;\n    const rev    = series.revenueByDay;\n    if (!labels.length) return;\n\n    const max = Math.max(...rev), min = Math.min(...rev);\n    const topIdx  = rev.indexOf(max);\n    const flopIdx = rev.indexOf(min);\n    const avg = rev.reduce((a,b)=>a+b,0)/Math.max(1,rev.length);\n\n    el("tfTopDate") .textContent = \\`\\${labels[topIdx]} (\\${wdayDE(labels[topIdx])})\\`;\n    el("tfTopValue").textContent = fmtEUR(max);\n    el("tfFlopDate").textContent = \\`\\${labels[flopIdx]} (\\${wdayDE(labels[flopIdx])})\\`;\n    el("tfFlopValue").textContent= fmtEUR(min);\n    el("tfAvgValue").textContent = fmtEUR(avg);\n\n    const badge = (node, val, positiveGood=true)=>{\n      const d = avg>0 ? (val-avg)/avg : 0;\n      const txt = (d>=0?"+":"\u2212") + (Math.abs(d)*100).toFixed(1) + "% vs. \xD8";\n      node.textContent = txt;\n      node.classList.remove("badge-pos","badge-neg");\n      node.classList.add(((d>=0)===positiveGood) ? "badge-pos" : "badge-neg");\n    };\n    badge(el("tfTopDelta"),  max, true);\n    badge(el("tfFlopDelta"), min, false);\n\n    window.__tfSummary = buildTipPayload(series);\n  }\n\n  function buildTipPayload(series){\n    const { labels, revenueByDay, newVipSeries, totals } = series;\n    const wdNames=["So","Mo","Di","Mi","Do","Fr","Sa"];\n    const byWd = wdNames.reduce((a,k)=> (a[k]={revenue:0,newVips:0}, a), {});\n    labels.forEach((d,i)=>{\n      const wd=wdNames[new Date(d).getDay()];\n      byWd[wd].revenue += revenueByDay[i]||0;\n      byWd[wd].newVips += newVipSeries[i]||0;\n    });\n    const max = Math.max(...revenueByDay), min = Math.min(...revenueByDay);\n    const topIdx=revenueByDay.indexOf(max), flopIdx=revenueByDay.indexOf(min);\n    const avg = revenueByDay.reduce((a,b)=>a+b,0)/Math.max(1,revenueByDay.length);\n\n    return {\n      rangeDays: labels.length,\n      start: labels[0], end: labels.at(-1),\n      currency: "EUR",\n      price: Number(preis||0),\n      totals: { revenue: totals.revenueTotal, newVips: totals.newTotal, activeToday: totals.activeToday },\n      avgRevenuePerDay: avg,\n      volatility: (Math.max(...revenueByDay) - Math.min(...revenueByDay)) / Math.max(1, avg),\n      top:  { date: labels[topIdx],  value: max,  weekday: wdayDE(labels[topIdx]),  newVips: newVipSeries[topIdx]||0 },\n      flop: { date: labels[flopIdx], value: min,  weekday: wdayDE(labels[flopIdx]), newVips: newVipSeries[flopIdx]||0 },\n      revenueByDay: labels.map((d,i)=> [d, Number(revenueByDay[i]||0)]),\n      newVipByDay:  labels.map((d,i)=> [d, Number(newVipSeries[i]||0)]),\n      weekdayBreakdown: byWd\n    };\n  }\n\n  const TIP_ENDPOINT = "/api/insight-tip";\n  const tipCache = new Map();\n  async function fetchAiTip(summary){\n    const key = \\`\\${summary.start}-\\${summary.end}\\`;\n    if (tipCache.has(key)) return tipCache.get(key);\n\n    const resp = await fetch(TIP_ENDPOINT, {\n      method:"POST",\n      headers:{ "content-type":"application/json" },\n      body: JSON.stringify(summary)\n    });\n    if (!resp.ok) throw new Error(\\`AI \\${resp.status}\\`);\n    const data = await resp.json();\n    const tip = (data?.tip || "").trim();\n    if (tip) tipCache.set(key, tip);\n    return tip;\n  }\n\n  function fallbackTip(summary){\n    const { top, flop, avgRevenuePerDay, volatility } = summary;\n    const lines = [];\n    if (["Sa","So"].includes(flop.weekday)){\n      lines.push(\\`Am Wochenende war es ruhiger. Teste am Freitagabend (19\u201321 Uhr) eine kurze Aktion mit Story und Countdown, um Schwung mitzunehmen.\\`);\n    } else {\n      lines.push(\\`Am \\${flop.weekday} war es ruhiger. Plane am Vorabend (19\u201321 Uhr) eine Story mit klarem Hinweis, was man tun soll (z. B. \u201EJetzt beitreten\u201C), und pinne sie bis \\${flop.weekday}.\\`);\n    }\n    if (top.value > avgRevenuePerDay*1.3){\n      lines.push(\\`Der Top-Tag (\\${top.weekday}) lief deutlich besser. Wiederhole Format und Uhrzeit zeitnah \u2013 gleicher Aufh\xE4nger, klarer Nutzen.\\`);\n    }\n    if (volatility > 1.2){\n      lines.push(\\`Die Werte schwanken stark. F\xFClle ruhige Tage mit kleinen Anreizen (z. B. 5 % f\xFCr 12 Std.) oder kurzen Erinnerungs-DMs.\\`);\n    }\n    return lines.join(" ");\n  }\n\n  const tipBtn = el("tfToggleTip");\n  tipBtn.addEventListener("click", async ()=>{\n    const box = el("tfTipWrap");\n    const isHidden = box.classList.contains("hidden");\n    if (!isHidden){\n      box.classList.add("hidden");\n      tipBtn.textContent = "\u{1F4A1} Tipp anzeigen";\n      return;\n    }\n    tipBtn.disabled = true;\n    tipBtn.textContent = "\u2026 Tipp wird generiert";\n    try{\n      const series = computeSeries(RANGE);\n      const summary = buildTipPayload(series);\n      const tip = await fetchAiTip(summary).catch(()=> fallbackTip(summary));\n      el("tfTip").textContent = tip || fallbackTip(summary);\n      box.classList.remove("hidden");\n      tipBtn.textContent = "\u{1F4A1} Tipp ausblenden";\n    } catch(err){\n      dbg("\u26A0\uFE0F KI-Tipp Fehler:", err?.message||err);\n      el("tfTip").textContent = "Konnte den Tipp gerade nicht laden. Bitte sp\xE4ter erneut versuchen.";\n      box.classList.remove("hidden");\n      tipBtn.textContent = "\u{1F4A1} Tipp ausblenden";\n    } finally {\n      tipBtn.disabled = false;\n    }\n  });\n\n  // --- Demo Mode anwenden & UI updaten\n  function applyDemoMode(){\n    vipRows = DEMO ? makeDemoRows() : vipRowsReal.slice();\n    const btn = document.getElementById("demoToggle");\n    if (btn){\n      btn.textContent = DEMO ? "Demo: AN" : "Demo: AUS";\n      btn.classList.toggle("is-active", DEMO);\n    }\n    const stampEl = document.getElementById("dataStamp");\n    if (stampEl){\n      stampEl.textContent = DEMO ? \\`\\${baseStampText} \u2022 Demo aktiv\\` : baseStampText;\n    }\n  }\n\n  // Initial render\n  function rerender(){\n    const series = computeSeries(RANGE);\n    const prev   = compareToggle.checked ? computePrevSeries(RANGE) : null;\n    renderKPIs(series, prev?.totals);\n    renderCharts(series, prev);\n    renderTopFlop(series);\n  }\n\n  // Range events\n  qsA(".range-btn").forEach(btn=>{\n    btn.addEventListener("click", ()=>{\n      qsA(".range-btn").forEach(b=>b.classList.remove("is-active"));\n      btn.classList.add("is-active");\n      RANGE = Number(btn.dataset.range || 30);\n      rerender();\n    });\n  });\n  compareToggle.addEventListener("change", rerender);\n\n  // Demo Toggle\n  const demoBtn = document.getElementById("demoToggle");\n  if (demoBtn){\n    demoBtn.addEventListener("click", ()=>{\n      DEMO = !DEMO;\n      localStorage.setItem("lux_demo", DEMO ? "1" : "0");\n      applyDemoMode();\n      rerender();\n    });\n  }\n\n  // Kick\n  applyDemoMode();\n  rerender();\n\n} catch (e) {\n  dbg("\u274C Render error:", e?.message || e);\n}\n<\/script> '])), maybeRenderHead()) })}`;
}, "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/dashboard/index.astro", void 0);

const $$file = "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/dashboard/index.astro";
const $$url = "/dashboard";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Index,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
