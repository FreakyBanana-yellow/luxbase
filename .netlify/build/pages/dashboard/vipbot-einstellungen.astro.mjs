/* empty css                                        */
import { c as createComponent, d as renderComponent, r as renderTemplate, b as addAttribute, m as maybeRenderHead } from '../../chunks/astro/server_BM0YAzyH.mjs';
import 'kleur/colors';
import 'html-escaper';
import { $ as $$DashboardLayout } from '../../chunks/DashboardLayout_C-7bYCNc.mjs';
/* empty css                                                   */
export { renderers } from '../../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$VipbotEinstellungen = createComponent(async ($$result, $$props, $$slots) => {
  const BOT_USERNAME = "GroupLuxBot";
  const BOT_API_BASE = "https://luxbasebot.onrender.com";
  return renderTemplate`${renderComponent($$result, "DashboardLayout", $$DashboardLayout, { "title": "VIP-Einstellungen" }, { "default": async ($$result2) => renderTemplate(_a || (_a = __template(["  ", '<div id="lux-meta"', "", ' class="hidden"></div> <section class="max-w-4xl mx-auto px-4 py-6 pb-28 relative space-y-6"> <!-- 🔁 Setup-Progress --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5"> <div class="flex items-center justify-between gap-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Einrichtung</h2> <p id="setupAllDone" class="text-xs sm:text-[13px] text-white/70 hidden">🎉 Alles fertig! Dein VIP-Bot ist live.</p> </div> <ol id="progress" class="mt-3 grid grid-cols-1 sm:grid-cols-3 gap-2.5 sm:gap-3"> <li class="progress-step" data-key="stripe"> <div class="step-dot">1</div> <div class="step-body"> <div class="step-title">Stripe verbinden</div> <div id="progressStripeHint" class="step-hint">Zahlungen aktivieren</div> </div> </li> <li class="progress-step" data-key="bot"> <div class="step-dot">2</div> <div class="step-body"> <div class="step-title">Bot aktivieren</div> <div id="progressBotHint" class="step-hint">DM öffnen & starten</div> </div> </li> <li class="progress-step" data-key="group"> <div class="step-dot">3</div> <div class="step-body"> <div class="step-title">Gruppe verknüpfen</div> <div id="progressGroupHint" class="step-hint">Bot als Admin hinzufügen</div> </div> </li> </ol> <!-- Kurz-Summaries wenn erledigt --> <div id="summaries" class="mt-3 sm:mt-4 space-y-2.5 sm:space-y-3"> <!-- Stripe Summary --> <div id="stripeSummary" class="hidden border border-luxgray rounded-xl p-3 flex items-center justify-between"> <div class="text-sm text-white/80">✅ <b>Stripe verbunden</b></div> <button id="stripeSummaryEdit" class="step-edit min-h-[40px] px-3">⚙️ Bearbeiten</button> </div> <!-- Bot Summary (nur Copy + QR) --> <div id="botSummary" class="hidden border border-luxgray rounded-xl p-3"> <div class="flex items-center justify-between gap-3"> <div class="text-sm text-white/80">✅ <b>Bot aktiv</b></div> <button id="botSummaryEdit" class="step-edit min-h-[40px] px-3">⚙️ Bearbeiten</button> </div> <div class="mt-3 grid grid-cols-1 sm:grid-cols-[1fr,140px] gap-4 items-start"> <div class="space-y-2"> <div class="flex items-center gap-2"> <span class="text-sm text-white/70">Kunden-Link (zum Kopieren)</span> </div> <div class="flex gap-2"> <input id="customerLinkInputSummary" readonly class="flex-1 bg-black/30 border border-luxgray rounded-lg px-3 py-3 text-sm select-all" inputmode="url"> <button id="copyCustomerLinkSummary" type="button" class="border border-luxgray rounded-lg px-3 min-h-[44px] text-sm">\nKopieren\n</button> </div> </div> <div class="flex flex-col items-center gap-2"> <canvas id="qrCustomerSummary" width="140" height="140" class="rounded-lg border border-luxgray w-28 sm:w-[140px] h-28 sm:h-[140px]"></canvas> <button id="downloadQRCustomerSummary" type="button" class="text-xs sm:text-[12px] px-2 py-1 border border-luxgray rounded-lg text-white/70 hover:text-white">\nQR herunterladen\n</button> </div> </div> </div> <!-- Gruppen Summary --> <div id="groupSummary" class="hidden border border-luxgray rounded-xl p-3 flex items-center justify-between"> <div class="text-sm text-white/80">✅ <b>Gruppe verknüpft</b></div> <button id="groupSummaryEdit" class="step-edit min-h-[40px] px-3">⚙️ Bearbeiten</button> </div> </div> </div> <!-- Basis --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Basis</h2> <div class="grid grid-cols-1 sm:grid-cols-2 gap-3"> <label class="block"> <span class="text-sm text-white/70">Preis (€)</span> <input id="preis" type="number" inputmode="decimal" step="1" min="0" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="49"> </label> <label class="block"> <span class="text-sm text-white/70">VIP-Dauer (Tage)</span> <input id="vip_days" type="number" inputmode="numeric" step="1" min="1" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="30"> </label> </div> </div> <!-- Stripe --> <div id="stripeSection" class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-4"> <div class="flex items-center gap-2"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Stripe</h2> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Verbinde zuerst Stripe, damit Zahlungen funktionieren. Es öffnet sich das Stripe-Onboarding.">?</button> </div> <a id="stripeLinkWrap" class="w-full" target="_blank" rel="noreferrer"> <button id="stripeBtn" type="button" class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nStripe verbinden\n</button> </a> <p id="stripeStatus" class="text-xs sm:text-[13px] text-white/60"></p> </div> <!-- Telegram --> <div id="botSection" class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Telegram</h2> <label class="block"> <div class="flex items-center gap-2"> <span class="text-sm text-white/70">Gruppen-Link (Fallback, statisch)</span> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Optionaler, statischer Einladungslink deiner Gruppe – wird nur genutzt, wenn der Einmallink nicht erstellt werden kann.">?</button> </div> <input id="gruppe_link" autocapitalize="off" autocorrect="off" spellcheck="false" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="https://t.me/+abcdef..." inputmode="url"> </label> <div class="grid grid-cols-1 sm:grid-cols-2 gap-3"> <div class="relative"> <button id="linkTelegramBtn" type="button" class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nBot aktivieren\n</button> <button type="button" class="tip-btn absolute right-2 top-1/2 -translate-y-1/2" data-tip="Öffnet den Bot im DM. Danach bitte den Bot als Admin in deiner VIP-Gruppe hinzufügen.">?</button> </div> <div class="relative"> <button id="bindGroupBtn" type="button" class="w-full border border-luxgray rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nGruppe verbinden\n</button> <button type="button" class="tip-btn absolute right-2 top-1/2 -translate-y-1/2" data-tip="Wähle deine VIP-Gruppe und starte den Bot dort. Er verknüpft die Gruppe und erzeugt später Einladungslinks.">?</button> </div> </div> <!-- Kunden-Link + QR (nur Copy + QR, kein Text-Link) --> <div class="grid grid-cols-1 sm:grid-cols-[1fr,140px] gap-4 items-start"> <div class="space-y-2"> <div class="flex items-center gap-2"> <span class="text-sm text-white/70">Kunden-Link (zum Kopieren)</span> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Diesen Link/QR teilst du mit deinen Kunden. Er öffnet den Bot im DM mit deinem Creator-Payload.">?</button> </div> <div class="flex gap-2"> <input id="customerLinkInput" readonly class="flex-1 bg-black/30 border border-luxgray rounded-lg px-3 py-3 text-sm select-all" inputmode="url"> <button id="copyCustomerLink" type="button" class="border border-luxgray rounded-lg px-3 min-h-[44px] text-sm">\nKopieren\n</button> </div> </div> <div class="flex flex-col items-center gap-2"> <canvas id="qrCustomer" width="140" height="140" class="rounded-lg border border-luxgray w-28 sm:w-[140px] h-28 sm:h-[140px]"></canvas> <button id="downloadQRCustomer" type="button" class="text-xs sm:text-[12px] px-2 py-1 border border-luxgray rounded-lg text-white/70 hover:text-white">\nQR herunterladen\n</button> </div> </div> <p class="text-xs sm:text-[13px] text-white/60 leading-5">\nReihenfolge: Erst <b>Stripe verbinden</b>, dann <b>Bot aktivieren</b> (DM) und\n        den Bot als Admin in deiner VIP-Gruppe hinzufügen.\n</p> </div> <!-- 🎙️ Sprachnachricht --> <div id="voiceSection" class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-3"> <div class="flex items-center justify-between gap-2"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Sprachnachricht</h2> <span id="voiceStatusBadge" class="text-xs sm:text-[13px] px-2 py-1 rounded-lg border border-luxgray text-white/80">–</span> </div> <p id="voiceStatusText" class="text-xs sm:text-[13px] text-white/60"></p> <div class="flex flex-wrap gap-2"> <button id="openSetupVoice" type="button" class="bg-luxgold/90 text-black font-semibold rounded-xl py-2.5 px-3 min-h-[40px] text-sm">\nIm Bot aufnehmen\n</button> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Öffne den Bot im DM und sende dort /setup_voice. Danach sprichst du 5–20 Sekunden ein.">?</button> </div> </div> <!-- Texte (einklappbar) --> <div class="bg-black/60 border border-luxgray rounded-2xl"> <button id="toggleTexts" class="w-full flex items-center justify-between px-4 sm:px-5 py-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Texte</h2> <span id="textsChevron" class="text-white/60">▾</span> </button> <div id="textsBody" class="px-4 sm:px-5 pb-5 pt-0 space-y-4"> <label class="block"> <span class="text-sm text-white/70">Welcome-Text</span> <textarea id="welcome_text" rows="3" autocapitalize="off" autocorrect="off" spellcheck="false" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="👋 Willkommen im VIP! ..."></textarea> </label> <label class="block"> <span class="text-sm text-white/70">Regeln-Text</span> <textarea id="regeln_text" rows="3" autocapitalize="off" autocorrect="off" spellcheck="false" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="📜 Regeln ..."></textarea> </label> </div> </div> <!-- Actions (mobile-first sticky) --> <div class="sticky bottom-2 sm:bottom-4 z-40"> <div class="flex items-center gap-2 sm:gap-3 rounded-2xl border border-luxgray bg-black/70 backdrop-blur px-3 py-2 sm:px-4 sm:py-3 supports-[backdrop-filter]:bg-black/50" style="padding-bottom: max(0.5rem, env(safe-area-inset-bottom))"> <button id="saveBtn" type="button" class="flex-1 bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nSpeichern\n</button> <button id="reloadBtn" type="button" class="px-4 py-3.5 min-h-[44px] border border-luxgray rounded-xl text-base sm:text-sm">\nNeu laden\n</button> </div> </div> <p id="hint" class="text-xs sm:text-[13px] text-white/70"></p> </section>   <script defer src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>  <script type="module">\n    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";\n\n    // Meta & ENV\n    const META = document.getElementById("lux-meta");\n    const BOT = META?.dataset?.bot || "GroupLuxBot";\n    const BOT_API = META?.dataset?.botApi || "";\n\n    const $ = (id) => document.getElementById(id);\n    const toast = (m="OK") => { const t=document.createElement("div"); t.className="toast"; t.textContent=m; document.body.appendChild(t); setTimeout(()=>t.remove(),1400); };\n\n    // Supabase\n    const supaMeta = document.getElementById("supabase-config");\n    if (!supaMeta?.dataset?.url || !supaMeta?.dataset?.key) {\n      $("hint").textContent = "❌ Supabase-Konfiguration fehlt.";\n      throw new Error("supabase-config-missing");\n    }\n    const supabase = createClient(supaMeta.dataset.url, supaMeta.dataset.key);\n\n    // Felder\n    const fields = ["preis","vip_days","gruppe_link","welcome_text","regeln_text"];\n\n    // State\n    const state = {\n      stripeConnected: false,\n      stripeId: null,\n      botActive: false,\n      groupLinked: false,\n      userId: null,\n      // Voice\n      voiceHas: false,\n      voiceUpdatedAt: null,\n      voiceCaption: null\n    };\n\n    // Auth\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) { window.location.href = "/"; throw new Error("not-auth"); }\n    state.userId = user.id;\n\n    // Links\n    const customerLink = () => `https://t.me/${BOT}?start=${encodeURIComponent("creator_"+state.userId)}`; // zum Teilen\n    const groupLink   = () => `https://t.me/${BOT}?startgroup=${encodeURIComponent("creator_"+state.userId)}`; // Gruppe verbinden\n    const linkTelegram = () => `https://t.me/${BOT}?start=${encodeURIComponent("link_creator_"+state.userId)}`; // DM-Owner-Connect\n    const stripeRedirect = () => `${BOT_API}/api/stripe/connect-redirect?creator_id=${encodeURIComponent(state.userId)}`;\n\n    // Zusätzlich: für Voice einfach DM öffnen (gleich wie linkTelegram)\n    const openSetupVoice = () => window.open(linkTelegram(), "_blank");\n\n    // QR\n    async function drawQR(canvasId, value, tries=10) {\n      try {\n        const c = document.getElementById(canvasId); if (!c) return;\n        const dpr = Math.max(1, window.devicePixelRatio || 1);\n        const size = 140;\n        c.width = size * dpr; c.height = size * dpr;\n        c.style.width = size + "px"; c.style.height = size + "px";\n        if (window.QRCode?.toCanvas) {\n          await window.QRCode.toCanvas(c, value, { margin: 1, scale: dpr });\n          return;\n        }\n        if (tries > 0) setTimeout(()=>drawQR(canvasId, value, tries-1), 120);\n      } catch (err) { console.warn("QR render error:", err); }\n    }\n\n    function updateCustomerLinkTargets() {\n      const s = customerLink();\n      // Bearbeitungssektion (nur Copy + QR)\n      $("customerLinkInput").value = s;\n      drawQR("qrCustomer", s);\n      // Summary (nur Copy + QR)\n      $("customerLinkInputSummary").value = s;\n      drawQR("qrCustomerSummary", s);\n    }\n\n    async function updatePreviews() {\n      updateCustomerLinkTargets();\n      // Stripe-Link\n      const wrap = $("stripeLinkWrap");\n      if (wrap) wrap.href = BOT_API ? stripeRedirect() : "#";\n    }\n\n    // UI Helpers\n    function setHidden(el, hidden) { if (!el) return; el.classList.toggle("hidden", !!hidden); }\n\n    function refreshProgressUI() {\n      // Steps\n      const stepStripe = document.querySelector(\'.progress-step[data-key="stripe"]\');\n      const stepBot    = document.querySelector(\'.progress-step[data-key="bot"]\');\n      const stepGroup  = document.querySelector(\'.progress-step[data-key="group"]\');\n\n      stepStripe?.classList.toggle("done", state.stripeConnected);\n      stepBot?.classList.toggle("done", state.botActive);\n      stepGroup?.classList.toggle("done", state.groupLinked);\n\n      // Summaries: Stripe, Bot (nur wenn Bot+Gruppe fertig), Gruppe\n      setHidden($("stripeSummary"), !state.stripeConnected);\n\n      const botSectionShouldHide = state.botActive && state.groupLinked;\n      setHidden($("botSummary"), !botSectionShouldHide); // nur zeigen, wenn Bot + Gruppe erledigt\n      setHidden($("groupSummary"), !state.groupLinked);\n\n      // Sections einklappen\n      setHidden($("stripeSection"), state.stripeConnected);\n      setHidden($("botSection"), botSectionShouldHide);\n\n      // All done Banner\n      $("setupAllDone").classList.toggle("hidden", !(state.stripeConnected && state.botActive && state.groupLinked));\n    }\n\n    function updateVoiceUI() {\n      const badge = $("voiceStatusBadge");\n      const text  = $("voiceStatusText");\n      if (!badge || !text) return;\n\n      if (state.voiceHas) {\n        badge.textContent = "✅ Voicenachricht gespeichert";\n        text.textContent  = state.voiceUpdatedAt\n          ? `Gespeichert am ${new Date(state.voiceUpdatedAt).toLocaleString()}`\n          : "Gespeichert.";\n      } else {\n        badge.textContent = "❌ Keine Voicenachricht hinterlegt";\n        text.textContent  = "Tipp: Öffne den Bot im DM und sende dort /setup_voice – dann nimmst du 5–20 Sekunden auf.";\n      }\n    }\n\n    // Load\n    async function loadCfg() {\n      const { data, error } = await supabase\n        .from("creator_config")\n        .select(`\n          ${fields.join(",")},\n          stripe_account_id,\n          group_chat_id,\n          telegram_id,\n          has_vipbot,\n          voice_enabled,\n          voice_file_id,\n          voice_caption,\n          voice_updated_at\n        `)\n        .eq("creator_id", state.userId)\n        .maybeSingle();\n\n      if (error) {\n        console.warn("loadCfg error:", error);\n        $("hint").textContent = "❌ Konnte Daten nicht laden. Bitte später erneut versuchen.";\n      }\n\n      if (data) {\n        // Formular-Felder\n        for (const k of fields) if ($(k)) $(k).value = (data[k] ?? "");\n\n        // Status-Ableitung\n        state.stripeConnected = !!data.stripe_account_id;\n        state.stripeId = data.stripe_account_id || null;\n        state.groupLinked = !!data.group_chat_id;\n        state.botActive = !!(data.telegram_id || data.group_chat_id || data.has_vipbot);\n\n        // Voice\n        state.voiceHas = !!(data.voice_enabled && data.voice_file_id);\n        state.voiceUpdatedAt = data.voice_updated_at || null;\n        state.voiceCaption = data.voice_caption || null;\n\n        $("stripeStatus").textContent = state.stripeConnected\n          ? `✅ Stripe verbunden.`\n          : "⚠️ Stripe noch nicht verbunden.";\n      } else {\n        // Kein Datensatz -> neutrales UI\n        for (const k of fields) if ($(k)) $(k).value = "";\n        state.stripeConnected = false;\n        state.stripeId = null;\n        state.groupLinked = false;\n        state.botActive = false;\n      }\n\n      await updatePreviews();\n      refreshProgressUI();\n      updateVoiceUI();\n    }\n\n    // Speichern\n    $("saveBtn").addEventListener("click", async () => {\n      const payload = { creator_id: state.userId };\n      for (const k of fields) payload[k] = $(k)?.value ?? null;\n      payload.preis = Number(payload.preis || 0);\n      payload.vip_days = Number(payload.vip_days || 30);\n\n      const { error } = await supabase.from("creator_config").upsert(payload, { onConflict: "creator_id" });\n      $("hint").textContent = error ? "❌ Speichern fehlgeschlagen." : "✅ Gespeichert.";\n      if (!error) toast("Gespeichert");\n    });\n\n    // Reload\n    $("reloadBtn").addEventListener("click", loadCfg);\n\n    // Bearbeiten-Buttons aus den Summaries (Progress hat keine)\n    const showStripeEditor = () => { setHidden($("stripeSection"), false); setHidden($("stripeSummary"), true); };\n    const showBotEditor = () => { setHidden($("botSection"), false); setHidden($("botSummary"), true); setHidden($("groupSummary"), true); };\n\n    ["stripeSummaryEdit"].forEach(id => $(id).addEventListener("click", showStripeEditor));\n    ["botSummaryEdit","groupSummaryEdit"].forEach(id => $(id).addEventListener("click", showBotEditor));\n\n    // Texte einklappen\n    let textsOpen = true;\n    const toggleTexts = () => {\n      textsOpen = !textsOpen;\n      setHidden($("textsBody"), !textsOpen);\n      $("textsChevron").textContent = textsOpen ? "▾" : "▸";\n    };\n    $("toggleTexts").addEventListener("click", toggleTexts);\n\n    // Bot aktivieren (DM)\n    $("linkTelegramBtn").addEventListener("click", () => {\n      if (state.botActive) {\n        const ok = confirm("Der Bot ist bereits aktiv. Möchtest du ihn erneut öffnen/neu verknüpfen?");\n        if (!ok) return;\n      }\n      window.open(linkTelegram(), "_blank");\n      $("hint").textContent = "Telegram öffnen → Bot im DM starten, danach Bot in der Gruppe als Admin hinzufügen.";\n    });\n\n    // Gruppe verbinden\n    $("bindGroupBtn").addEventListener("click", () => {\n      if (state.groupLinked) {\n        const ok = confirm("Es ist bereits eine Gruppe verknüpft. Möchtest du eine andere Gruppe verbinden?");\n        if (!ok) return;\n      }\n      window.open(groupLink(), "_blank");\n      $("hint").textContent = "Telegram → Gruppe auswählen → Bot starten → Admin-Rechte geben.";\n    });\n\n    // Stripe\n    $("stripeBtn").addEventListener("click", (e) => {\n      if (!BOT_API) {\n        e.preventDefault();\n        alert("PUBLIC_BOT_API_BASE fehlt im Frontend.");\n        return;\n      }\n      if (state.stripeConnected) {\n        const ok = confirm("Stripe ist bereits verbunden. Möchtest du das Onboarding erneut öffnen, um die Verbindung zu ändern?");\n        if (!ok) { e.preventDefault(); return; }\n      }\n    });\n\n    // Voice: Im Bot aufnehmen (öffnet DM)\n    $("openSetupVoice").addEventListener("click", () => {\n      openSetupVoice();\n      $("hint").textContent = "Im Telegram-DM /setup_voice senden und die Begrüßung aufnehmen (5–20 Sek.).";\n    });\n\n    // Copy Kunden-Link (Editor & Summary)\n    async function copyToClipboard(val) {\n      try { await navigator.clipboard.writeText(val); toast("Kunden-Link kopiert"); }\n      catch { /* fallback */ }\n    }\n    $("copyCustomerLink").addEventListener("click", () => copyToClipboard($("customerLinkInput")?.value || ""));\n    $("copyCustomerLinkSummary").addEventListener("click", () => copyToClipboard($("customerLinkInputSummary")?.value || ""));\n\n    // QR Download (Editor & Summary)\n    function downloadQR(canvasId, filename) {\n      const c = $(canvasId); if (!c) return;\n      const a = document.createElement("a");\n      a.download = filename;\n      a.href = c.toDataURL("image/png");\n      a.click();\n    }\n    $("downloadQRCustomer").addEventListener("click", () => downloadQR("qrCustomer","luxbase-kundenlink-qr.png"));\n    $("downloadQRCustomerSummary").addEventListener("click", () => downloadQR("qrCustomerSummary","luxbase-kundenlink-qr.png"));\n\n    // Tooltips\n    let activeTipEl = null, hideTimer = null;\n    function showTip(anchorBtn, text) {\n      hideTip();\n      const tip = document.createElement("div");\n      tip.className = "tip tip-enter";\n      tip.textContent = text;\n      document.body.appendChild(tip);\n      requestAnimationFrame(() => tip.classList.add("tip-enter-active"));\n      const rect = anchorBtn.getBoundingClientRect();\n      const margin = 8;\n      const top = rect.bottom + margin + window.scrollY;\n      const left = rect.left + rect.width / 2 - tip.offsetWidth / 2 + window.scrollX;\n      tip.style.top = `${top}px`;\n      tip.style.left = `${Math.max(12, Math.min(left, window.scrollX + document.documentElement.clientWidth - tip.offsetWidth - 12))}px`;\n      activeTipEl = tip;\n      hideTimer = setTimeout(hideTip, 3500);\n    }\n    function hideTip() {\n      if (!activeTipEl) return;\n      activeTipEl.classList.remove("tip-enter", "tip-enter-active");\n      activeTipEl.classList.add("tip-exit");\n      requestAnimationFrame(() => {\n        activeTipEl.classList.add("tip-exit-active");\n        setTimeout(() => { activeTipEl?.remove(); activeTipEl = null; }, 120);\n      });\n      clearTimeout(hideTimer); hideTimer = null;\n    }\n    document.addEventListener("click", (e) => {\n      const btn = e.target.closest("[data-tip]");\n      if (btn) { e.stopPropagation(); showTip(btn, btn.getAttribute("data-tip") || ""); }\n      else hideTip();\n    });\n\n    // Initial laden\n    await loadCfg();\n  </script> '], ["  ", '<div id="lux-meta"', "", ' class="hidden"></div> <section class="max-w-4xl mx-auto px-4 py-6 pb-28 relative space-y-6"> <!-- 🔁 Setup-Progress --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5"> <div class="flex items-center justify-between gap-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Einrichtung</h2> <p id="setupAllDone" class="text-xs sm:text-[13px] text-white/70 hidden">🎉 Alles fertig! Dein VIP-Bot ist live.</p> </div> <ol id="progress" class="mt-3 grid grid-cols-1 sm:grid-cols-3 gap-2.5 sm:gap-3"> <li class="progress-step" data-key="stripe"> <div class="step-dot">1</div> <div class="step-body"> <div class="step-title">Stripe verbinden</div> <div id="progressStripeHint" class="step-hint">Zahlungen aktivieren</div> </div> </li> <li class="progress-step" data-key="bot"> <div class="step-dot">2</div> <div class="step-body"> <div class="step-title">Bot aktivieren</div> <div id="progressBotHint" class="step-hint">DM öffnen & starten</div> </div> </li> <li class="progress-step" data-key="group"> <div class="step-dot">3</div> <div class="step-body"> <div class="step-title">Gruppe verknüpfen</div> <div id="progressGroupHint" class="step-hint">Bot als Admin hinzufügen</div> </div> </li> </ol> <!-- Kurz-Summaries wenn erledigt --> <div id="summaries" class="mt-3 sm:mt-4 space-y-2.5 sm:space-y-3"> <!-- Stripe Summary --> <div id="stripeSummary" class="hidden border border-luxgray rounded-xl p-3 flex items-center justify-between"> <div class="text-sm text-white/80">✅ <b>Stripe verbunden</b></div> <button id="stripeSummaryEdit" class="step-edit min-h-[40px] px-3">⚙️ Bearbeiten</button> </div> <!-- Bot Summary (nur Copy + QR) --> <div id="botSummary" class="hidden border border-luxgray rounded-xl p-3"> <div class="flex items-center justify-between gap-3"> <div class="text-sm text-white/80">✅ <b>Bot aktiv</b></div> <button id="botSummaryEdit" class="step-edit min-h-[40px] px-3">⚙️ Bearbeiten</button> </div> <div class="mt-3 grid grid-cols-1 sm:grid-cols-[1fr,140px] gap-4 items-start"> <div class="space-y-2"> <div class="flex items-center gap-2"> <span class="text-sm text-white/70">Kunden-Link (zum Kopieren)</span> </div> <div class="flex gap-2"> <input id="customerLinkInputSummary" readonly class="flex-1 bg-black/30 border border-luxgray rounded-lg px-3 py-3 text-sm select-all" inputmode="url"> <button id="copyCustomerLinkSummary" type="button" class="border border-luxgray rounded-lg px-3 min-h-[44px] text-sm">\nKopieren\n</button> </div> </div> <div class="flex flex-col items-center gap-2"> <canvas id="qrCustomerSummary" width="140" height="140" class="rounded-lg border border-luxgray w-28 sm:w-[140px] h-28 sm:h-[140px]"></canvas> <button id="downloadQRCustomerSummary" type="button" class="text-xs sm:text-[12px] px-2 py-1 border border-luxgray rounded-lg text-white/70 hover:text-white">\nQR herunterladen\n</button> </div> </div> </div> <!-- Gruppen Summary --> <div id="groupSummary" class="hidden border border-luxgray rounded-xl p-3 flex items-center justify-between"> <div class="text-sm text-white/80">✅ <b>Gruppe verknüpft</b></div> <button id="groupSummaryEdit" class="step-edit min-h-[40px] px-3">⚙️ Bearbeiten</button> </div> </div> </div> <!-- Basis --> <div class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Basis</h2> <div class="grid grid-cols-1 sm:grid-cols-2 gap-3"> <label class="block"> <span class="text-sm text-white/70">Preis (€)</span> <input id="preis" type="number" inputmode="decimal" step="1" min="0" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="49"> </label> <label class="block"> <span class="text-sm text-white/70">VIP-Dauer (Tage)</span> <input id="vip_days" type="number" inputmode="numeric" step="1" min="1" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="30"> </label> </div> </div> <!-- Stripe --> <div id="stripeSection" class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-4"> <div class="flex items-center gap-2"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Stripe</h2> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Verbinde zuerst Stripe, damit Zahlungen funktionieren. Es öffnet sich das Stripe-Onboarding.">?</button> </div> <a id="stripeLinkWrap" class="w-full" target="_blank" rel="noreferrer"> <button id="stripeBtn" type="button" class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nStripe verbinden\n</button> </a> <p id="stripeStatus" class="text-xs sm:text-[13px] text-white/60"></p> </div> <!-- Telegram --> <div id="botSection" class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Telegram</h2> <label class="block"> <div class="flex items-center gap-2"> <span class="text-sm text-white/70">Gruppen-Link (Fallback, statisch)</span> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Optionaler, statischer Einladungslink deiner Gruppe – wird nur genutzt, wenn der Einmallink nicht erstellt werden kann.">?</button> </div> <input id="gruppe_link" autocapitalize="off" autocorrect="off" spellcheck="false" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="https://t.me/+abcdef..." inputmode="url"> </label> <div class="grid grid-cols-1 sm:grid-cols-2 gap-3"> <div class="relative"> <button id="linkTelegramBtn" type="button" class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nBot aktivieren\n</button> <button type="button" class="tip-btn absolute right-2 top-1/2 -translate-y-1/2" data-tip="Öffnet den Bot im DM. Danach bitte den Bot als Admin in deiner VIP-Gruppe hinzufügen.">?</button> </div> <div class="relative"> <button id="bindGroupBtn" type="button" class="w-full border border-luxgray rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nGruppe verbinden\n</button> <button type="button" class="tip-btn absolute right-2 top-1/2 -translate-y-1/2" data-tip="Wähle deine VIP-Gruppe und starte den Bot dort. Er verknüpft die Gruppe und erzeugt später Einladungslinks.">?</button> </div> </div> <!-- Kunden-Link + QR (nur Copy + QR, kein Text-Link) --> <div class="grid grid-cols-1 sm:grid-cols-[1fr,140px] gap-4 items-start"> <div class="space-y-2"> <div class="flex items-center gap-2"> <span class="text-sm text-white/70">Kunden-Link (zum Kopieren)</span> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Diesen Link/QR teilst du mit deinen Kunden. Er öffnet den Bot im DM mit deinem Creator-Payload.">?</button> </div> <div class="flex gap-2"> <input id="customerLinkInput" readonly class="flex-1 bg-black/30 border border-luxgray rounded-lg px-3 py-3 text-sm select-all" inputmode="url"> <button id="copyCustomerLink" type="button" class="border border-luxgray rounded-lg px-3 min-h-[44px] text-sm">\nKopieren\n</button> </div> </div> <div class="flex flex-col items-center gap-2"> <canvas id="qrCustomer" width="140" height="140" class="rounded-lg border border-luxgray w-28 sm:w-[140px] h-28 sm:h-[140px]"></canvas> <button id="downloadQRCustomer" type="button" class="text-xs sm:text-[12px] px-2 py-1 border border-luxgray rounded-lg text-white/70 hover:text-white">\nQR herunterladen\n</button> </div> </div> <p class="text-xs sm:text-[13px] text-white/60 leading-5">\nReihenfolge: Erst <b>Stripe verbinden</b>, dann <b>Bot aktivieren</b> (DM) und\n        den Bot als Admin in deiner VIP-Gruppe hinzufügen.\n</p> </div> <!-- 🎙️ Sprachnachricht --> <div id="voiceSection" class="bg-black/60 border border-luxgray rounded-2xl p-4 sm:p-5 space-y-3"> <div class="flex items-center justify-between gap-2"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Sprachnachricht</h2> <span id="voiceStatusBadge" class="text-xs sm:text-[13px] px-2 py-1 rounded-lg border border-luxgray text-white/80">–</span> </div> <p id="voiceStatusText" class="text-xs sm:text-[13px] text-white/60"></p> <div class="flex flex-wrap gap-2"> <button id="openSetupVoice" type="button" class="bg-luxgold/90 text-black font-semibold rounded-xl py-2.5 px-3 min-h-[40px] text-sm">\nIm Bot aufnehmen\n</button> <button type="button" class="tip-btn" aria-label="Hilfe" data-tip="Öffne den Bot im DM und sende dort /setup_voice. Danach sprichst du 5–20 Sekunden ein.">?</button> </div> </div> <!-- Texte (einklappbar) --> <div class="bg-black/60 border border-luxgray rounded-2xl"> <button id="toggleTexts" class="w-full flex items-center justify-between px-4 sm:px-5 py-4"> <h2 class="text-luxgold text-base sm:text-lg font-semibold">Texte</h2> <span id="textsChevron" class="text-white/60">▾</span> </button> <div id="textsBody" class="px-4 sm:px-5 pb-5 pt-0 space-y-4"> <label class="block"> <span class="text-sm text-white/70">Welcome-Text</span> <textarea id="welcome_text" rows="3" autocapitalize="off" autocorrect="off" spellcheck="false" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="👋 Willkommen im VIP! ..."></textarea> </label> <label class="block"> <span class="text-sm text-white/70">Regeln-Text</span> <textarea id="regeln_text" rows="3" autocapitalize="off" autocorrect="off" spellcheck="false" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base sm:text-sm" placeholder="📜 Regeln ..."></textarea> </label> </div> </div> <!-- Actions (mobile-first sticky) --> <div class="sticky bottom-2 sm:bottom-4 z-40"> <div class="flex items-center gap-2 sm:gap-3 rounded-2xl border border-luxgray bg-black/70 backdrop-blur px-3 py-2 sm:px-4 sm:py-3 supports-[backdrop-filter]:bg-black/50" style="padding-bottom: max(0.5rem, env(safe-area-inset-bottom))"> <button id="saveBtn" type="button" class="flex-1 bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 min-h-[44px] text-base sm:text-sm">\nSpeichern\n</button> <button id="reloadBtn" type="button" class="px-4 py-3.5 min-h-[44px] border border-luxgray rounded-xl text-base sm:text-sm">\nNeu laden\n</button> </div> </div> <p id="hint" class="text-xs sm:text-[13px] text-white/70"></p> </section>   <script defer src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>  <script type="module">\n    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";\n\n    // Meta & ENV\n    const META = document.getElementById("lux-meta");\n    const BOT = META?.dataset?.bot || "GroupLuxBot";\n    const BOT_API = META?.dataset?.botApi || "";\n\n    const $ = (id) => document.getElementById(id);\n    const toast = (m="OK") => { const t=document.createElement("div"); t.className="toast"; t.textContent=m; document.body.appendChild(t); setTimeout(()=>t.remove(),1400); };\n\n    // Supabase\n    const supaMeta = document.getElementById("supabase-config");\n    if (!supaMeta?.dataset?.url || !supaMeta?.dataset?.key) {\n      $("hint").textContent = "❌ Supabase-Konfiguration fehlt.";\n      throw new Error("supabase-config-missing");\n    }\n    const supabase = createClient(supaMeta.dataset.url, supaMeta.dataset.key);\n\n    // Felder\n    const fields = ["preis","vip_days","gruppe_link","welcome_text","regeln_text"];\n\n    // State\n    const state = {\n      stripeConnected: false,\n      stripeId: null,\n      botActive: false,\n      groupLinked: false,\n      userId: null,\n      // Voice\n      voiceHas: false,\n      voiceUpdatedAt: null,\n      voiceCaption: null\n    };\n\n    // Auth\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) { window.location.href = "/"; throw new Error("not-auth"); }\n    state.userId = user.id;\n\n    // Links\n    const customerLink = () => \\`https://t.me/\\${BOT}?start=\\${encodeURIComponent("creator_"+state.userId)}\\`; // zum Teilen\n    const groupLink   = () => \\`https://t.me/\\${BOT}?startgroup=\\${encodeURIComponent("creator_"+state.userId)}\\`; // Gruppe verbinden\n    const linkTelegram = () => \\`https://t.me/\\${BOT}?start=\\${encodeURIComponent("link_creator_"+state.userId)}\\`; // DM-Owner-Connect\n    const stripeRedirect = () => \\`\\${BOT_API}/api/stripe/connect-redirect?creator_id=\\${encodeURIComponent(state.userId)}\\`;\n\n    // Zusätzlich: für Voice einfach DM öffnen (gleich wie linkTelegram)\n    const openSetupVoice = () => window.open(linkTelegram(), "_blank");\n\n    // QR\n    async function drawQR(canvasId, value, tries=10) {\n      try {\n        const c = document.getElementById(canvasId); if (!c) return;\n        const dpr = Math.max(1, window.devicePixelRatio || 1);\n        const size = 140;\n        c.width = size * dpr; c.height = size * dpr;\n        c.style.width = size + "px"; c.style.height = size + "px";\n        if (window.QRCode?.toCanvas) {\n          await window.QRCode.toCanvas(c, value, { margin: 1, scale: dpr });\n          return;\n        }\n        if (tries > 0) setTimeout(()=>drawQR(canvasId, value, tries-1), 120);\n      } catch (err) { console.warn("QR render error:", err); }\n    }\n\n    function updateCustomerLinkTargets() {\n      const s = customerLink();\n      // Bearbeitungssektion (nur Copy + QR)\n      $("customerLinkInput").value = s;\n      drawQR("qrCustomer", s);\n      // Summary (nur Copy + QR)\n      $("customerLinkInputSummary").value = s;\n      drawQR("qrCustomerSummary", s);\n    }\n\n    async function updatePreviews() {\n      updateCustomerLinkTargets();\n      // Stripe-Link\n      const wrap = $("stripeLinkWrap");\n      if (wrap) wrap.href = BOT_API ? stripeRedirect() : "#";\n    }\n\n    // UI Helpers\n    function setHidden(el, hidden) { if (!el) return; el.classList.toggle("hidden", !!hidden); }\n\n    function refreshProgressUI() {\n      // Steps\n      const stepStripe = document.querySelector(\'.progress-step[data-key="stripe"]\');\n      const stepBot    = document.querySelector(\'.progress-step[data-key="bot"]\');\n      const stepGroup  = document.querySelector(\'.progress-step[data-key="group"]\');\n\n      stepStripe?.classList.toggle("done", state.stripeConnected);\n      stepBot?.classList.toggle("done", state.botActive);\n      stepGroup?.classList.toggle("done", state.groupLinked);\n\n      // Summaries: Stripe, Bot (nur wenn Bot+Gruppe fertig), Gruppe\n      setHidden($("stripeSummary"), !state.stripeConnected);\n\n      const botSectionShouldHide = state.botActive && state.groupLinked;\n      setHidden($("botSummary"), !botSectionShouldHide); // nur zeigen, wenn Bot + Gruppe erledigt\n      setHidden($("groupSummary"), !state.groupLinked);\n\n      // Sections einklappen\n      setHidden($("stripeSection"), state.stripeConnected);\n      setHidden($("botSection"), botSectionShouldHide);\n\n      // All done Banner\n      $("setupAllDone").classList.toggle("hidden", !(state.stripeConnected && state.botActive && state.groupLinked));\n    }\n\n    function updateVoiceUI() {\n      const badge = $("voiceStatusBadge");\n      const text  = $("voiceStatusText");\n      if (!badge || !text) return;\n\n      if (state.voiceHas) {\n        badge.textContent = "✅ Voicenachricht gespeichert";\n        text.textContent  = state.voiceUpdatedAt\n          ? \\`Gespeichert am \\${new Date(state.voiceUpdatedAt).toLocaleString()}\\`\n          : "Gespeichert.";\n      } else {\n        badge.textContent = "❌ Keine Voicenachricht hinterlegt";\n        text.textContent  = "Tipp: Öffne den Bot im DM und sende dort /setup_voice – dann nimmst du 5–20 Sekunden auf.";\n      }\n    }\n\n    // Load\n    async function loadCfg() {\n      const { data, error } = await supabase\n        .from("creator_config")\n        .select(\\`\n          \\${fields.join(",")},\n          stripe_account_id,\n          group_chat_id,\n          telegram_id,\n          has_vipbot,\n          voice_enabled,\n          voice_file_id,\n          voice_caption,\n          voice_updated_at\n        \\`)\n        .eq("creator_id", state.userId)\n        .maybeSingle();\n\n      if (error) {\n        console.warn("loadCfg error:", error);\n        $("hint").textContent = "❌ Konnte Daten nicht laden. Bitte später erneut versuchen.";\n      }\n\n      if (data) {\n        // Formular-Felder\n        for (const k of fields) if ($(k)) $(k).value = (data[k] ?? "");\n\n        // Status-Ableitung\n        state.stripeConnected = !!data.stripe_account_id;\n        state.stripeId = data.stripe_account_id || null;\n        state.groupLinked = !!data.group_chat_id;\n        state.botActive = !!(data.telegram_id || data.group_chat_id || data.has_vipbot);\n\n        // Voice\n        state.voiceHas = !!(data.voice_enabled && data.voice_file_id);\n        state.voiceUpdatedAt = data.voice_updated_at || null;\n        state.voiceCaption = data.voice_caption || null;\n\n        $("stripeStatus").textContent = state.stripeConnected\n          ? \\`✅ Stripe verbunden.\\`\n          : "⚠️ Stripe noch nicht verbunden.";\n      } else {\n        // Kein Datensatz -> neutrales UI\n        for (const k of fields) if ($(k)) $(k).value = "";\n        state.stripeConnected = false;\n        state.stripeId = null;\n        state.groupLinked = false;\n        state.botActive = false;\n      }\n\n      await updatePreviews();\n      refreshProgressUI();\n      updateVoiceUI();\n    }\n\n    // Speichern\n    $("saveBtn").addEventListener("click", async () => {\n      const payload = { creator_id: state.userId };\n      for (const k of fields) payload[k] = $(k)?.value ?? null;\n      payload.preis = Number(payload.preis || 0);\n      payload.vip_days = Number(payload.vip_days || 30);\n\n      const { error } = await supabase.from("creator_config").upsert(payload, { onConflict: "creator_id" });\n      $("hint").textContent = error ? "❌ Speichern fehlgeschlagen." : "✅ Gespeichert.";\n      if (!error) toast("Gespeichert");\n    });\n\n    // Reload\n    $("reloadBtn").addEventListener("click", loadCfg);\n\n    // Bearbeiten-Buttons aus den Summaries (Progress hat keine)\n    const showStripeEditor = () => { setHidden($("stripeSection"), false); setHidden($("stripeSummary"), true); };\n    const showBotEditor = () => { setHidden($("botSection"), false); setHidden($("botSummary"), true); setHidden($("groupSummary"), true); };\n\n    ["stripeSummaryEdit"].forEach(id => $(id).addEventListener("click", showStripeEditor));\n    ["botSummaryEdit","groupSummaryEdit"].forEach(id => $(id).addEventListener("click", showBotEditor));\n\n    // Texte einklappen\n    let textsOpen = true;\n    const toggleTexts = () => {\n      textsOpen = !textsOpen;\n      setHidden($("textsBody"), !textsOpen);\n      $("textsChevron").textContent = textsOpen ? "▾" : "▸";\n    };\n    $("toggleTexts").addEventListener("click", toggleTexts);\n\n    // Bot aktivieren (DM)\n    $("linkTelegramBtn").addEventListener("click", () => {\n      if (state.botActive) {\n        const ok = confirm("Der Bot ist bereits aktiv. Möchtest du ihn erneut öffnen/neu verknüpfen?");\n        if (!ok) return;\n      }\n      window.open(linkTelegram(), "_blank");\n      $("hint").textContent = "Telegram öffnen → Bot im DM starten, danach Bot in der Gruppe als Admin hinzufügen.";\n    });\n\n    // Gruppe verbinden\n    $("bindGroupBtn").addEventListener("click", () => {\n      if (state.groupLinked) {\n        const ok = confirm("Es ist bereits eine Gruppe verknüpft. Möchtest du eine andere Gruppe verbinden?");\n        if (!ok) return;\n      }\n      window.open(groupLink(), "_blank");\n      $("hint").textContent = "Telegram → Gruppe auswählen → Bot starten → Admin-Rechte geben.";\n    });\n\n    // Stripe\n    $("stripeBtn").addEventListener("click", (e) => {\n      if (!BOT_API) {\n        e.preventDefault();\n        alert("PUBLIC_BOT_API_BASE fehlt im Frontend.");\n        return;\n      }\n      if (state.stripeConnected) {\n        const ok = confirm("Stripe ist bereits verbunden. Möchtest du das Onboarding erneut öffnen, um die Verbindung zu ändern?");\n        if (!ok) { e.preventDefault(); return; }\n      }\n    });\n\n    // Voice: Im Bot aufnehmen (öffnet DM)\n    $("openSetupVoice").addEventListener("click", () => {\n      openSetupVoice();\n      $("hint").textContent = "Im Telegram-DM /setup_voice senden und die Begrüßung aufnehmen (5–20 Sek.).";\n    });\n\n    // Copy Kunden-Link (Editor & Summary)\n    async function copyToClipboard(val) {\n      try { await navigator.clipboard.writeText(val); toast("Kunden-Link kopiert"); }\n      catch { /* fallback */ }\n    }\n    $("copyCustomerLink").addEventListener("click", () => copyToClipboard($("customerLinkInput")?.value || ""));\n    $("copyCustomerLinkSummary").addEventListener("click", () => copyToClipboard($("customerLinkInputSummary")?.value || ""));\n\n    // QR Download (Editor & Summary)\n    function downloadQR(canvasId, filename) {\n      const c = $(canvasId); if (!c) return;\n      const a = document.createElement("a");\n      a.download = filename;\n      a.href = c.toDataURL("image/png");\n      a.click();\n    }\n    $("downloadQRCustomer").addEventListener("click", () => downloadQR("qrCustomer","luxbase-kundenlink-qr.png"));\n    $("downloadQRCustomerSummary").addEventListener("click", () => downloadQR("qrCustomerSummary","luxbase-kundenlink-qr.png"));\n\n    // Tooltips\n    let activeTipEl = null, hideTimer = null;\n    function showTip(anchorBtn, text) {\n      hideTip();\n      const tip = document.createElement("div");\n      tip.className = "tip tip-enter";\n      tip.textContent = text;\n      document.body.appendChild(tip);\n      requestAnimationFrame(() => tip.classList.add("tip-enter-active"));\n      const rect = anchorBtn.getBoundingClientRect();\n      const margin = 8;\n      const top = rect.bottom + margin + window.scrollY;\n      const left = rect.left + rect.width / 2 - tip.offsetWidth / 2 + window.scrollX;\n      tip.style.top = \\`\\${top}px\\`;\n      tip.style.left = \\`\\${Math.max(12, Math.min(left, window.scrollX + document.documentElement.clientWidth - tip.offsetWidth - 12))}px\\`;\n      activeTipEl = tip;\n      hideTimer = setTimeout(hideTip, 3500);\n    }\n    function hideTip() {\n      if (!activeTipEl) return;\n      activeTipEl.classList.remove("tip-enter", "tip-enter-active");\n      activeTipEl.classList.add("tip-exit");\n      requestAnimationFrame(() => {\n        activeTipEl.classList.add("tip-exit-active");\n        setTimeout(() => { activeTipEl?.remove(); activeTipEl = null; }, 120);\n      });\n      clearTimeout(hideTimer); hideTimer = null;\n    }\n    document.addEventListener("click", (e) => {\n      const btn = e.target.closest("[data-tip]");\n      if (btn) { e.stopPropagation(); showTip(btn, btn.getAttribute("data-tip") || ""); }\n      else hideTip();\n    });\n\n    // Initial laden\n    await loadCfg();\n  </script> '])), maybeRenderHead(), addAttribute(BOT_USERNAME, "data-bot"), addAttribute(BOT_API_BASE, "data-bot-api")) })}`;
}, "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/dashboard/vipbot-einstellungen.astro", void 0);
const $$file = "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/dashboard/vipbot-einstellungen.astro";
const $$url = "/dashboard/vipbot-einstellungen";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$VipbotEinstellungen,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
