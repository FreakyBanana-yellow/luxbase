/* empty css                                       */
import { c as createComponent, d as createAstro, r as renderComponent, a as renderTemplate, m as maybeRenderHead } from '../chunks/astro/server_DDPzIoUP.mjs';
import 'kleur/colors';
import 'html-escaper';
import { $ as $$BaseLayout } from '../chunks/BaseLayout_DlBnAhsg.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro();
const $$Register = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Register;
  Astro2.env.PUBLIC_SUPABASE_URL;
  Astro2.env.PUBLIC_SUPABASE_ANON_KEY;
  return renderTemplate`${renderComponent($$result, "BaseLayout", $$BaseLayout, { "title": "Registrieren \u2013 Luxbase" }, { "default": async ($$result2) => renderTemplate(_a || (_a = __template([" ", '<form id="registerForm" action="#" novalidate class="bg-zinc-900 border border-luxgold rounded-xl p-8 w-full max-w-md mx-auto mt-12 shadow-xl"> <h1 class="text-2xl font-serif font-bold text-center text-luxgold mb-6">\nRegistrieren\n</h1> <input id="name" type="text" placeholder="Dein Name" required class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600"> <input id="email" type="email" placeholder="E-Mail" required class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600"> <select id="role" required class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600"> <option value="creator">Creator / Model</option> <option value="agentur">Agentur</option> </select> <!-- Passwort + Sichtbarkeit --> <div class="relative mb-3"> <input id="password" type="password" placeholder="Passwort" required class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600"> <button type="button" id="togglePw" class="absolute right-2 top-2 text-yellow-400 select-none">\u{1F441}</button> </div> <div class="relative mb-4"> <input id="confirm" type="password" placeholder="Passwort wiederholen" required class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600"> <button type="button" id="toggleConfirm" class="absolute right-2 top-2 text-yellow-400 select-none">\u{1F441}</button> </div> <ul id="pwRules" class="text-sm mb-4 space-y-0.5 leading-tight"> <li id="rLen" class="text-red-400">\u2022 Mind. 8 Zeichen</li> <li id="rUp" class="text-red-400">\u2022 Mind. 1 Gro\xDFbuchstabe</li> <li id="rLow" class="text-red-400">\u2022 Mind. 1 Kleinbuchstabe</li> <li id="rNum" class="text-red-400">\u2022 Mind. 1 Zahl</li> <li id="rMatch" class="text-red-400">\u2022 Passw\xF6rter gleich</li> </ul> <button type="submit" class="w-full bg-luxgold text-luxblack font-bold py-2 rounded hover:bg-yellow-400 transition">\nRegistrieren\n</button> <p id="msg" class="mt-4 text-center text-sm min-h-[1.25rem]"></p> </form>  <script type="module">\n    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";\n\n    // \u2192  Werte werden beim Build injiziert:\n    const supabase = createClient("${supabaseUrl}", "${supabaseKey}");\n\n    const form     = document.getElementById("registerForm");\n    const pw       = document.getElementById("password");\n    const confirm  = document.getElementById("confirm");\n    const msg      = document.getElementById("msg");\n\n    // ---------------- Passwortregeln live pr\xFCfen ----------------\n    const rules = {\n      rLen  : v => v.length >= 8,\n      rUp   : v => /[A-Z]/.test(v),\n      rLow  : v => /[a-z]/.test(v),\n      rNum  : v => /\\\\d/.test(v),\n      rMatch: () => pw.value === confirm.value && pw.value !== ""\n    };\n    function updateRules () {\n      const v = pw.value;\n      for (const [id, fn] of Object.entries(rules)) {\n        const ok = id === "rMatch" ? fn() : fn(v);\n        document.getElementById(id).classList.toggle("text-green-400", ok);\n        document.getElementById(id).classList.toggle("text-red-400",  !ok);\n      }\n      return Object.values(rules).every(fn => (fn.name === "" ? fn() : fn(pw.value)));\n    }\n    pw.addEventListener("input", updateRules);\n    confirm.addEventListener("input", updateRules);\n\n    // --------------- Sichtbarkeit umschalten -------------------\n    document.getElementById("togglePw").onclick      = () => pw.type      = pw.type      === "password" ? "text" : "password";\n    document.getElementById("toggleConfirm").onclick = () => confirm.type = confirm.type === "password" ? "text" : "password";\n\n    // ---------------- Formular absenden ------------------------\n    form.addEventListener("submit", async (e) => {\n      e.preventDefault();\n      msg.textContent = "";\n      msg.className   = "mt-4 text-center text-sm";\n\n      if (!updateRules()) {\n        msg.textContent = "\u274C Passwort erf\xFCllt nicht alle Anforderungen.";\n        msg.classList.add("text-red-400");\n        return;\n      }\n\n      const name  = document.getElementById("name").value.trim();\n      const email = document.getElementById("email").value.trim();\n      const role  = document.getElementById("role").value;\n\n      // 1) User anlegen\n      const { data, error } = await supabase.auth.signUp({ email, password: pw.value });\n      if (error) {\n        msg.textContent = "\u274C " + error.message;\n        msg.classList.add("text-red-400");\n        return;\n      }\n\n      // 2) Profil speichern\n      const userId = data?.user?.id ?? data?.session?.user?.id;\n      const { error: insErr } = await supabase\n        .from("profiles")\n        .insert([{ id: userId, name, role, email }]);\n\n      if (insErr) {\n        msg.textContent = "\u26A0\uFE0F Profil konnte nicht gespeichert werden: " + insErr.message;\n        msg.classList.add("text-red-400");\n        return;\n      }\n\n      msg.textContent = "\u2705 Registrierung erfolgreich \u2013 bitte E-Mail best\xE4tigen.";\n      msg.classList.add("text-green-400");\n      setTimeout(() => (window.location.href = "/dashboard"), 2000);\n    });\n  <\/script> '], [" ", '<form id="registerForm" action="#" novalidate class="bg-zinc-900 border border-luxgold rounded-xl p-8 w-full max-w-md mx-auto mt-12 shadow-xl"> <h1 class="text-2xl font-serif font-bold text-center text-luxgold mb-6">\nRegistrieren\n</h1> <input id="name" type="text" placeholder="Dein Name" required class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600"> <input id="email" type="email" placeholder="E-Mail" required class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600"> <select id="role" required class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600"> <option value="creator">Creator / Model</option> <option value="agentur">Agentur</option> </select> <!-- Passwort + Sichtbarkeit --> <div class="relative mb-3"> <input id="password" type="password" placeholder="Passwort" required class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600"> <button type="button" id="togglePw" class="absolute right-2 top-2 text-yellow-400 select-none">\u{1F441}</button> </div> <div class="relative mb-4"> <input id="confirm" type="password" placeholder="Passwort wiederholen" required class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600"> <button type="button" id="toggleConfirm" class="absolute right-2 top-2 text-yellow-400 select-none">\u{1F441}</button> </div> <ul id="pwRules" class="text-sm mb-4 space-y-0.5 leading-tight"> <li id="rLen" class="text-red-400">\u2022 Mind. 8 Zeichen</li> <li id="rUp" class="text-red-400">\u2022 Mind. 1 Gro\xDFbuchstabe</li> <li id="rLow" class="text-red-400">\u2022 Mind. 1 Kleinbuchstabe</li> <li id="rNum" class="text-red-400">\u2022 Mind. 1 Zahl</li> <li id="rMatch" class="text-red-400">\u2022 Passw\xF6rter gleich</li> </ul> <button type="submit" class="w-full bg-luxgold text-luxblack font-bold py-2 rounded hover:bg-yellow-400 transition">\nRegistrieren\n</button> <p id="msg" class="mt-4 text-center text-sm min-h-[1.25rem]"></p> </form>  <script type="module">\n    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";\n\n    // \u2192  Werte werden beim Build injiziert:\n    const supabase = createClient("\\${supabaseUrl}", "\\${supabaseKey}");\n\n    const form     = document.getElementById("registerForm");\n    const pw       = document.getElementById("password");\n    const confirm  = document.getElementById("confirm");\n    const msg      = document.getElementById("msg");\n\n    // ---------------- Passwortregeln live pr\xFCfen ----------------\n    const rules = {\n      rLen  : v => v.length >= 8,\n      rUp   : v => /[A-Z]/.test(v),\n      rLow  : v => /[a-z]/.test(v),\n      rNum  : v => /\\\\\\\\d/.test(v),\n      rMatch: () => pw.value === confirm.value && pw.value !== ""\n    };\n    function updateRules () {\n      const v = pw.value;\n      for (const [id, fn] of Object.entries(rules)) {\n        const ok = id === "rMatch" ? fn() : fn(v);\n        document.getElementById(id).classList.toggle("text-green-400", ok);\n        document.getElementById(id).classList.toggle("text-red-400",  !ok);\n      }\n      return Object.values(rules).every(fn => (fn.name === "" ? fn() : fn(pw.value)));\n    }\n    pw.addEventListener("input", updateRules);\n    confirm.addEventListener("input", updateRules);\n\n    // --------------- Sichtbarkeit umschalten -------------------\n    document.getElementById("togglePw").onclick      = () => pw.type      = pw.type      === "password" ? "text" : "password";\n    document.getElementById("toggleConfirm").onclick = () => confirm.type = confirm.type === "password" ? "text" : "password";\n\n    // ---------------- Formular absenden ------------------------\n    form.addEventListener("submit", async (e) => {\n      e.preventDefault();\n      msg.textContent = "";\n      msg.className   = "mt-4 text-center text-sm";\n\n      if (!updateRules()) {\n        msg.textContent = "\u274C Passwort erf\xFCllt nicht alle Anforderungen.";\n        msg.classList.add("text-red-400");\n        return;\n      }\n\n      const name  = document.getElementById("name").value.trim();\n      const email = document.getElementById("email").value.trim();\n      const role  = document.getElementById("role").value;\n\n      // 1) User anlegen\n      const { data, error } = await supabase.auth.signUp({ email, password: pw.value });\n      if (error) {\n        msg.textContent = "\u274C " + error.message;\n        msg.classList.add("text-red-400");\n        return;\n      }\n\n      // 2) Profil speichern\n      const userId = data?.user?.id ?? data?.session?.user?.id;\n      const { error: insErr } = await supabase\n        .from("profiles")\n        .insert([{ id: userId, name, role, email }]);\n\n      if (insErr) {\n        msg.textContent = "\u26A0\uFE0F Profil konnte nicht gespeichert werden: " + insErr.message;\n        msg.classList.add("text-red-400");\n        return;\n      }\n\n      msg.textContent = "\u2705 Registrierung erfolgreich \u2013 bitte E-Mail best\xE4tigen.";\n      msg.classList.add("text-green-400");\n      setTimeout(() => (window.location.href = "/dashboard"), 2000);\n    });\n  <\/script> '])), maybeRenderHead()) })}`;
}, "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/register.astro", void 0);

const $$file = "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/register.astro";
const $$url = "/register";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Register,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
