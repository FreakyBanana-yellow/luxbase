/* empty css                                       */
import { c as createComponent, a as renderTemplate, m as maybeRenderHead } from '../chunks/astro/server_CBNIxeik.mjs';
import 'kleur/colors';
import 'html-escaper';
import 'clsx';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Register = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["", '<form id="registerForm" class="bg-black border border-luxgold rounded-xl p-8 w-full max-w-md mx-auto my-12"> <h1 class="text-2xl font-bold text-center text-luxgold mb-6">\nRegistrieren\n</h1> <input id="name" type="text" placeholder="Dein Name" required class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600"> <input id="email" type="email" placeholder="E-Mail" required class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600"> <select id="role" required class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600"> <option value="creator">Creator / Model</option> <option value="agentur">Agentur</option> </select> <div class="relative mb-2"> <input id="password" type="password" placeholder="Passwort" required class="w-full px-4 py-2 pr-10 rounded bg-gray-800 border border-gray-600"> <button type="button" id="togglePw" class="absolute right-2 top-2 text-yellow-400">\n\u{1F441}\n</button> </div> <div class="relative mb-2"> <input id="confirmPassword" type="password" placeholder="Passwort wiederholen" required class="w-full px-4 py-2 pr-10 rounded bg-gray-800 border border-gray-600"> <button type="button" id="toggleConfirm" class="absolute right-2 top-2 text-yellow-400">\n\u{1F441}\n</button> </div> <ul id="passwordCriteria" class="text-sm mb-4"> <li id="len" class="text-red-400">\u2022 Mind. 8 Zeichen</li> <li id="upper" class="text-red-400">\u2022 Mind. 1 Gro\xDFbuchstabe</li> <li id="lower" class="text-red-400">\u2022 Mind. 1 Kleinbuchstabe</li> <li id="num" class="text-red-400">\u2022 Mind. 1 Zahl</li> <li id="match" class="text-red-400">\u2022 Beide Passw\xF6rter m\xFCssen \xFCbereinstimmen</li> </ul> <button type="submit" class="w-full bg-luxgold text-black font-bold py-2 rounded hover:bg-yellow-400 transition">\nRegistrieren\n</button> <p id="error" class="text-red-400 text-sm mt-4 text-center"></p> <p id="success" class="text-green-400 text-sm mt-4 text-center"></p> </form> <script type="module">\n  const pw = document.getElementById("password");\n  const confirm = document.getElementById("confirmPassword");\n  const errorEl = document.getElementById("error");\n  const successEl = document.getElementById("success");\n\n  const criteria = {\n    len:   document.getElementById("len"),\n    upper: document.getElementById("upper"),\n    lower: document.getElementById("lower"),\n    num:   document.getElementById("num"),\n    match: document.getElementById("match"),\n  };\n\n  function validate() {\n    const v = pw.value;\n    const okLen   = v.length >= 8;\n    const okUp    = /[A-Z]/.test(v);\n    const okLow   = /[a-z]/.test(v);\n    const okNum   = /\\d/.test(v);\n    const okMatch = v === confirm.value && v !== "";\n\n    toggle(criteria.len,   okLen);\n    toggle(criteria.upper, okUp);\n    toggle(criteria.lower, okLow);\n    toggle(criteria.num,   okNum);\n    toggle(criteria.match, okMatch);\n\n    return okLen && okUp && okLow && okNum && okMatch;\n  }\n\n  function toggle(el, state) {\n    el.classList.toggle("text-green-400", state);\n    el.classList.toggle("text-red-400", !state);\n  }\n\n  pw.addEventListener("input", validate);\n  confirm.addEventListener("input", validate);\n\n  document.getElementById("togglePw").onclick = () => {\n    pw.type = pw.type === "password" ? "text" : "password";\n  };\n\n  document.getElementById("toggleConfirm").onclick = () => {\n    confirm.type = confirm.type === "password" ? "text" : "password";\n  };\n\n  document.getElementById("registerForm").onsubmit = async (e) => {\n    e.preventDefault();\n    errorEl.textContent = "";\n    successEl.textContent = "";\n\n    if (!validate()) {\n      errorEl.textContent = "Passwort erf\xFCllt nicht alle Anforderungen.";\n      return;\n    }\n\n    const name  = document.getElementById("name").value.trim();\n    const email = document.getElementById("email").value.trim();\n    const role  = document.getElementById("role").value;\n\n    const { error } = await window.supabase.auth.signUp({\n      email,\n      password: pw.value,\n      options: {\n        data: { name, role }\n      }\n    });\n\n    if (error) {\n      errorEl.textContent = error.message;\n    } else {\n      successEl.textContent = "Registrierung erfolgreich. Bitte E\u2011Mail best\xE4tigen \u2026";\n      setTimeout(() => (window.location.href = "/dashboard"), 1800);\n    }\n  };\n<\/script>'], ["", '<form id="registerForm" class="bg-black border border-luxgold rounded-xl p-8 w-full max-w-md mx-auto my-12"> <h1 class="text-2xl font-bold text-center text-luxgold mb-6">\nRegistrieren\n</h1> <input id="name" type="text" placeholder="Dein Name" required class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600"> <input id="email" type="email" placeholder="E-Mail" required class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600"> <select id="role" required class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600"> <option value="creator">Creator / Model</option> <option value="agentur">Agentur</option> </select> <div class="relative mb-2"> <input id="password" type="password" placeholder="Passwort" required class="w-full px-4 py-2 pr-10 rounded bg-gray-800 border border-gray-600"> <button type="button" id="togglePw" class="absolute right-2 top-2 text-yellow-400">\n\u{1F441}\n</button> </div> <div class="relative mb-2"> <input id="confirmPassword" type="password" placeholder="Passwort wiederholen" required class="w-full px-4 py-2 pr-10 rounded bg-gray-800 border border-gray-600"> <button type="button" id="toggleConfirm" class="absolute right-2 top-2 text-yellow-400">\n\u{1F441}\n</button> </div> <ul id="passwordCriteria" class="text-sm mb-4"> <li id="len" class="text-red-400">\u2022 Mind. 8 Zeichen</li> <li id="upper" class="text-red-400">\u2022 Mind. 1 Gro\xDFbuchstabe</li> <li id="lower" class="text-red-400">\u2022 Mind. 1 Kleinbuchstabe</li> <li id="num" class="text-red-400">\u2022 Mind. 1 Zahl</li> <li id="match" class="text-red-400">\u2022 Beide Passw\xF6rter m\xFCssen \xFCbereinstimmen</li> </ul> <button type="submit" class="w-full bg-luxgold text-black font-bold py-2 rounded hover:bg-yellow-400 transition">\nRegistrieren\n</button> <p id="error" class="text-red-400 text-sm mt-4 text-center"></p> <p id="success" class="text-green-400 text-sm mt-4 text-center"></p> </form> <script type="module">\n  const pw = document.getElementById("password");\n  const confirm = document.getElementById("confirmPassword");\n  const errorEl = document.getElementById("error");\n  const successEl = document.getElementById("success");\n\n  const criteria = {\n    len:   document.getElementById("len"),\n    upper: document.getElementById("upper"),\n    lower: document.getElementById("lower"),\n    num:   document.getElementById("num"),\n    match: document.getElementById("match"),\n  };\n\n  function validate() {\n    const v = pw.value;\n    const okLen   = v.length >= 8;\n    const okUp    = /[A-Z]/.test(v);\n    const okLow   = /[a-z]/.test(v);\n    const okNum   = /\\\\d/.test(v);\n    const okMatch = v === confirm.value && v !== "";\n\n    toggle(criteria.len,   okLen);\n    toggle(criteria.upper, okUp);\n    toggle(criteria.lower, okLow);\n    toggle(criteria.num,   okNum);\n    toggle(criteria.match, okMatch);\n\n    return okLen && okUp && okLow && okNum && okMatch;\n  }\n\n  function toggle(el, state) {\n    el.classList.toggle("text-green-400", state);\n    el.classList.toggle("text-red-400", !state);\n  }\n\n  pw.addEventListener("input", validate);\n  confirm.addEventListener("input", validate);\n\n  document.getElementById("togglePw").onclick = () => {\n    pw.type = pw.type === "password" ? "text" : "password";\n  };\n\n  document.getElementById("toggleConfirm").onclick = () => {\n    confirm.type = confirm.type === "password" ? "text" : "password";\n  };\n\n  document.getElementById("registerForm").onsubmit = async (e) => {\n    e.preventDefault();\n    errorEl.textContent = "";\n    successEl.textContent = "";\n\n    if (!validate()) {\n      errorEl.textContent = "Passwort erf\xFCllt nicht alle Anforderungen.";\n      return;\n    }\n\n    const name  = document.getElementById("name").value.trim();\n    const email = document.getElementById("email").value.trim();\n    const role  = document.getElementById("role").value;\n\n    const { error } = await window.supabase.auth.signUp({\n      email,\n      password: pw.value,\n      options: {\n        data: { name, role }\n      }\n    });\n\n    if (error) {\n      errorEl.textContent = error.message;\n    } else {\n      successEl.textContent = "Registrierung erfolgreich. Bitte E\u2011Mail best\xE4tigen \u2026";\n      setTimeout(() => (window.location.href = "/dashboard"), 1800);\n    }\n  };\n<\/script>'])), maybeRenderHead());
}, "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/register.astro", void 0);

const $$file = "C:/Users/Anwender/Downloads/luxbase-starter/src/pages/register.astro";
const $$url = "/register";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Register,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
