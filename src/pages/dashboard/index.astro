---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
---

<DashboardLayout title="Dein Luxbase Dashboard">
  <section class="max-w-6xl mx-auto px-4 py-6 space-y-6" id="dashboardRoot">

    <!-- Header / Kontext -->
    <header class="space-y-2">
      <h1 class="text-lg sm:text-xl font-semibold text-white">Übersicht deiner VIP-Performance</h1>
      <p class="text-sm text-white/70">
        Hier siehst du Umsatz, aktive VIPs und Neuabschlüsse für den ausgewählten Zeitraum.
        Optional kannst du die <b>Vorperiode</b> zum Vergleich einblenden.
      </p>
      <p id="dataStamp" class="text-[12px] text-white/50">–</p>
    </header>

    <!-- Controls: Range + Compare -->
    <div class="flex flex-wrap items-center justify-between gap-3">
      <div class="flex gap-1 sm:gap-2" id="rangeControls">
        <button data-range="7"  class="range-btn">7T</button>
        <button data-range="30" class="range-btn is-active">30T</button>
        <button data-range="90" class="range-btn">90T</button>
      </div>
      <label class="inline-flex items-center gap-2 text-xs sm:text-[13px] text-white/70">
        <input type="checkbox" id="compareToggle" class="accent-[#f6c453] w-4 h-4">
        Vorperiode vergleichen
      </label>
    </div>

    <!-- KPI Cards -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
      <!-- Umsatz -->
      <article class="kpi-card">
        <h3 class="kpi-title">Umsatz (<span id="labelRange1">30</span> Tage)</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiRevenue">–</p>
          <span class="kpi-delta" id="kpiRevenueDelta"></span>
        </div>
        <p class="kpi-note" id="kpiRevenueNote"></p>
        <div class="kpi-spark"><canvas id="sparkRevenue"></canvas></div>
      </article>

      <!-- Aktive VIPs -->
      <article class="kpi-card">
        <h3 class="kpi-title">Aktive VIPs</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiActive">–</p>
          <span class="kpi-delta" id="kpiActiveDelta"></span>
        </div>
        <p class="kpi-note" id="kpiActiveNote"></p>
        <div class="kpi-spark"><canvas id="sparkActive"></canvas></div>
      </article>

      <!-- Neue VIPs -->
      <article class="kpi-card">
        <h3 class="kpi-title">Neue VIPs (<span id="labelRange2">30</span> Tage)</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiNew">–</p>
          <span class="kpi-delta" id="kpiNewDelta"></span>
        </div>
        <p class="kpi-note" id="kpiNewNote"></p>
        <div class="kpi-spark"><canvas id="sparkNew"></canvas></div>
      </article>

      <!-- Conversion Demo -->
      <article class="kpi-card">
        <h3 class="kpi-title">Conversion (Demo)</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiConv">–</p>
        </div>
        <p class="kpi-note">Platzhalter – an Datenquelle anbindbar</p>
        <div class="kpi-spark opacity-30"><canvas></canvas></div>
      </article>
    </div>

    <!-- Charts: Mobile Swipe-Carousel / Desktop Grid -->
    <div class="charts-wrap overflow-x-auto snap-x snap-mandatory flex gap-4 pb-2 -mx-4 px-4 md:grid md:grid-cols-2 md:overflow-visible md:snap-none md:mx-0 md:px-0">
      <article class="chart-card min-w-[88%] snap-start">
        <header class="chart-header">
          <h3 class="chart-title">Umsatzverlauf</h3>
          <span class="chart-meta" id="revMeta">–</span>
        </header>
        <div class="h-60 sm:h-[260px]"><canvas id="revChart"></canvas></div>
      </article>

      <article class="chart-card min-w-[88%] snap-start">
        <header class="chart-header">
          <h3 class="chart-title">Neue VIPs / Tag</h3>
          <span class="chart-meta" id="vipMeta">–</span>
        </header>
        <div class="h-60 sm:h-[260px]"><canvas id="vipChart"></canvas></div>
      </article>
    </div>

    <!-- Sichtbarer Debug-Output -->
    <pre id="debugBox" class="bg-black/40 border border-luxgray/50 rounded-xl p-3 text-xs text-white/70 overflow-auto"></pre>
  </section>

  <style is:global>
    .kpi-card{background:rgba(0,0,0,.6);border:1px solid var(--luxgray,#2a2a2a);border-radius:1rem;padding:1rem}
    .kpi-title{font-size:.75rem;color:rgba(255,255,255,.6);margin-bottom:.25rem}
    .kpi-value{font-size:1.6rem;font-weight:700;color:#f6c453}
    .kpi-note{font-size:11px;color:rgba(255,255,255,.55)}
    .kpi-delta{font-size:.8rem}
    .kpi-delta.up{color:#7ee787}
    .kpi-delta.down{color:#ff6b6b}
    .kpi-spark{height:32px;margin-top:.35rem}

    .range-btn{border:1px solid var(--luxgray,#2a2a2a);border-radius:.6rem;padding:.45rem .7rem;font-size:.85rem;color:#fff;background:transparent}
    .range-btn.is-active{border-color:rgba(246,196,83,.5);background:rgba(246,196,83,.08);color:#f6c453}

    .chart-card{background:rgba(0,0,0,.6);border:1px solid var(--luxgray,#2a2a2a);border-radius:1rem;padding:1rem}
    .chart-header{display:flex;align-items:center;justify-content:space-between;margin-bottom:.25rem}
    .chart-title{font-size:.9rem;font-weight:600;color:#f6c453}
    .chart-meta{font-size:11px;color:rgba(255,255,255,.6)}
    .charts-wrap::-webkit-scrollbar{display:none}
  </style>

  <script type="module">
  // -------- Helper Debug ----------
  const dbg = (...args) => {
    const parts = [];
    for (const a of args) { try { parts.push(typeof a === "string" ? a : JSON.stringify(a, null, 2)); } catch { parts.push(String(a)); } }
    const msg = parts.join(" ");
    console.log(...args);
    const box = document.getElementById("debugBox"); if (box) box.textContent += msg + "\\n";
  };

  try {
    // ENV check
    const meta = document.getElementById("supabase-config");
    if (!meta?.dataset?.url || !meta?.dataset?.key) { dbg("❌ Supabase ENV fehlt:", { url: meta?.dataset?.url, keySet: !!meta?.dataset?.key }); throw new Error("Supabase ENV fehlt"); }

    // Libraries
    const [{ createClient }] = await Promise.all([
      import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm"),
      import("https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"),
    ]);
    const Chart = window.Chart;

    // Supabase client
    const supabase = createClient(meta.dataset.url, meta.dataset.key);

    // DOM shorthands
    const el = (id) => document.getElementById(id);
    const qsA = (sel) => Array.from(document.querySelectorAll(sel));
    const fmtEUR = (n) => (typeof n === "number" ? n : Number(n || 0)).toLocaleString("de-DE",{style:"currency",currency:"EUR",maximumFractionDigits:0});

    // Date helpers
    const now = new Date();
    const toISO = (d) => new Date(d).toISOString().slice(0,10);
    const daysAgo = (d) => new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()-d));
    function labelsLastNDays(n){const arr=[];for(let i=n-1;i>=0;i--){arr.push(toISO(daysAgo(i)));}return arr;}
    const stamp = new Intl.DateTimeFormat('de-DE',{dateStyle:'medium', timeStyle:'short'}).format(new Date());
    el("dataStamp").textContent = `Datenstand: ${stamp}`;

    // Auth
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) { dbg("❌ Kein User – redirect /"); window.location.href = "/"; throw new Error("redirect"); }

    // Config
    const { data: cfg } = await supabase
      .from("creator_config")
      .select("preis, vip_dauer")
      .eq("creator_id", user.id)
      .maybeSingle();

    const preis = Number(cfg?.preis || 0);
    const vipDauer = Number(cfg?.vip_dauer || 30);

    // VIPs
    const { data: vipData } = await supabase
      .from("vip_users")
      .select("letzter_kontakt, vip_bis, status")
      .eq("creator_id", user.id);

    let vipRows = vipData || [];

    // Demo fallback
    if (!vipRows.length) {
      const base = new Date();
      const mk = (offset, days=vipDauer) => ({
        letzter_kontakt: new Date(base.getTime()-offset*86400000).toISOString(),
        vip_bis:         new Date(base.getTime()+(days-offset)*86400000).toISOString(),
        status: "active",
      });
      vipRows = [mk(1), mk(2), mk(5), mk(7), mk(8), mk(10), mk(15)];
      el("kpiRevenueNote").textContent = "Basierend auf Preis × neue VIPs";
      el("kpiActiveNote").textContent  = "Demo-Daten";
      el("kpiNewNote").textContent     = "Demo-Daten";
    }

    // ---------- Aggregation & Rendering ----------
    let RANGE = 30; // default
    const compareToggle = el("compareToggle");

    let revChart, vipChart, sparkRev, sparkActive, sparkNew;

    function destroyChart(c){ if(c && typeof c.destroy==="function"){ c.destroy(); } }

    function computeSeries(rangeDays){
      const labels = labelsLastNDays(rangeDays);
      const mapNew = Object.fromEntries(labels.map(d=>[d,0]));
      vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNew[d]!==undefined) mapNew[d]+=1;});
      const newVipSeries = labels.map(d=>mapNew[d]);

      const revenueByDay = labels.map((_,i)=> (preis>0 ? newVipSeries[i]*preis : 0));

      // aktive VIPs je Tag := VIPs mit vip_bis >= Datum
      const activeEachDay = labels.map(d=>{
        const count = vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= d).length;
        return count;
      });

      // Totals
      const revenueTotal = revenueByDay.reduce((a,b)=>a+b,0);
      const activeToday  = activeEachDay.at(-1) || 0;
      const newTotal     = newVipSeries.reduce((a,b)=>a+b,0);

      return { labels, newVipSeries, revenueByDay, activeEachDay, totals:{ revenueTotal, activeToday, newTotal } };
    }

    function computePrevSeries(rangeDays){
      // Vorperiode: gleicher Zeitraum direkt davor
      const endPrev = daysAgo(rangeDays);
      const labelsPrev = [];
      for(let i=rangeDays-1;i>=0;i--){ labelsPrev.push(toISO(new Date(endPrev.getTime()-i*86400000))); }
      const mapNewPrev = Object.fromEntries(labelsPrev.map(d=>[d,0]));
      vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNewPrev[d]!==undefined) mapNewPrev[d]+=1;});
      const newVipPrev = labelsPrev.map(d=>mapNewPrev[d]);
      const revPrevByDay = labelsPrev.map((_,i)=> (preis>0 ? newVipPrev[i]*preis : 0));
      const activePrevEnd = vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= labelsPrev.at(-1)).length;
      return {
        newVipPrev, revPrevByDay,
        totals:{ revenueTotal: revPrevByDay.reduce((a,b)=>a+b,0), activeToday: activePrevEnd, newTotal: newVipPrev.reduce((a,b)=>a+b,0) }
      };
    }

    function delta(elm, curr, prev){
      elm.textContent = "";
      elm.classList.remove("up","down");
      if (!compareToggle.checked) return;
      const d = prev>0 ? (curr-prev)/prev : (curr>0 ? 1 : 0);
      const txt = (d>=0?"+":"")+ (Math.abs(d)*100).toFixed(1) + "% " + (d>0?"↗︎":"↘︎");
      elm.textContent = txt;
      if (d>0) elm.classList.add("up"); else if (d<0) elm.classList.add("down");
    }

    // Sparklines
    function renderSpark(canvas, data, color="#f6c453"){
      const ctx = canvas.getContext("2d");
      return new Chart(ctx,{
        type:"line",
        data:{ labels:data.map((_,i)=>i), datasets:[{ data, borderColor:color, pointRadius:0, tension:.35, borderWidth:2 }]},
        options:{ responsive:true, maintainAspectRatio:false, plugins:{legend:{display:false},tooltip:{enabled:false}}, scales:{x:{display:false},y:{display:false}} }
      });
    }

    function renderKPIs(series, prevTotals){
      // Labels
      el("labelRange1").textContent = String(RANGE);
      el("labelRange2").textContent = String(RANGE);

      // Totals
      el("kpiRevenue").textContent = fmtEUR(series.totals.revenueTotal);
      el("kpiActive").textContent  = String(series.totals.activeToday);
      el("kpiNew").textContent     = String(series.totals.newTotal);

      // Deltas (wenn Compare an)
      delta(el("kpiRevenueDelta"), series.totals.revenueTotal, prevTotals?.revenueTotal ?? 0);
      delta(el("kpiActiveDelta"),  series.totals.activeToday,  prevTotals?.activeToday ?? 0);
      delta(el("kpiNewDelta"),     series.totals.newTotal,     prevTotals?.newTotal ?? 0);

      // Notes
      el("kpiRevenueNote").textContent = preis>0 ? "Basierend auf Preis × neue VIPs" : "Kein Preis in creator_config";
      el("kpiNewNote").textContent     = `Zeitraum: ${series.labels[0]} – ${series.labels.at(-1)}`;

      // Sparklines
      if (sparkRev) sparkRev.destroy(); if (sparkActive) sparkActive.destroy(); if (sparkNew) sparkNew.destroy();
      sparkRev    = renderSpark(document.getElementById("sparkRevenue"), series.revenueByDay);
      sparkActive = renderSpark(document.getElementById("sparkActive"),  series.activeEachDay);
      sparkNew    = renderSpark(document.getElementById("sparkNew"),     series.newVipSeries);
    }

    function renderCharts(series, prevSeries){
      // Meta
      el("revMeta").textContent = `${series.labels[0]} – ${series.labels.at(-1)}`;
      el("vipMeta").textContent = el("revMeta").textContent;

      // Destroy old
      if (revChart) revChart.destroy();
      if (vipChart) vipChart.destroy();

      // Revenue gradient
      const revCtx = document.getElementById("revChart").getContext("2d");
      const grad = revCtx.createLinearGradient(0,0,0,revCtx.canvas.height);
      grad.addColorStop(0,"rgba(246,196,83,0.35)");
      grad.addColorStop(1,"rgba(246,196,83,0.03)");

      const revDatasets = [{
        label: "Umsatz", data: series.revenueByDay, fill:true,
        backgroundColor: grad, borderColor:"#f6c453", tension:.35, pointRadius:0, borderWidth:2
      }];
      if (compareToggle.checked && prevSeries){
        revDatasets.push({
          label:"Vorperiode", data: prevSeries.revPrevByDay, fill:false,
          borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], tension:.35, pointRadius:0, borderWidth:1.5
        });
      }

      revChart = new Chart(revCtx,{
        type: "line",
        data: { labels: series.labels, datasets: revDatasets },
        options: {
          responsive:true, maintainAspectRatio:false,
          plugins:{ legend:{display:false}, tooltip:{ callbacks:{ label:(ctx)=>fmtEUR(ctx.parsed.y) } } },
          scales:{
            x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},
            y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)", callback:(v)=>fmtEUR(v), maxTicksLimit:5 }, beginAtZero:true }
          }
        }
      });

      const vipCtx = document.getElementById("vipChart").getContext("2d");
      const vipDatasets = [{
        label:"Neue VIPs", data: series.newVipSeries, borderRadius:6, borderSkipped:false,
        backgroundColor:"rgba(246,196,83,.85)"
      }];
      if (compareToggle.checked && prevSeries){
        vipDatasets.push({
          label:"Vorperiode", type:"line", data: prevSeries.newVipPrev,
          borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], pointRadius:0, tension:.35, fill:false
        });
      }

      vipChart = new Chart(vipCtx,{
        type:"bar",
        data:{ labels: series.labels, datasets: vipDatasets },
        options:{
          responsive:true, maintainAspectRatio:false, plugins:{ legend:{display:false} },
          scales:{
            x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},
            y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)" }, beginAtZero:true }
          }
        }
      });
    }

    // Initial render
    function rerender(){
      const series = computeSeries(RANGE);
      const prev   = compareToggle.checked ? computePrevSeries(RANGE) : null;
      renderKPIs(series, prev?.totals);
      renderCharts(series, prev);
    }

    // Range events
    qsA(".range-btn").forEach(btn=>{
      btn.addEventListener("click", ()=>{
        qsA(".range-btn").forEach(b=>b.classList.remove("is-active"));
        btn.classList.add("is-active");
        RANGE = Number(btn.dataset.range || 30);
        rerender();
      });
    });
    compareToggle.addEventListener("change", rerender);

    // Kick
    rerender();

  } catch (e) {
    dbg("❌ Render error:", e?.message || e);
  }
  </script>
</DashboardLayout>
