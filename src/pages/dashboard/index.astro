---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
---

<DashboardLayout title="Dein Luxbase Dashboard">
  <section class="max-w-6xl mx-auto px-4 py-6 space-y-6" id="dashboardRoot">
    <!-- KPI Cards -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Umsatz (30 Tage)</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiRevenue">–</p>
        <p class="text-[11px] text-white/50" id="kpiRevenueNote"></p>
      </article>
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Aktive VIPs</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiActive">–</p>
        <p class="text-[11px] text-white/50" id="kpiActiveNote"></p>
      </article>
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Neue VIPs (7 Tage)</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiNew">–</p>
        <p class="text-[11px] text-white/50" id="kpiNewNote"></p>
      </article>
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Conversion (Demo)</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiConv">–</p>
        <p class="text-[11px] text-white/50">Platzhalter – an Datenquelle anbindbar</p>
      </article>
    </div>

    <!-- Charts -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <header class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-semibold text-luxgold">Umsatzverlauf (30 Tage)</h3>
          <span class="text-[11px] text-white/50" id="revMeta">–</span>
        </header>
        <canvas id="revChart" class="w-full h-48"></canvas>
      </article>

      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <header class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-semibold text-luxgold">Neue VIPs / Tag</h3>
          <span class="text-[11px] text-white/50" id="vipMeta">–</span>
        </header>
        <canvas id="vipChart" class="w-full h-48"></canvas>
      </article>
    </div>
  </section>

  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";
    import { Chart, registerables } from "https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.esm.js";
    Chart.register(...registerables);

    const meta = document.getElementById("supabase-config");
    const supabase = createClient(meta.dataset.url, meta.dataset.key);

    const el = (id) => document.getElementById(id);
    const fmt€ = (n) => (typeof n === "number" ? n : Number(n || 0))
      .toLocaleString("de-DE", { style: "currency", currency: "EUR", maximumFractionDigits: 0 });

    // Helpers
    const today = new Date();
    const daysAgo = (d) => new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate() - d));
    function labelsLastNDays(n=30) {
      const arr = [];
      for (let i = n - 1; i >= 0; i--) {
        const dt = daysAgo(i);
        arr.push(dt.toISOString().slice(0,10));
      }
      return arr;
    }

    // Auth
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) { window.location.href = "/"; throw new Error("not-auth"); }

    // Creator-Preis / Dauer
    const { data: cfg, error: cfgErr } = await supabase
      .from("creator_config")
      .select("preis, vip_dauer")
      .eq("creator_id", user.id)
      .maybeSingle();
    if (cfgErr) console.warn("creator_config error:", cfgErr);

    const preis = Number(cfg?.preis || 0);
    const vipDauer = Number(cfg?.vip_dauer || 30);

    // VIP-Daten
    let vipRows = [];
    const { data: vipData, error: vipErr } = await supabase
      .from("vip_user")
      .select("letzter_kontakt, vip_bis, status")
      .eq("creator_id", user.id);
    if (vipErr) {
      console.warn("vip_user error:", vipErr);
    }
    vipRows = vipData || [];

    // Fallback-Demo
    if (!vipRows.length) {
      const base = new Date();
      const mk = (offset, days=vipDauer) => ({
        created_at: new Date(base.getTime() - offset*86400000).toISOString(),
        VIP_bis: new Date(base.getTime() + (days-offset)*86400000).toISOString(),
        Status: "active",
      });
      vipRows = [mk(1), mk(2), mk(2), mk(5), mk(7), mk(8), mk(9), mk(10), mk(12), mk(15), mk(20), mk(21), mk(25)];
      el("kpiRevenueNote").textContent = "Demo‑Schätzung (keine echten Transaktionen gefunden oder keine Leserechte)";
      el("kpiActiveNote").textContent = "Demo‑Daten";
      el("kpiNewNote").textContent = "Demo‑Daten";
    }

    // Aggregation
    const labels = labelsLastNDays(30);

    const newVipByDay = Object.fromEntries(labels.map(d => [d, 0]));
   vipRows.forEach(r => {
  const d = (r.letzter_kontakt || "").slice(0,10);
  if (newVipByDay[d] !== undefined) newVipByDay[d] += 1;
});
    const newVipSeries = labels.map(d => newVipByDay[d]);

    const revenueByDay = labels.map((_, i) => (preis > 0 ? newVipSeries[i] * preis : 0));
    const revenue30 = revenueByDay.reduce((a,b) => a + b, 0);

    const todayISO = new Date().toISOString().slice(0,10);
    const active = vipRows.filter(r => (r.VIP_bis || "").slice(0,10) >= todayISO).length;

    const last7 = labels.slice(-7);
    const new7 = last7.reduce((sum, d) => sum + (newVipByDay[d] || 0), 0);

    // KPIs
    el("kpiRevenue").textContent = fmt€(revenue30);
    el("kpiActive").textContent = String(active);
    el("kpiNew").textContent = String(new7);
    el("revMeta").textContent = preis > 0 ? `Basis: Preis ${fmt€(preis)} × neue VIPs` : "Kein Preis in creator_config";
    el("vipMeta").textContent = `Zeitraum: ${labels[0]} – ${labels[labels.length-1]}`;

    // Charts
    const grid = { color: "rgba(255,255,255,0.08)", borderColor: "rgba(255,255,255,0.08)" };
    const tick = { color: "rgba(255,255,255,0.6)", font: { size: 10 } };

    new Chart(el("revChart"), {
      type: "line",
      data: { labels, datasets: [{ label: "Umsatz", data: revenueByDay, tension: 0.35, borderWidth: 2, pointRadius: 0 }] },
      options: {
        responsive: true, maintainAspectRatio: false,
        plugins: { legend: { display: false }, tooltip: { callbacks: { label: (ctx) => fmt€(ctx.parsed.y) } } },
        scales: { x: { grid, ticks: { ...tick, maxTicksLimit: 6 } }, y: { grid, ticks: { ...tick, callback: (v) => fmt€(v) } } },
      },
    });

    new Chart(el("vipChart"), {
      type: "bar",
      data: { labels, datasets: [{ label: "Neue VIPs", data: newVipSeries, borderWidth: 0 }] },
      options: {
        responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } },
        scales: { x: { grid, ticks: { ...tick, maxTicksLimit: 6 } }, y: { grid, ticks: tick, beginAtZero: true, precision: 0 } },
      },
    });

    const conv = (new7 / Math.max(active, 1)) * 100;
    el("kpiConv").textContent = isFinite(conv) ? conv.toFixed(1) + "%" : "–";
  </script>
</DashboardLayout>
