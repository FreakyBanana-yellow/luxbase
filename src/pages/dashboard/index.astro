---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
---

<DashboardLayout title="Dein Luxbase Dashboard">
  <section class="max-w-6xl mx-auto px-4 py-6 space-y-6" id="dashboardRoot">

    <!-- Header / Kontext -->
    <header class="space-y-2">
      <h1 class="text-lg sm:text-xl font-semibold text-white">Übersicht deiner VIP-Performance</h1>
      <p class="text-sm text-white/70">
        Hier siehst du Umsatz, aktive VIPs und Neuabschlüsse für den ausgewählten Zeitraum.
        Optional kannst du die <b>Vorperiode</b> zum Vergleich einblenden. Unten kannst du
        die Daten als CSV exportieren – inkl. USt-Spalten und SKR-Konten.
      </p>
      <p id="dataStamp" class="text-[12px] text-white/50">–</p>
    </header>

    <!-- Controls: Range + Compare + Demo -->
    <div class="flex flex-wrap items-center justify-between gap-3">
      <div class="flex gap-1 sm:gap-2" id="rangeControls">
        <button data-range="7"  class="range-btn">7T</button>
        <button data-range="30" class="range-btn is-active">30T</button>
        <button data-range="90" class="range-btn">90T</button>
      </div>
      <div class="flex items-center gap-2">
        <label class="inline-flex items-center gap-2 text-xs sm:text-[13px] text-white/70">
          <input type="checkbox" id="compareToggle" class="accent-[#f6c453] w-4 h-4">
          Vorperiode vergleichen
        </label>
        <button id="demoToggle" type="button" class="demo-btn">Demo: AUS</button>
      </div>
    </div>

    <!-- KPI Cards -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
      <!-- Umsatz -->
      <article class="kpi-card">
        <h3 class="kpi-title">Umsatz (<span id="labelRange1">30</span> Tage)</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiRevenue">–</p>
          <span class="kpi-delta" id="kpiRevenueDelta"></span>
        </div>
        <p class="kpi-note" id="kpiRevenueNote"></p>
        <div class="kpi-spark"><canvas id="sparkRevenue"></canvas></div>
      </article>

      <!-- Aktive VIPs -->
      <article class="kpi-card">
        <h3 class="kpi-title">Aktive VIPs</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiActive">–</p>
          <span class="kpi-delta" id="kpiActiveDelta"></span>
        </div>
        <p class="kpi-note" id="kpiActiveNote"></p>
        <div class="kpi-spark"><canvas id="sparkActive"></canvas></div>
      </article>

      <!-- Neue VIPs -->
      <article class="kpi-card">
        <h3 class="kpi-title">Neue VIPs (<span id="labelRange2">30</span> Tage)</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiNew">–</p>
          <span class="kpi-delta" id="kpiNewDelta"></span>
        </div>
        <p class="kpi-note" id="kpiNewNote"></p>
        <div class="kpi-spark"><canvas id="sparkNew"></canvas></div>
      </article>

      <!-- Conversion Demo -->
      <article class="kpi-card">
        <h3 class="kpi-title">Conversion (Demo)</h3>
        <div class="flex items-baseline gap-2">
          <p class="kpi-value" id="kpiConv">–</p>
        </div>
        <p class="kpi-note">Platzhalter – an Datenquelle anbindbar</p>
        <div class="kpi-spark opacity-30"><canvas></canvas></div>
      </article>
    </div>

    <!-- Charts -->
    <div class="charts-wrap overflow-x-auto snap-x snap-mandatory flex gap-4 pb-2 -mx-4 px-4 md:grid md:grid-cols-2 md:overflow-visible md:snap-none md:mx-0 md:px-0">
      <article class="chart-card min-w-[88%] snap-start">
        <header class="chart-header">
          <h3 class="chart-title">Umsatzverlauf</h3>
          <span class="chart-meta" id="revMeta">–</span>
        </header>
        <div class="h-60 sm:h-[260px]"><canvas id="revChart"></canvas></div>
      </article>

      <article class="chart-card min-w-[88%] snap-start">
        <header class="chart-header">
          <h3 class="chart-title">Neue VIPs / Tag</h3>
          <span class="chart-meta" id="vipMeta">–</span>
        </header>
        <div class="h-60 sm:h-[260px]"><canvas id="vipChart"></canvas></div>
      </article>

      <!-- ✅ Heatmap -->
      <article class="chart-card min-w-[88%] snap-start">
        <header class="chart-header">
          <h3 class="chart-title">Heatmap: Aktivität (Beitritte)</h3>
          <span class="chart-meta" id="heatMeta">–</span>
        </header>
        <div class="h-60 sm:h-[260px]"><canvas id="heatmapChart"></canvas></div>
      </article>
    </div>

    <!-- 🔥 Highlights: Top- & Flop-Tag + optionaler KI-Tipp -->
    <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-3">
      <div class="flex items-center justify-between gap-3">
        <h3 class="text-sm font-semibold text-luxgold">Highlights: Top- & Flop-Tag</h3>
        <button id="tfToggleTip" class="border border-luxgray rounded-xl px-3 py-1.5 text-xs">💡 Tipp anzeigen</button>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-3 gap-3 items-center">
        <div class="rounded-xl border border-white/5 bg-black/40 p-3">
          <div class="text-[11px] text-white/60">Top-Tag</div>
          <div class="mt-1 text-sm text-white/80"><span id="tfTopDate">–</span></div>
          <div class="mt-1 text-lg font-semibold text-luxgold"><span id="tfTopValue">–</span></div>
          <div class="mt-1 text-[12px]"><span id="tfTopDelta" class="px-1.5 py-0.5 rounded-md"></span></div>
        </div>

        <div class="rounded-xl border border-white/5 bg-black/40 p-3">
          <div class="text-[11px] text-white/60">Flop-Tag</div>
          <div class="mt-1 text-sm text-white/80"><span id="tfFlopDate">–</span></div>
          <div class="mt-1 text-lg font-semibold text-white/80"><span id="tfFlopValue">–</span></div>
          <div class="mt-1 text-[12px]"><span id="tfFlopDelta" class="px-1.5 py-0.5 rounded-md"></span></div>
        </div>

        <div class="rounded-xl border border-white/5 bg-black/40 p-3">
          <div class="text-[11px] text-white/60">Durchschnitt / Tag</div>
          <div class="mt-1 text-sm text-white/80"><span id="tfAvgDate">im Zeitraum</span></div>
          <div class="mt-1 text-lg font-semibold text-white/90"><span id="tfAvgValue">–</span></div>
        </div>
      </div>

      <div id="tfTipWrap" class="hidden rounded-xl border border-white/5 bg-black/30 p-3 text-sm text-white/85 leading-6">
        <div class="flex items-start gap-2">
          <div>💡</div>
          <p id="tfTip">–</p>
        </div>
      </div>
    </div>

    <!-- Export -->
    <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-3">
      <div class="flex items-center justify-between gap-3">
        <h3 class="text-sm font-semibold text-luxgold">Export</h3>
        <span class="text-[11px] text-white/60">Zeitraum: <span id="exportRangeLabel">–</span></span>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-3 items-end">
        <label class="block">
          <span class="text-xs text-white/70">USt-Satz</span>
          <select id="optVatRate" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm">
            <option value="19" selected>19 %</option>
            <option value="7">7 %</option>
            <option value="0">0 % (steuerfrei)</option>
          </select>
        </label>

        <label class="block">
          <span class="text-xs text-white/70">Kontenplan</span>
          <select id="optKontoPlan" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm">
            <option value="SKR03" selected>SKR03</option>
            <option value="SKR04">SKR04</option>
          </select>
        </label>

        <label class="block">
          <span class="text-xs text-white/70">Erlöskonto (z. B. 8400 / 4400)</span>
          <input id="optKonto" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm" placeholder="8400" value="8400" />
        </label>

        <label class="block">
          <span class="text-xs text-white/70">Gegenkonto (Bank, z. B. 1200)</span>
          <input id="optContra" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2 text-sm" placeholder="1200" value="1200" />
        </label>
      </div>

      <div class="flex flex-wrap gap-2">
        <button id="btnExportSales" class="border border-luxgray rounded-xl px-3 py-2 text-sm">Umsatz (CSV, Steuer)</button>
        <button id="btnExportVIPs"   class="border border-luxgray rounded-xl px-3 py-2 text-sm">VIP-Liste (CSV)</button>
      </div>

      <p class="text-[11px] text-white/50 leading-5">
        Hinweis: Dieser Export basiert auf deinen VIP-Verkäufen im gewählten Zeitraum und dem eingestellten Preis.
        Für Gebühren/Refunds nutze zusätzlich die Stripe-Berichte. Kontonummern kannst du hier anpassen.
      </p>
    </div>

    <!-- Debug -->
    <pre id="debugBox" class="bg-black/40 border border-luxgray/50 rounded-xl p-3 text-xs text-white/70 overflow-auto"></pre>
  </section>

  <style is:global>
    .kpi-card{background:rgba(0,0,0,.6);border:1px solid var(--luxgray,#2a2a2a);border-radius:1rem;padding:1rem}
    .kpi-title{font-size:.75rem;color:rgba(255,255,255,.6);margin-bottom:.25rem}
    .kpi-value{font-size:1.6rem;font-weight:700;color:#f6c453}
    .kpi-note{font-size:11px;color:rgba(255,255,255,.55)}
    .kpi-delta{font-size:.8rem}
    .kpi-delta.up{color:#7ee787}
    .kpi-delta.down{color:#ff6b6b}
    .kpi-spark{height:32px;margin-top:.35rem}

    .range-btn{border:1px solid var(--luxgray,#2a2a2a);border-radius:.6rem;padding:.45rem .7rem;font-size:.85rem;color:#fff;background:transparent}
    .range-btn.is-active{border-color:rgba(246,196,83,.5);background:rgba(246,196,83,.08);color:#f6c453}

    .demo-btn{border:1px solid var(--luxgray,#2a2a2a);border-radius:.6rem;padding:.45rem .7rem;font-size:.85rem;color:#fff;background:transparent}
    .demo-btn.is-active{border-color:rgba(246,196,83,.5);background:rgba(246,196,83,.08);color:#f6c453}

    .chart-card{background:rgba(0,0,0,.6);border:1px solid var(--luxgray,#2a2a2a);border-radius:1rem;padding:1rem}
    .chart-header{display:flex;align-items:center;justify-content:space-between;margin-bottom:.25rem}
    .chart-title{font-size:.9rem;font-weight:600;color:#f6c453}
    .chart-meta{font-size:11px;color:rgba(255,255,255,.6)}
    .charts-wrap::-webkit-scrollbar{display:none}

    .badge-pos{color:#7ee787;background:rgba(126,231,135,.08);border:1px solid rgba(126,231,135,.35)}
    .badge-neg{color:#ff6b6b;background:rgba(255,107,107,.08);border:1px solid rgba(255,107,107,.35)}
  </style>

 <script type="module">
const dbg = (...args) => {
  const parts = [];
  for (const a of args) { try { parts.push(typeof a === "string" ? a : JSON.stringify(a, null, 2)); } catch { parts.push(String(a)); } }
  const msg = parts.join(" ");
  console.log(...args);
  const box = document.getElementById("debugBox"); if (box) box.textContent += msg + "\n";
};

try {
  // ENV check
  const meta = document.getElementById("supabase-config");
  if (!meta?.dataset?.url || !meta?.dataset?.key) { dbg("❌ Supabase ENV fehlt:", { url: meta?.dataset?.url, keySet: !!meta?.dataset?.key }); throw new Error("Supabase ENV fehlt"); }

  // ---------- Libraries ----------
  const supaMod = await import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm");
  await import("https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js");
  if (!window.Chart) throw new Error("Chart.js nicht geladen");
  const { createClient } = supaMod;
  const Chart = window.Chart;

  // --- Demo-Flag (persistiert); URL-Override via ?demo=1|0
  let DEMO = (typeof window !== "undefined" && localStorage.getItem("lux_demo") === "1");
  if (typeof window !== "undefined") {
    const qp = new URLSearchParams(location.search);
    if (qp.has("demo")) {
      DEMO = qp.get("demo") === "1";
      localStorage.setItem("lux_demo", DEMO ? "1" : "0");
    }
  }

  // Supabase client
  const supabase = createClient(meta.dataset.url, meta.dataset.key);

  // DOM shorthands
  const el = (id) => document.getElementById(id);
  const qsA = (sel) => Array.from(document.querySelectorAll(sel));
  const fmtEUR = (n) => (typeof n === "number" ? n : Number(n || 0)).toLocaleString("de-DE",{style:"currency",currency:"EUR",maximumFractionDigits:0});

  // Date helpers
  const now = new Date();
  const toISO = (d) => new Date(d).toISOString().slice(0,10);
  const daysAgo = (d) => new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()-d));
  function labelsLastNDays(n){const arr=[];for(let i=n-1;i>=0;i--){arr.push(toISO(daysAgo(i)));}return arr;}
  const stamp = new Intl.DateTimeFormat('de-DE',{dateStyle:'medium', timeStyle:'short'}).format(new Date());
  const baseStampText = `Datenstand: ${stamp}`;
  el("dataStamp").textContent = baseStampText;

  // Auth
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) { dbg("❌ Kein User – redirect /"); window.location.href = "/"; throw new Error("redirect"); }

  // Config
  const { data: cfg } = await supabase
    .from("creator_config")
    .select("preis, vip_dauer")
    .eq("creator_id", user.id)
    .maybeSingle();

  const preis = Number(cfg?.preis || 0);
  const vipDauer = Number(cfg?.vip_dauer || 30);

  // VIPs (echte Daten)
  const { data: vipData } = await supabase
    .from("vip_users")
    .select("letzter_kontakt, vip_bis, status")
    .eq("creator_id", user.id);

  const vipRowsReal = vipData || [];
  let vipRows = [];

  // Demo-Rows Generator
  function makeDemoRows() {
    const base = new Date();
    const mk = (offset, days=vipDauer) => ({
      letzter_kontakt: new Date(base.getTime()-offset*86400000).toISOString(),
      vip_bis:         new Date(base.getTime()+(days-offset)*86400000).toISOString(),
      status: "active",
    });
    // leichte Streuung für Sparklines/Charts
    const rows = [];
    for (let i=1;i<=28;i++){ const c = Math.random()<0.55 ? 1 : 0; for(let k=0;k<c;k++) rows.push(mk(i)); }
    return rows.length ? rows : [mk(1), mk(2), mk(5), mk(7), mk(8), mk(10), mk(15)];
  }

  // ---------- Aggregation & Rendering ----------
  let RANGE = 30; // default
  const compareToggle = el("compareToggle");
  const exportRangeLabel = el("exportRangeLabel");

  let revChart, vipChart, sparkRev, sparkActive, sparkNew;

  function computeSeries(rangeDays){
    const labels = labelsLastNDays(rangeDays);
    const mapNew = Object.fromEntries(labels.map(d=>[d,0]));
    vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNew[d]!==undefined) mapNew[d]+=1;});
    const newVipSeries = labels.map(d=>mapNew[d]);

    const revenueByDay = labels.map((_,i)=> (preis>0 ? newVipSeries[i]*preis : 0));
    const activeEachDay = labels.map(d=> vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= d).length );

    const revenueTotal = revenueByDay.reduce((a,b)=>a+b,0);
    const activeToday  = activeEachDay.at(-1) || 0;
    const newTotal     = newVipSeries.reduce((a,b)=>a+b,0);

    return { labels, newVipSeries, revenueByDay, activeEachDay, totals:{ revenueTotal, activeToday, newTotal } };
  }

  function computePrevSeries(rangeDays){
    const endPrev = daysAgo(rangeDays);
    const labelsPrev = [];
    for(let i=rangeDays-1;i>=0;i--){ labelsPrev.push(toISO(new Date(endPrev.getTime()-i*86400000))); }
    const mapNewPrev = Object.fromEntries(labelsPrev.map(d=>[d,0]));
    vipRows.forEach(r=>{ const d=(r.letzter_kontakt||"").slice(0,10); if(mapNewPrev[d]!==undefined) mapNewPrev[d]+=1;});
    const newVipPrev = labelsPrev.map(d=>mapNewPrev[d]);
    const revPrevByDay = labelsPrev.map((_,i)=> (preis>0 ? newVipPrev[i]*preis : 0));
    const activePrevEnd = vipRows.filter(r => String(r.vip_bis||"").slice(0,10) >= labelsPrev.at(-1)).length;
    return {
      newVipPrev, revPrevByDay,
      totals:{ revenueTotal: revPrevByDay.reduce((a,b)=>a+b,0), activeToday: activePrevEnd, newTotal: newVipPrev.reduce((a,b)=>a+b,0) }
    };
  }

  function delta(elm, curr, prev){
    elm.textContent = "";
    elm.classList.remove("up","down");
    if (!compareToggle.checked) return;
    const d = prev>0 ? (curr-prev)/prev : (curr>0 ? 1 : 0);
    const txt = (d>=0?"+":"")+ (Math.abs(d)*100).toFixed(1) + "% " + (d>0?"↗︎":"↘︎");
    elm.textContent = txt;
    if (d>0) elm.classList.add("up"); else if (d<0) elm.classList.add("down");
  }

  // Sparklines
  function renderSpark(canvas, data, color="#f6c453"){
    const ctx = canvas.getContext("2d");
    return new Chart(ctx,{
      type:"line",
      data:{ labels:data.map((_,i)=>i), datasets:[{ data, borderColor:color, pointRadius:0, tension:.35, borderWidth:2 }]},
      options:{ responsive:true, maintainAspectRatio:false, plugins:{legend:{display:false},tooltip:{enabled:false}}, scales:{x:{display:false},y:{display:false}} }
    });
  }

  function renderKPIs(series, prevTotals){
    el("labelRange1").textContent = String(RANGE);
    el("labelRange2").textContent = String(RANGE);
    exportRangeLabel.textContent = `${series.labels[0]} – ${series.labels.at(-1)}`;

    el("kpiRevenue").textContent = fmtEUR(series.totals.revenueTotal);
    el("kpiActive").textContent  = String(series.totals.activeToday);
    el("kpiNew").textContent     = String(series.totals.newTotal);

    delta(el("kpiRevenueDelta"), series.totals.revenueTotal, prevTotals?.revenueTotal ?? 0);
    delta(el("kpiActiveDelta"),  series.totals.activeToday,  prevTotals?.activeToday ?? 0);
    delta(el("kpiNewDelta"),     series.totals.newTotal,     prevTotals?.newTotal ?? 0);

    el("kpiRevenueNote").textContent =
      (DEMO ? "Demo-Daten: " : "") + (preis>0 ? "Basierend auf Preis × neue VIPs" : "Kein Preis in creator_config");
    el("kpiNewNote").textContent     = `Zeitraum: ${series.labels[0]} – ${series.labels.at(-1)}`;

    if (sparkRev) sparkRev.destroy(); if (sparkActive) sparkActive.destroy(); if (sparkNew) sparkNew.destroy();
    sparkRev    = renderSpark(document.getElementById("sparkRevenue"), series.revenueByDay);
    sparkActive = renderSpark(document.getElementById("sparkActive"),  series.activeEachDay);
    sparkNew    = renderSpark(document.getElementById("sparkNew"),     series.newVipSeries);
  }

  function renderCharts(series, prevSeries){
    el("revMeta").textContent = `${series.labels[0]} – ${series.labels.at(-1)}`;
    el("vipMeta").textContent = el("revMeta").textContent;

    if (revChart) revChart.destroy();
    if (vipChart) vipChart.destroy();

    const revCtx = document.getElementById("revChart").getContext("2d");
    const grad = revCtx.createLinearGradient(0,0,0,revCtx.canvas.height);
    grad.addColorStop(0,"rgba(246,196,83,0.35)");
    grad.addColorStop(1,"rgba(246,196,83,0.03)");

    const revDatasets = [{
      label: "Umsatz", data: series.revenueByDay, fill:true,
      backgroundColor: grad, borderColor:"#f6c453", tension:.35, pointRadius:0, borderWidth:2
    }];
    if (compareToggle.checked && prevSeries){
      revDatasets.push({
        label:"Vorperiode", data: prevSeries.revPrevByDay, fill:false,
        borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], tension:.35, pointRadius:0, borderWidth:1.5
      });
    }

    revChart = new Chart(revCtx,{
      type: "line",
      data: { labels: series.labels, datasets: revDatasets },
      options: {
        responsive:true, maintainAspectRatio:false,
        plugins:{ legend:{display:false}, tooltip:{ callbacks:{ label:(ctx)=>fmtEUR(ctx.parsed.y) } } },
        scales:{
          x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},
          y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)", callback:(v)=>fmtEUR(v), maxTicksLimit:5 }, beginAtZero:true }
        }
      }
    });

    const vipCtx = document.getElementById("vipChart").getContext("2d");
    const vipDatasets = [{
      label:"Neue VIPs", data: series.newVipSeries, borderRadius:6, borderSkipped:false,
      backgroundColor:"rgba(246,196,83,.85)"
    }];
    if (compareToggle.checked && prevSeries){
      vipDatasets.push({
        label:"Vorperiode", type:"line", data: prevSeries.newVipPrev,
        borderColor:"rgba(255,255,255,.45)", borderDash:[5,4], pointRadius:0, tension:.35, fill:false
      });
    }

    vipChart = new Chart(vipCtx,{
      type:"bar",
      data:{ labels: series.labels, datasets: vipDatasets },
      options:{
        responsive:true, maintainAspectRatio:false, plugins:{ legend:{display:false} },
        scales:{
          x:{ grid:{ display:false }, ticks:{ color:"rgba(255,255,255,.75)", maxTicksLimit:6 }},
          y:{ grid:{ color:"rgba(255,255,255,.08)" }, ticks:{ color:"rgba(255,255,255,.75)" }, beginAtZero:true }
        }
      }
    });
  }

  // -------- Top/Flop & KI-Tipp --------
  const wdayDE = (iso) => ["So","Mo","Di","Mi","Do","Fr","Sa"][new Date(iso).getDay()] || "";

  function renderTopFlop(series){
    const labels = series.labels;
    const rev    = series.revenueByDay;
    if (!labels.length) return;

    const max = Math.max(...rev), min = Math.min(...rev);
    const topIdx  = rev.indexOf(max);
    const flopIdx = rev.indexOf(min);
    const avg = rev.reduce((a,b)=>a+b,0)/Math.max(1,rev.length);

    el("tfTopDate") .textContent = `${labels[topIdx]} (${wdayDE(labels[topIdx])})`;
    el("tfTopValue").textContent = fmtEUR(max);
    el("tfFlopDate").textContent = `${labels[flopIdx]} (${wdayDE(labels[flopIdx])})`;
    el("tfFlopValue").textContent= fmtEUR(min);
    el("tfAvgValue").textContent = fmtEUR(avg);

    const badge = (node, val, positiveGood=true)=>{
      const d = avg>0 ? (val-avg)/avg : 0;
      const txt = (d>=0?"+":"−") + (Math.abs(d)*100).toFixed(1) + "% vs. Ø";
      node.textContent = txt;
      node.classList.remove("badge-pos","badge-neg");
      node.classList.add(((d>=0)===positiveGood) ? "badge-pos" : "badge-neg");
    };
    badge(el("tfTopDelta"),  max, true);
    badge(el("tfFlopDelta"), min, false);

    window.__tfSummary = buildTipPayload(series);
  }

  function buildTipPayload(series){
    const { labels, revenueByDay, newVipSeries, totals } = series;
    const wdNames=["So","Mo","Di","Mi","Do","Fr","Sa"];
    const byWd = wdNames.reduce((a,k)=> (a[k]={revenue:0,newVips:0}, a), {});
    labels.forEach((d,i)=>{
      const wd=wdNames[new Date(d).getDay()];
      byWd[wd].revenue += revenueByDay[i]||0;
      byWd[wd].newVips += newVipSeries[i]||0;
    });
    const max = Math.max(...revenueByDay), min = Math.min(...revenueByDay);
    const topIdx=revenueByDay.indexOf(max), flopIdx=revenueByDay.indexOf(min);
    const avg = revenueByDay.reduce((a,b)=>a+b,0)/Math.max(1,revenueByDay.length);

    return {
      rangeDays: labels.length,
      start: labels[0], end: labels.at(-1),
      currency: "EUR",
      price: Number(preis||0),
      totals: { revenue: totals.revenueTotal, newVips: totals.newTotal, activeToday: totals.activeToday },
      avgRevenuePerDay: avg,
      volatility: (Math.max(...revenueByDay) - Math.min(...revenueByDay)) / Math.max(1, avg),
      top:  { date: labels[topIdx],  value: max,  weekday: wdayDE(labels[topIdx]),  newVips: newVipSeries[topIdx]||0 },
      flop: { date: labels[flopIdx], value: min,  weekday: wdayDE(labels[flopIdx]), newVips: newVipSeries[flopIdx]||0 },
      revenueByDay: labels.map((d,i)=> [d, Number(revenueByDay[i]||0)]),
      newVipByDay:  labels.map((d,i)=> [d, Number(newVipSeries[i]||0)]),
      weekdayBreakdown: byWd
    };
  }

  const TIP_ENDPOINT = "/api/insight-tip";
  const tipCache = new Map();
  async function fetchAiTip(summary){
    const key = `${summary.start}-${summary.end}`;
    if (tipCache.has(key)) return tipCache.get(key);

    const resp = await fetch(TIP_ENDPOINT, {
      method:"POST",
      headers:{ "content-type":"application/json" },
      body: JSON.stringify(summary)
    });
    if (!resp.ok) throw new Error(`AI ${resp.status}`);
    const data = await resp.json();
    const tip = (data?.tip || "").trim();
    if (tip) tipCache.set(key, tip);
    return tip;
  }

  function fallbackTip(summary){
    const { top, flop, avgRevenuePerDay, volatility } = summary;
    const lines = [];
    if (["Sa","So"].includes(flop.weekday)){
      lines.push(`Am Wochenende war es ruhiger. Teste am Freitagabend (19–21 Uhr) eine kurze Aktion mit Story und Countdown, um Schwung mitzunehmen.`);
    } else {
      lines.push(`Am ${flop.weekday} war es ruhiger. Plane am Vorabend (19–21 Uhr) eine Story mit klarem Hinweis, was man tun soll (z. B. „Jetzt beitreten“), und pinne sie bis ${flop.weekday}.`);
    }
    if (top.value > avgRevenuePerDay*1.3){
      lines.push(`Der Top-Tag (${top.weekday}) lief deutlich besser. Wiederhole Format und Uhrzeit zeitnah – gleicher Aufhänger, klarer Nutzen.`);
    }
    if (volatility > 1.2){
      lines.push(`Die Werte schwanken stark. Fülle ruhige Tage mit kleinen Anreizen (z. B. 5 % für 12 Std.) oder kurzen Erinnerungs-DMs.`);
    }
    return lines.join(" ");
  }

  const tipBtn = el("tfToggleTip");
  tipBtn.addEventListener("click", async ()=>{
    const box = el("tfTipWrap");
    const isHidden = box.classList.contains("hidden");
    if (!isHidden){
      box.classList.add("hidden");
      tipBtn.textContent = "💡 Tipp anzeigen";
      return;
    }
    tipBtn.disabled = true;
    tipBtn.textContent = "… Tipp wird generiert";
    try{
      const series = computeSeries(RANGE);
      const summary = buildTipPayload(series);
      const tip = await fetchAiTip(summary).catch(()=> fallbackTip(summary));
      el("tfTip").textContent = tip || fallbackTip(summary);
      box.classList.remove("hidden");
      tipBtn.textContent = "💡 Tipp ausblenden";
    } catch(err){
      dbg("⚠️ KI-Tipp Fehler:", err?.message||err);
      el("tfTip").textContent = "Konnte den Tipp gerade nicht laden. Bitte später erneut versuchen.";
      box.classList.remove("hidden");
      tipBtn.textContent = "💡 Tipp ausblenden";
    } finally {
      tipBtn.disabled = false;
    }
  });

  // --- Demo Mode anwenden & UI updaten
  function applyDemoMode(){
    vipRows = DEMO ? makeDemoRows() : vipRowsReal.slice();
    const btn = document.getElementById("demoToggle");
    if (btn){
      btn.textContent = DEMO ? "Demo: AN" : "Demo: AUS";
      btn.classList.toggle("is-active", DEMO);
    }
    const stampEl = document.getElementById("dataStamp");
    if (stampEl){
      stampEl.textContent = DEMO ? `${baseStampText} • Demo aktiv` : baseStampText;
    }
  }

  // Initial render
  function rerender(){
    const series = computeSeries(RANGE);
    const prev   = compareToggle.checked ? computePrevSeries(RANGE) : null;
    renderKPIs(series, prev?.totals);
    renderCharts(series, prev);
    renderTopFlop(series);
  }

  // Range events
  qsA(".range-btn").forEach(btn=>{
    btn.addEventListener("click", ()=>{
      qsA(".range-btn").forEach(b=>b.classList.remove("is-active"));
      btn.classList.add("is-active");
      RANGE = Number(btn.dataset.range || 30);
      rerender();
    });
  });
  compareToggle.addEventListener("change", rerender);

  // Demo Toggle
  const demoBtn = document.getElementById("demoToggle");
  if (demoBtn){
    demoBtn.addEventListener("click", ()=>{
      DEMO = !DEMO;
      localStorage.setItem("lux_demo", DEMO ? "1" : "0");
      applyDemoMode();
      rerender();
    });
  }

  // Kick
  applyDemoMode();
  rerender();

} catch (e) {
  dbg("❌ Render error:", e?.message || e);
}
</script>


</DashboardLayout>
