---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
---

<DashboardLayout title="Dein Luxbase Dashboard">
  <section class="max-w-6xl mx-auto px-4 py-6 space-y-6" id="dashboardRoot">
    <!-- KPI Cards -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Umsatz (30 Tage)</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiRevenue">–</p>
        <p class="text-[11px] text-white/50" id="kpiRevenueNote"></p>
      </article>
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Aktive VIPs</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiActive">–</p>
        <p class="text-[11px] text-white/50" id="kpiActiveNote"></p>
      </article>
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Neue VIPs (7 Tage)</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiNew">–</p>
        <p class="text-[11px] text-white/50" id="kpiNewNote"></p>
      </article>
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <h3 class="text-xs text-white/60 mb-2">Conversion (Demo)</h3>
        <p class="text-2xl font-semibold text-luxgold" id="kpiConv">–</p>
        <p class="text-[11px] text-white/50">Platzhalter – an Datenquelle anbindbar</p>
      </article>
    </div>

    <!-- Charts -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <header class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-semibold text-luxgold">Umsatzverlauf (30 Tage)</h3>
          <span class="text-[11px] text-white/50" id="revMeta">–</span>
        </header>
        <div style="height: 240px"><canvas id="revChart"></canvas></div>
      </article>

      <article class="bg-black/60 border border-luxgray rounded-2xl p-4">
        <header class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-semibold text-luxgold">Neue VIPs / Tag</h3>
          <span class="text-[11px] text-white/50" id="vipMeta">–</span>
        </header>
        <div style="height: 240px"><canvas id="vipChart"></canvas></div>
      </article>
    </div>

    <!-- Sichtbarer Debug-Output -->
    <pre id="debugBox" class="bg-black/40 border border-luxgray/50 rounded-xl p-3 text-xs text-white/70 overflow-auto"></pre>
  </section>

  <script type="module">
    const dbg = (...args) => {
      console.log(...args);
      const el = document.getElementById("debugBox");
      if (el) el.textContent += args.map(a => {
        try { return typeof a === "string" ? a : JSON.stringify(a, null, 2); }
        catch { return String(a); }
      }).join(" ") + "\n";
    };

    try {
      const meta = document.getElementById("supabase-config");
      if (!meta?.dataset?.url || !meta?.dataset?.key) {
        dbg("❌ Supabase ENV fehlt:", { url: meta?.dataset?.url, keySet: !!meta?.dataset?.key });
        throw new Error("Supabase ENV fehlt");
      }

      // 1) Libraries laden
      const [{ createClient }, Chart] = await Promise.all([
        import("https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm"),
        import("https://cdn.jsdelivr.net/npm/chart.js@4.4.1/auto/auto.js").then(m => m.default),
      ]);
      dbg("✅ Libraries geladen");

      const supabase = createClient(meta.dataset.url, meta.dataset.key);

      const el = (id) => document.getElementById(id);
      const fmtEUR = (n) => (typeof n === "number" ? n : Number(n || 0))
        .toLocaleString("de-DE", { style: "currency", currency: "EUR", maximumFractionDigits: 0 });

      const today = new Date();
      const daysAgo = (d) => new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate() - d));
      function labelsLastNDays(n=30) {
        const arr = [];
        for (let i = n - 1; i >= 0; i--) {
          const dt = daysAgo(i);
          arr.push(dt.toISOString().slice(0,10));
        }
        return arr;
      }

      // 2) Auth
      const { data: { user }, error: userErr } = await supabase.auth.getUser();
      if (userErr) dbg("⚠️ getUser error:", userErr);
      if (!user) { dbg("❌ Kein User – redirect /"); window.location.href = "/"; return; }
      dbg("👤 User:", { id: user.id, email: user.email });

      // 3) creator_config
      const { data: cfg, error: cfgErr } = await supabase
        .from("creator_config")
        .select("preis, vip_dauer")
        .eq("creator_id", user.id)
        .maybeSingle();
      if (cfgErr) dbg("⚠️ creator_config error:", cfgErr);
      dbg("📦 creator_config:", cfg);

      const preis = Number(cfg?.preis || 0);
      const vipDauer = Number(cfg?.vip_dauer || 30);

      // 4) vip_users
      const { data: vipData, error: vipErr } = await supabase
        .from("vip_users")
        .select("letzter_kontakt, vip_bis, status")
        .eq("creator_id", user.id);
      if (vipErr) dbg("⚠️ vip_users error:", vipErr);
      dbg("📊 vip_users rows:", vipData?.length ?? 0);

      let vipRows = vipData || [];

      // 5) Demo-Fallback, falls leer
      if (!vipRows.length) {
        const base = new Date();
        const mk = (offset, days=vipDauer) => ({
          letzter_kontakt: new Date(base.getTime() - offset*86400000).toISOString(),
          vip_bis: new Date(base.getTime() + (days-offset)*86400000).toISOString(),
          status: "active",
        });
        vipRows = [mk(1), mk(2), mk(5), mk(7), mk(8), mk(10), mk(15)];
        el("kpiRevenueNote").textContent = "Demo-Schätzung (keine echten Datensätze oder keine Leserechte)";
        el("kpiActiveNote").textContent = "Demo-Daten";
        el("kpiNewNote").textContent = "Demo-Daten";
        dbg("ℹ️ Demo-Daten aktiviert");
      }

      // 6) Aggregation
      const labels = labelsLastNDays(30);
      const newVipByDay = Object.fromEntries(labels.map(d => [d, 0]));
      vipRows.forEach(r => {
        const d = (r.letzter_kontakt || "").slice(0,10);
        if (newVipByDay[d] !== undefined) newVipByDay[d] += 1;
      });
      const newVipSeries = labels.map(d => newVipByDay[d]);

      const revenueByDay = labels.map((_, i) => (preis > 0 ? newVipSeries[i] * preis : 0));
      const revenue30 = revenueByDay.reduce((a,b) => a + b, 0);

      const todayISO = new Date().toISOString().slice(0,10);
      const active = vipRows.filter(r => String(r.vip_bis || "").slice(0,10) >= todayISO).length;

      const last7 = labels.slice(-7);
      const new7 = last7.reduce((sum, d) => sum + (newVipByDay[d] || 0), 0);

      // 7) KPIs
      el("kpiRevenue").textContent = fmtEUR(revenue30);
      el("kpiActive").textContent = String(active);
      el("kpiNew").textContent = String(new7);
      el("revMeta").textContent = preis > 0 ? `Basis: Preis ${fmtEUR(preis)} × neue VIPs` : "Kein Preis in creator_config";
      el("vipMeta").textContent = `Zeitraum: ${labels[0]} – ${labels[labels.length-1]}`;

      // 8) Charts
      const revCanvas = el("revChart");
      const vipCanvas = el("vipChart");
      if (!revCanvas || !vipCanvas) { dbg("❌ Canvas nicht gefunden"); return; }

      new Chart(revCanvas.getContext("2d"), {
        type: "line",
        data: { labels, datasets: [{ label: "Umsatz", data: revenueByDay, tension: 0.35, borderWidth: 2, pointRadius: 0 }] },
        options: {
          responsive: true, maintainAspectRatio: false,
          plugins: { legend: { display: false }, tooltip: { callbacks: { label: (ctx) => fmtEUR(ctx.parsed.y) } } },
          scales: {
            x: { grid: { color: "rgba(255,255,255,0.1)" }, ticks: { color: "rgba(255,255,255,0.7)", maxTicksLimit: 6 } },
            y: { grid: { color: "rgba(255,255,255,0.1)" }, ticks: { color: "rgba(255,255,255,0.7)", callback: (v) => fmtEUR(v) } },
          },
        },
      });

      new Chart(vipCanvas.getContext("2d"), {
        type: "bar",
        data: { labels, datasets: [{ label: "Neue VIPs", data: newVipSeries }] },
        options: {
          responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } },
          scales: {
            x: { grid: { color: "rgba(255,255,255,0.1)" }, ticks: { color: "rgba(255,255,255,0.7)", maxTicksLimit: 6 } },
            y: { grid: { color: "rgba(255,255,255,0.1)" }, ticks: { color: "rgba(255,255,255,0.7)" }, beginAtZero: true, },
          },
        },
      });

      dbg("✅ Charts gezeichnet");
    } catch (e) {
      dbg("💥 Fehler:", e?.message || e);
    }
  </script>
</DashboardLayout>
