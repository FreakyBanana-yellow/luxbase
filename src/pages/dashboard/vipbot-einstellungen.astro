---
import DashboardLayout from "../../layouts/DashboardLayout.astro";

/** Fester Telegram‑Bot Username (ohne @) */
const BOT_USERNAME = "Luxbot";
---

<DashboardLayout title="VIP‑Bot Einstellungen">
  <!-- safer: Übergabe als Data-Attribut -->
  <div id="lux-meta" data-bot={BOT_USERNAME} class="hidden"></div>

  <section class="max-w-3xl mx-auto px-4 py-6 pb-28 relative space-y-6">
    <!-- Status -->
    <div id="statusBox" class="hidden bg-black/60 border border-luxgray rounded-2xl p-4 text-sm text-white/80"></div>

    <form id="botForm" class="space-y-5">
      <!-- Basis -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Basis</h2>
        <div class="grid grid-cols-2 gap-3">
          <label class="block">
            <span class="text-sm text-white/70">Preis (€)</span>
            <input id="preis" type="number" inputmode="numeric" step="1" min="0"
              class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="29" />
          </label>
          <label class="block">
            <span class="text-sm text-white/70">VIP‑Dauer (Tage)</span>
            <input id="vip_days" type="number" inputmode="numeric" step="1" min="1"
              class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="30" />
          </label>
        </div>
      </div>

      <!-- Gruppe -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Gruppe</h2>

        <label class="block">
          <span class="text-sm text-white/70">Gruppen‑Link (Fallback, statisch)</span>
          <input id="gruppe_link" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="https://t.me/+abcdef..." />
        </label>

        <label class="block">
          <span class="text-sm text-white/70">Gruppen‑Chat‑ID (automatisch nach „Gruppe verbinden“)</span>
          <input id="group_chat_id" disabled class="mt-1 w-full bg-black/20 border border-luxgray/60 rounded-xl px-3 py-2" placeholder="-1001234567890" />
        </label>

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
          <button type="button" class="w-full border border-luxgray rounded-xl py-3"
                  onclick="window.lux.copyStart()">
            Start‑Link kopieren
          </button>
          <button type="button" class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3"
                  onclick="window.lux.bindGroup()">
            Gruppe verbinden
          </button>
        </div>

        <!-- Previews -->
        <div class="text-xs text-white/60 space-y-2">
          <div>Start‑Link: <a id="previewStart" class="underline break-all" target="_blank" rel="noreferrer">—</a></div>
          <div>Startgroup‑Link: <a id="previewGroup" class="underline break-all" target="_blank" rel="noreferrer">—</a></div>
          <div class="mt-2">Zum Kopieren:</div>
          <input id="previewStartInput" readonly class="w-full bg-black/30 border border-luxgray rounded-lg px-2 py-1 text-[12px] select-all" />
          <input id="previewGroupInput" readonly class="w-full bg-black/30 border border-luxgray rounded-lg px-2 py-1 text-[12px] select-all" />
        </div>
      </div>

      <!-- Stripe -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Stripe</h2>
        <label class="block">
          <span class="text-sm text-white/70">Stripe Price ID (optional – sonst Preis von oben)</span>
          <input id="stripe_price_id" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="price_123..." />
        </label>

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
          <!-- Dieser Button bekommt per JS zusätzlich ein echtes href auf den Redirect-Endpoint -->
          <button id="stripeBtn" type="button" class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3"
                  onclick="window.lux.connectStripe()">
            Stripe verbinden
          </button>
          <button type="button" class="w-full border border-luxgray rounded-xl py-3"
                  onclick="window.lux.refresh()">
            Status prüfen
          </button>
        </div>

        <p id="stripeStatus" class="text-xs text-white/60"></p>
      </div>

      <!-- Texte -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Texte</h2>
        <label class="block">
          <span class="text-sm text-white/70">Welcome‑Text</span>
          <textarea id="welcome_text" rows="3" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="👋 Willkommen im VIP! ..."></textarea>
        </label>
        <label class="block">
          <span class="text-sm text-white/70">Regeln‑Text</span>
          <textarea id="regeln_text" rows="3" class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="📜 Regeln ..."></textarea>
        </label>
      </div>

      <!-- Actions -->
      <div class="flex items-center gap-3">
        <button type="button" class="flex-1 bg-luxgold/90 text-black font-semibold rounded-xl py-3"
                onclick="window.lux.save()">
          Speichern
        </button>
        <button type="button" class="px-4 py-3 border border-luxgray rounded-xl"
                onclick="window.lux.refresh()">
          Neu laden
        </button>
      </div>

      <p id="hint" class="text-xs text-white/60"></p>
    </form>
  </section>

  <style is:global>
    /* Safety: falls irgendwo pointer-events deaktiviert sind */
    #botForm, #botForm * { pointer-events: auto; }
  </style>

  <!-- Mini-Fallback: reagiert, falls das Modul später nicht lädt -->
  <script>
    window.lux = window.lux || {
      save(){ alert("Aktion ausgeführt (Fallback). Falls das so bleibt, ist das Haupt‑Script nicht geladen."); },
      refresh(){ location.reload(); },
      copyStart(){ alert("Start‑Link steht im Feld – bitte manuell kopieren."); },
      bindGroup(){ alert("Nutze den Startgroup‑Link unten direkt."); },
      connectStripe(){ alert("Stripe benötigt das Backend. Prüfe PUBLIC_BOT_API_BASE."); }
    };
  </script>

  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

    // Meta & ENV
    const BOT = document.getElementById("lux-meta")?.dataset?.bot || "Luxbot";
    const BOT_API = import.meta.env.PUBLIC_BOT_API_BASE || ""; // z.B. https://luxbasebot.onrender.com

    const $ = (id) => document.getElementById(id);
    const setStatus = (msg, ok=true) => {
      const box = $("statusBox");
      if (!box) return;
      box.classList.remove("hidden");
      box.textContent = msg;
      box.classList.toggle("border-green-600", ok);
      box.classList.toggle("border-red-600", !ok);
    };

    // Supabase
    const meta = document.getElementById("supabase-config");
    const supabase = createClient(meta.dataset.url, meta.dataset.key);
    const fields = ["preis","vip_days","gruppe_link","group_chat_id","stripe_price_id","welcome_text","regeln_text"];

    // Auth
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) { window.location.href = "/"; throw new Error("not-auth"); }

    // Links
    const startLink = () => `https://t.me/${BOT}?start=${encodeURIComponent("creator_"+user.id)}`;
    const groupLink = () => `https://t.me/${BOT}?startgroup=${encodeURIComponent("creator_"+user.id)}`;
    const stripeRedirect = () => `${BOT_API}/api/stripe/connect-redirect?creator_id=${encodeURIComponent(user.id)}`;

    function updatePreviews() {
      const s = startLink(), g = groupLink();
      $("previewStart").href = s; $("previewStart").textContent = s;
      $("previewGroup").href = g; $("previewGroup").textContent = g;
      $("previewStartInput").value = s;
      $("previewGroupInput").value = g;

      // Button zusätzlich als echter Link nutzbar (falls JS blockiert ist)
      const btn = document.getElementById("stripeBtn");
      if (btn) {
        // Wrapper-Link erzeugen
        let wrapper = btn.closest("a.lx-linkwrap");
        if (!wrapper) {
          wrapper = document.createElement("a");
          wrapper.className = "lx-linkwrap";
          wrapper.target = "_blank"; wrapper.rel = "noreferrer";
          btn.parentNode.insertBefore(wrapper, btn);
          wrapper.appendChild(btn);
        }
        wrapper.href = BOT_API ? stripeRedirect() : "#";
      }
    }

    async function loadCfg() {
      const { data, error } = await supabase
        .from("creator_config")
        .select(fields.join(",") + ", stripe_account_id")
        .eq("creator_id", user.id)
        .maybeSingle();

      if (error) setStatus("❌ Konnte Einstellungen nicht laden.", false);

      if (data) {
        for (const k of fields) if ($(k)) $(k).value = (data[k] ?? "");
        if (data.group_chat_id) setStatus(`✅ Gruppe verbunden (Chat ID: ${data.group_chat_id}). Bot sollte Admin sein.`);
        else setStatus("⚠️ Keine Gruppe verbunden. Nutze „Gruppe verbinden“.", false);

        $("stripeStatus").textContent = data.stripe_account_id
          ? `✅ Stripe verbunden (Account: ${data.stripe_account_id}).`
          : "⚠️ Stripe noch nicht verbunden.";
      } else {
        for (const k of fields) if ($(k)) $(k).value = "";
        setStatus("ℹ️ Noch keine Einstellungen gespeichert. Bitte ausfüllen und speichern.", false);
        $("stripeStatus").textContent = "⚠️ Stripe noch nicht verbunden.";
      }
      updatePreviews();
    }

    // Globale Aktionen (überschreiben den Fallback)
    window.lux = {
      async save() {
        const payload = { creator_id: user.id };
        for (const k of fields) payload[k] = $(k)?.value ?? null;
        payload.preis = Number(payload.preis || 0);
        payload.vip_days = Number(payload.vip_days || 30);

        const { error } = await supabase.from("creator_config").upsert(payload, { onConflict: "creator_id" });
        $("hint").textContent = error ? "❌ Speichern fehlgeschlagen." : "✅ Gespeichert.";
        if (!error) await loadCfg();
      },
      async refresh(){ await loadCfg(); $("hint").textContent = "🔄 Aktualisiert."; },
      async copyStart(){
        const s = startLink();
        try { await navigator.clipboard.writeText(s); $("hint").textContent = "🔗 Start‑Link kopiert: " + s; }
        catch { $("previewStartInput").select(); document.execCommand("copy"); $("hint").textContent = "🔗 Markiert – bitte manuell kopieren."; }
      },
      bindGroup(){
        const g = groupLink();
        window.open(g, "_blank");
        $("hint").textContent = "Öffne Telegram → wähle die Gruppe → Bot starten → Admin‑Rechte geben.";
      },
      connectStripe(){
        if (!BOT_API) { alert("PUBLIC_BOT_API_BASE fehlt."); return; }
        // Bevorzugt: Redirect-Endpoint → kein Popup/JSON nötig
        window.location.href = stripeRedirect();
      }
    };

    await loadCfg();
    setStatus("✅ Seite geladen. Aktionen aktiv.");
  </script>
</DashboardLayout>
