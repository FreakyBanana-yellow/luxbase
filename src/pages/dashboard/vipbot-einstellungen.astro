---
import DashboardLayout from "../../layouts/DashboardLayout.astro";

const BOT_USERNAME = "GroupLuxBot";
const BOT_API_BASE = import.meta.env.PUBLIC_BOT_API_BASE || "";
---

<DashboardLayout title="VIP‑Bot Einstellungen">
  <!-- Meta für Script -->
  <div id="lux-meta" data-bot={BOT_USERNAME} data-bot-api={BOT_API_BASE} class="hidden" />

  <section class="mx-auto w-full max-w-md px-4 py-5 pb-28 space-y-5">
    <!-- kompakter Status / Hinweise (mobil) -->
    <div id="statusBox" class="hidden bg-black/60 border border-luxgray rounded-2xl px-3 py-2 text-[13px] text-white/80"></div>

    <form id="botForm" class="space-y-5">
      <!-- BASIS -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-luxgold text-base font-semibold">VIP‑Einstellungen</h2>
          <details class="relative">
            <summary class="list-none cursor-pointer text-xs text-white/60 select-none">ℹ️</summary>
            <div class="absolute right-0 z-10 mt-2 w-64 rounded-xl border border-luxgray bg-black/90 p-3 text-xs text-white/80 shadow-lg">
              Lege Preis und Laufzeit fest. Der Preis wird dem User im Bot angezeigt und bei Stripe genutzt.
            </div>
          </details>
        </div>

        <div class="grid grid-cols-1 gap-3">
          <label class="block">
            <span class="text-sm text-white/70">Preis (€)</span>
            <input id="preis" type="number" step="1" min="0"
              class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base"
              placeholder="49" inputmode="numeric" />
          </label>

          <label class="block">
            <span class="text-sm text-white/70">VIP‑Dauer (Tage)</span>
            <input id="vip_days" type="number" step="1" min="1"
              class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base"
              placeholder="30" inputmode="numeric" />
          </label>
        </div>
      </div>

      <!-- STRIPE (vor Telegram) -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-luxgold text-base font-semibold">Stripe</h2>
          <details class="relative">
            <summary class="list-none cursor-pointer text-xs text-white/60 select-none">ℹ️</summary>
            <div class="absolute right-0 z-10 mt-2 w-64 rounded-xl border border-luxgray bg-black/90 p-3 text-xs text-white/80 shadow-lg">
              Verbinde zuerst Stripe, damit Zahlungen funktionieren. Es öffnet sich das Stripe‑Onboarding.
            </div>
          </details>
        </div>

        <a id="stripeLinkWrap" class="w-full block" target="_blank" rel="noreferrer">
          <button id="stripeBtn" type="button"
            class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 text-base active:scale-[0.99]">
            Stripe verbinden
          </button>
        </a>
      </div>

      <!-- TELEGRAM -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-luxgold text-base font-semibold">Telegram</h2>
          <details class="relative">
            <summary class="list-none cursor-pointer text-xs text-white/60 select-none">ℹ️</summary>
            <div class="absolute right-0 z-10 mt-2 w-64 rounded-xl border border-luxgray bg-black/90 p-3 text-xs text-white/80 shadow-lg">
              1) Trage den (statischen) Gruppen‑Link als Fallback ein. <br/>
              2) „Bot aktivieren“ öffnet den DM‑Start mit deinem Bot. <br/>
              3) Füge den Bot als Admin in deiner Gruppe hinzu.
            </div>
          </details>
        </div>

        <label class="block">
          <span class="text-sm text-white/70">Gruppen‑Link (Fallback)</span>
          <input id="gruppe_link"
            class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base"
            placeholder="https://t.me/+abcdef…" inputmode="url" />
        </label>

        <button id="linkTelegramBtn" type="button"
          class="w-full bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 text-base active:scale-[0.99]">
          Bot aktivieren
        </button>

        <!-- Startlink + QR -->
        <div class="space-y-2">
          <div class="flex items-center justify-between">
            <span class="text-sm text-white/70">Start‑Link</span>
            <button id="copyStartBtn" type="button"
              class="text-xs px-2 py-1 border border-luxgray rounded-lg active:scale-[0.98]">
              Kopieren
            </button>
          </div>
          <input id="previewStartInput" readonly
            class="w-full bg-black/30 border border-luxgray rounded-xl px-3 py-2 text-[13px] select-all" />

          <div class="flex justify-center pt-1">
            <canvas id="qrcode" class="bg-white p-2 rounded-xl" />
          </div>

          <p class="text-[11px] text-white/50 text-center">
            Tipp: QR‑Code im Creator‑Profil teilen – Fans scannen und starten direkt deinen Bot.
          </p>
        </div>
      </div>

      <!-- TEXTE -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <div class="flex items-center justify-between">
          <h2 class="text-luxgold text-base font-semibold">Texte</h2>
          <details class="relative">
            <summary class="list-none cursor-pointer text-xs text-white/60 select-none">ℹ️</summary>
            <div class="absolute right-0 z-10 mt-2 w-64 rounded-xl border border-luxgray bg-black/90 p-3 text-xs text-white/80 shadow-lg">
              Welcome‑ und Regeln‑Text werden den Käufer:innen nach der Zahlung im DM angezeigt.
            </div>
          </details>
        </div>

        <label class="block">
          <span class="text-sm text-white/70">Welcome‑Text</span>
          <textarea id="welcome_text" rows="3"
            class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base"
            placeholder="👋 Willkommen im VIP! …" />
        </label>

        <label class="block">
          <span class="text-sm text-white/70">Regeln‑Text</span>
          <textarea id="regeln_text" rows="3"
            class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-3 text-base"
            placeholder="📜 Regeln …" />
        </label>
      </div>

      <!-- Aktionen (unten, groß) -->
      <div class="sticky bottom-4 z-10">
        <div class="bg-black/70 backdrop-blur border border-luxgray rounded-2xl p-3 flex gap-3">
          <button id="saveBtn" type="button"
            class="flex-1 bg-luxgold/90 text-black font-semibold rounded-xl py-3.5 text-base active:scale-[0.99]">
            Speichern
          </button>
          <button id="reloadBtn" type="button"
            class="px-4 py-3.5 border border-luxgray rounded-xl text-base active:scale-[0.99]">
            Neu laden
          </button>
        </div>
        <p id="hint" class="mt-2 text-[12px] text-center text-white/60"></p>
      </div>
    </form>
  </section>

  <style is:global>
    /* Tooltips via <details> – klicken/tippen zum Öffnen */
    details > div { display: none; }
    details[open] > div { display: block; }
    /* iOS tap highlights */
    button, a { -webkit-tap-highlight-color: transparent; }
  </style>

  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";
    import QRCode from "https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.esm.js";

    const META = document.getElementById("lux-meta");
    const BOT  = META?.dataset?.bot || "GroupLuxBot";
    const BOT_API = META?.dataset?.botApi || "";

    const $ = (id) => document.getElementById(id);
    const setStatus = (msg, ok = true) => {
      const box = $("statusBox"); if (!box) return;
      box.classList.remove("hidden");
      box.textContent = msg;
      box.classList.toggle("border-green-600", ok);
      box.classList.toggle("border-red-600", !ok);
    };

    // Supabase aus Layout
    const meta = document.getElementById("supabase-config");
    if (!meta?.dataset?.url || !meta?.dataset?.key) {
      setStatus("❌ Supabase‑Konfiguration fehlt.", false);
      throw new Error("supabase-config-missing");
    }
    const supabase = createClient(meta.dataset.url, meta.dataset.key);

    // nur die genutzten Felder
    const fields = ["preis","vip_days","gruppe_link","welcome_text","regeln_text"];

    const { data: { user } } = await supabase.auth.getUser();
    if (!user) { window.location.href = "/"; throw new Error("not-auth"); }

    const startLink = () => `https://t.me/${BOT}?start=${encodeURIComponent("creator_"+user.id)}`;
    const linkTelegram = () => `https://t.me/${BOT}?start=${encodeURIComponent("link_creator_"+user.id)}`;
    const stripeRedirect = () => `${BOT_API}/api/stripe/connect-redirect?creator_id=${encodeURIComponent(user.id)}`;

    function updatePreviews() {
      const s = startLink();
      $("previewStartInput").value = s;

      // QR Code kompakt
      const canvas = $("qrcode");
      QRCode.toCanvas(canvas, s, { width: 196, margin: 1 }, (err) => {
        if (err) console.error(err);
      });

      const wrap = $("stripeLinkWrap");
      if (wrap) wrap.href = BOT_API ? stripeRedirect() : "#";
    }

    async function loadCfg() {
      const { data, error } = await supabase
        .from("creator_config")
        .select(fields.join(",") + ", stripe_account_id")
        .eq("creator_id", user.id)
        .maybeSingle();

      if (error) setStatus("❌ Konnte Einstellungen nicht laden.", false);

      if (data) {
        for (const k of fields) if ($(k)) $(k).value = (data[k] ?? "");
        // Keine permanente Statuszeile mehr – nur bei Problemen
      } else {
        for (const k of fields) if ($(k)) $(k).value = "";
        setStatus("ℹ️ Bitte Daten eintragen und speichern.", false);
      }
      updatePreviews();
    }

    // Aktionen
    $("saveBtn").addEventListener("click", async () => {
      const payload = { creator_id: user.id };
      for (const k of fields) payload[k] = $(k)?.value ?? null;
      payload.preis = Number(payload.preis || 0);
      payload.vip_days = Number(payload.vip_days || 30);

      const { error } = await supabase.from("creator_config").upsert(payload, { onConflict: "creator_id" });
      if (error) { setStatus("❌ Speichern fehlgeschlagen.", false); return; }
      setStatus("✅ Gespeichert.");
    });

    $("reloadBtn").addEventListener("click", loadCfg);

    $("linkTelegramBtn").addEventListener("click", () => {
      window.open(linkTelegram(), "_blank");
      $("hint").textContent = "Telegram öffnen → im DM starten → Bot als Admin zur Gruppe hinzufügen.";
    });

    $("stripeBtn").addEventListener("click", (e) => {
      if (!BOT_API) {
        e.preventDefault();
        alert("PUBLIC_BOT_API_BASE fehlt im Frontend.");
      }
    });

    $("copyStartBtn").addEventListener("click", async () => {
      try {
        await navigator.clipboard.writeText($("previewStartInput").value);
        $("hint").textContent = "Link kopiert.";
      } catch {
        $("previewStartInput").select();
      }
    });

    await loadCfg();
  </script>
</DashboardLayout>
