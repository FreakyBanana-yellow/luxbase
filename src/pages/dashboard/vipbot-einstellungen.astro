---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
const BOT_USERNAME = "Luxbot";
---

<DashboardLayout title="VIP‑Bot Einstellungen">
  <section class="max-w-3xl mx-auto px-4 py-6 pb-44 space-y-6 relative">
    <!-- Status -->
    <div id="statusBox" class="hidden bg-black/60 border border-luxgray rounded-2xl p-4 text-sm text-white/80"></div>

    <form id="botForm" class="space-y-5">
      <!-- Basis -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Basis</h2>

        <div class="grid grid-cols-2 gap-3">
          <label class="block">
            <span class="text-sm text-white/70">Preis (€)</span>
            <input id="preis" type="number" inputmode="numeric" step="1" min="0"
                   class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="29" />
          </label>
          <label class="block">
            <span class="text-sm text-white/70">VIP‑Dauer (Tage)</span>
            <input id="vip_days" type="number" inputmode="numeric" step="1" min="1"
                   class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2" placeholder="30" />
          </label>
        </div>
      </div>

      <!-- Gruppe -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Gruppe</h2>

        <label class="block">
          <span class="text-sm text-white/70">Gruppen‑Link (Fallback, statisch)</span>
          <input id="gruppe_link"
                 class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2"
                 placeholder="https://t.me/+abcdef..." />
        </label>

        <label class="block">
          <span class="text-sm text-white/70">Gruppen‑Chat‑ID (automatisch, sobald „Gruppe verbinden“ genutzt)</span>
          <input id="group_chat_id" disabled
                 class="mt-1 w-full bg-black/20 border border-luxgray/60 rounded-xl px-3 py-2"
                 placeholder="-1001234567890" />
        </label>

        <!-- Previews als anklick-/kopierbare Textlinks -->
        <div class="text-xs text-white/60 space-y-2">
          <div>Start‑Link: <a id="previewStart" class="underline break-all" target="_blank" rel="noreferrer">—</a></div>
          <div>Startgroup‑Link: <a id="previewGroup" class="underline break-all" target="_blank" rel="noreferrer">—</a></div>
          <div class="mt-2">Zum Kopieren (ohne Klick):</div>
          <input id="previewStartInput" readonly class="w-full bg-black/30 border border-luxgray rounded-lg px-2 py-1 text-[12px] select-all" />
          <input id="previewGroupInput" readonly class="w-full bg-black/30 border border-luxgray rounded-lg px-2 py-1 text-[12px] select-all" />
        </div>

        <p class="text-xs text-white/60 leading-5">
          <b>Gruppe verbinden:</b> Öffne den Startgroup‑Link → wähle deine VIP‑Gruppe → Bot starten → Bot in der Gruppe zum Admin machen.
          Die <i>group_chat_id</i> wird automatisch gespeichert.
        </p>
      </div>

      <!-- Stripe -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Stripe</h2>

        <label class="block">
          <span class="text-sm text-white/70">Stripe Price ID (optional – sonst Preis von oben)</span>
          <input id="stripe_price_id"
                 class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2"
                 placeholder="price_123..." />
        </label>

        <p id="stripeStatus" class="text-xs text-white/60"></p>
        <!-- Sichtbarer Connect-Link als <a> (kein Button) -->
        <div class="text-sm">
          <a id="connectLink"
             class="inline-flex items-center px-4 py-3 rounded-xl font-semibold bg-luxgold/90 text-black"
             target="_blank" rel="noreferrer">
            Stripe verbinden
          </a>
        </div>
      </div>

      <!-- Texte -->
      <div class="bg-black/60 border border-luxgray rounded-2xl p-4 space-y-4">
        <h2 class="text-luxgold text-lg font-semibold">Texte</h2>

        <label class="block">
          <span class="text-sm text-white/70">Welcome‑Text</span>
          <textarea id="welcome_text" rows="3"
                    class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2"
                    placeholder="👋 Willkommen im VIP! ..."></textarea>
        </label>

        <label class="block">
          <span class="text-sm text-white/70">Regeln‑Text</span>
          <textarea id="regeln_text" rows="3"
                    class="mt-1 w-full bg-black/40 border border-luxgray rounded-xl px-3 py-2"
                    placeholder="📜 Regeln ..."></textarea>
        </label>
      </div>

      <!-- Speichern -->
      <div class="flex items-center gap-3">
        <button id="saveBtn" type="submit"
                class="flex-1 bg-luxgold/90 text-black font-semibold rounded-xl py-3">Speichern</button>
        <button id="refreshBtn" type="button"
                class="px-4 py-3 border border-luxgray rounded-xl">Neu laden</button>
      </div>

      <p id="hint" class="text-xs text-white/60"></p>
    </form>
  </section>

  <!-- FIXED ACTION BAR – echte Links, ganz oben drüber -->
  <nav
    class="fixed bottom-3 left-1/2 -translate-x-1/2 w-[94%] max-w-md
           bg-black/80 backdrop-blur border border-luxgray rounded-2xl
           p-3 z-[2147483647]">
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-2">
      <a id="actionCopy"   class="block text-center border border-luxgray rounded-xl py-3 text-sm select-none" href="#" role="button">Start‑Link kopieren</a>
      <a id="actionGroup"  class="block text-center bg-luxgold/90 text-black font-semibold rounded-xl py-3 text-sm select-none" href="#" role="button" target="_blank" rel="noreferrer">Gruppe verbinden</a>
      <a id="actionStripe" class="block text-center border border-luxgray rounded-xl py-3 text-sm select-none" href="#" role="button" target="_blank" rel="noreferrer">Stripe verbinden</a>
    </div>
  </nav>

  <style is:global>
    /* Verhindere dass andere Overlays Klicks fressen */
    nav[role="navigation"], nav[role="navigation"] * { pointer-events: auto !important; }
    .select-all:focus { outline: 1px dashed #aaa; }
  </style>

  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

    const BOT = ${JSON.stringify(BOT_USERNAME)};
    const BOT_API = import.meta.env.PUBLIC_BOT_API_BASE || ""; // z.B. https://luxentry.onrender.com

    const $ = (id) => document.getElementById(id);
    function setStatus(msg, ok=true) {
      const box = $("statusBox");
      if (!box) return;
      box.classList.remove("hidden");
      box.textContent = msg;
      box.classList.toggle("border-green-600", ok);
      box.classList.toggle("border-red-600", !ok);
    }

    // Supabase
    const meta = document.getElementById("supabase-config");
    const supabase = createClient(meta.dataset.url, meta.dataset.key);
    const fields = ["preis","vip_days","gruppe_link","group_chat_id","stripe_price_id","welcome_text","regeln_text"];

    // Auth
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) { window.location.href = "/"; throw new Error("not-auth"); }

    // Links berechnen
    const startLink = () => `https://t.me/${BOT}?start=${encodeURIComponent("creator_"+user.id)}`;
    const groupLink = () => `https://t.me/${BOT}?startgroup=${encodeURIComponent("creator_"+user.id)}`;

    // Previews (sichtbarer Text + klickbare <a>)
    function updatePreviews() {
      const s = startLink(), g = groupLink();
      const aS = $("previewStart"), aG = $("previewGroup");
      const iS = $("previewStartInput"), iG = $("previewGroupInput");
      if (aS) { aS.href = s; aS.textContent = s; }
      if (aG) { aG.href = g; aG.textContent = g; }
      if (iS) iS.value = s;
      if (iG) iG.value = g;

      // Fixed Action Bar – echte Links setzen
      const actCopy = $("actionCopy");
      const actGroup = $("actionGroup");
      const actStripe = $("actionStripe");
      if (actGroup) actGroup.href = g;
      if (actStripe) actStripe.href = BOT_API ? `${BOT_API}/api/stripe/connect-link?creator_id=${encodeURIComponent(user.id)}` : "#";
      if (!BOT_API && actStripe) actStripe.addEventListener("click", (e)=>{ e.preventDefault(); alert("PUBLIC_BOT_API_BASE ist nicht gesetzt."); });
      if (actCopy) actCopy.addEventListener("click", async (e) => {
        e.preventDefault();
        try { await navigator.clipboard.writeText(s); $("hint").textContent = "🔗 Start‑Link kopiert: " + s; }
        catch { $("previewStartInput").select(); document.execCommand("copy"); $("hint").textContent = "🔗 Start‑Link markiert – bitte manuell kopieren."; }
      }, { passive: false });

      // „Stripe verbinden“ als sichtbarer Link (oben in Stripe‑Section)
      const connectLink = $("connectLink");
      if (connectLink) {
        connectLink.href = BOT_API ? `${BOT_API}/api/stripe/connect-link?creator_id=${encodeURIComponent(user.id)}` : "#";
        if (!BOT_API) connectLink.addEventListener("click", (e)=>{ e.preventDefault(); alert("PUBLIC_BOT_API_BASE ist nicht gesetzt."); });
      }
    }

    // Laden & Prefill
    async function loadCfg() {
      const { data, error } = await supabase
        .from("creator_config")
        .select(fields.join(",") + ", stripe_account_id")
        .eq("creator_id", user.id)
        .maybeSingle();

      if (error) setStatus("❌ Konnte Einstellungen nicht laden.", false);

      if (data) {
        for (const k of fields) if ($(k)) $(k).value = (data[k] ?? "");
        if (data.group_chat_id) setStatus(`✅ Gruppe verbunden (Chat ID: ${data.group_chat_id}). Bot sollte Admin sein.`);
        else setStatus("⚠️ Keine Gruppe verbunden. Nutze „Gruppe verbinden“.", false);

        $("stripeStatus").textContent = data.stripe_account_id
          ? `✅ Stripe verbunden (Account: ${data.stripe_account_id}).`
          : "⚠️ Stripe noch nicht verbunden.";
      } else {
        for (const k of fields) if ($(k)) $(k).value = "";
        setStatus("ℹ️ Noch keine Einstellungen gespeichert. Bitte ausfüllen und speichern.", false);
        $("stripeStatus").textContent = "⚠️ Stripe noch nicht verbunden.";
      }

      updatePreviews();
    }

    await loadCfg();

    // Speichern
    $("botForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      $("saveBtn").disabled = true;

      const payload = { creator_id: user.id };
      for (const k of fields) payload[k] = $(k)?.value ?? null;
      payload.preis = Number(payload.preis || 0);
      payload.vip_days = Number(payload.vip_days || 30);

      const { error } = await supabase.from("creator_config").upsert(payload, { onConflict: "creator_id" });

      $("saveBtn").disabled = false;
      $("hint").textContent = error ? "❌ Speichern fehlgeschlagen." : "✅ Gespeichert.";
      if (!error) await loadCfg();
    });

    // Refresh
    $("refreshBtn").addEventListener("click", loadCfg);
  </script>
</DashboardLayout>
