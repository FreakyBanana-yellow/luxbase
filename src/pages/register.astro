---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout title="Registrieren ‚Äì Luxbase">
  <form
    id="registerForm"
    action="#"
    novalidate
    class="bg-zinc-900 border border-luxgold rounded-xl p-8 w-full max-w-md mx-auto mt-12 shadow-xl"
  >
    <h1 class="text-2xl font-serif font-bold text-center text-luxgold mb-6">
      Registrieren
    </h1>

    <input id="name" type="text" placeholder="Dein Name" required
           class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600" />

    <input id="email" type="email" placeholder="E-Mail" required
           class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600" />

    <select id="role" required
            class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600">
      <option value="creator">Creator / Model</option>
      <option value="agentur">Agentur</option>
    </select>

    <!-- Passwort + Sichtbarkeit -->
    <div class="relative mb-3">
      <input id="password" type="password" placeholder="Passwort" required
             class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600" />
      <button type="button" id="togglePw"
              class="absolute right-2 top-2 text-yellow-400 select-none">üëÅ</button>
    </div>

    <div class="relative mb-4">
      <input id="confirm" type="password" placeholder="Passwort wiederholen" required
             class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600" />
      <button type="button" id="toggleConfirm"
              class="absolute right-2 top-2 text-yellow-400 select-none">üëÅ</button>
    </div>

    <ul id="pwRules" class="text-sm mb-4 space-y-0.5 leading-tight">
      <li id="rLen"   class="text-red-400">‚Ä¢ Mind. 8 Zeichen</li>
      <li id="rUp"    class="text-red-400">‚Ä¢ Mind. 1 Gro√übuchstabe</li>
      <li id="rLow"   class="text-red-400">‚Ä¢ Mind. 1 Kleinbuchstabe</li>
      <li id="rNum"   class="text-red-400">‚Ä¢ Mind. 1 Zahl</li>
      <li id="rMatch" class="text-red-400">‚Ä¢ Passw√∂rter gleich</li>
    </ul>

    <button type="submit"
            class="w-full bg-luxgold text-luxblack font-bold py-2 rounded hover:bg-yellow-400 transition">
      Registrieren
    </button>

    <p id="msg" class="mt-4 text-center text-sm min-h-[1.25rem]"></p>
  </form>

  <!-- Logic -->
  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

    // Supabase from the layout‚Äôs injected meta tag
    const meta = document.getElementById("supabase-config");
    const supabase = createClient(meta.dataset.url, meta.dataset.key);

    const form    = document.getElementById("registerForm");
    const pw      = document.getElementById("password");
    const confirm = document.getElementById("confirm");
    const msg     = document.getElementById("msg");

    // Password rules
    const rules = {
      rLen  : v => v.length >= 8,
      rUp   : v => /[A-Z]/.test(v),
      rLow  : v => /[a-z]/.test(v),
      rNum  : v => /\d/.test(v),
      rMatch: () => pw.value === confirm.value && pw.value !== ""
    };
    function updateRules () {
      const v = pw.value;
      for (const [id, fn] of Object.entries(rules)) {
        const ok = id === "rMatch" ? fn() : fn(v);
        document.getElementById(id).classList.toggle("text-green-400", ok);
        document.getElementById(id).classList.toggle("text-red-400",  !ok);
      }
      return (
        rules.rLen(v) && rules.rUp(v) && rules.rLow(v) && rules.rNum(v) && rules.rMatch()
      );
    }
    pw.addEventListener("input", updateRules);
    confirm.addEventListener("input", updateRules);
    document.getElementById("togglePw").onclick      = () => (pw.type      = pw.type      === "password" ? "text" : "password");
    document.getElementById("toggleConfirm").onclick = () => (confirm.type = confirm.type === "password" ? "text" : "password");

    // Wait for an active session (after signUp the session can be null)
    async function waitForSession(maxMs = 4000) {
      const start = Date.now();
      while (Date.now() - start < maxMs) {
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user?.id) return session;
        await new Promise(r => setTimeout(r, 150));
      }
      return null;
    }

    // Submit
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      msg.textContent = "";
      msg.className   = "mt-4 text-center text-sm";

      if (!updateRules()) {
        msg.textContent = "‚ùå Passwort erf√ºllt nicht alle Anforderungen.";
        msg.classList.add("text-red-400");
        return;
      }

      const name  = document.getElementById("name").value.trim();
      const email = document.getElementById("email").value.trim();
      const role  = document.getElementById("role").value;

      // 1) Sign up
      const { error: signErr } = await supabase.auth.signUp({ email, password: pw.value });
      if (signErr) {
        msg.textContent = "‚ùå " + signErr.message;
        msg.classList.add("text-red-400");
        return;
      }

      // 2) Ensure session exists
      const session = await waitForSession();
      if (!session?.user?.id) {
        msg.textContent = "‚ö†Ô∏è Anmeldung noch nicht aktiv. Bitte E‚ÄëMail best√§tigen und erneut versuchen.";
        msg.classList.add("text-yellow-400");
        return;
      }

      // 3) Insert creator_config WITHOUT creator_id (RLS trigger fills it)
      const { error: cfgErr } = await supabase
        .from("creator_config")
        .upsert(
          {
            creator_name : name,
            email        : email,
            rolle        : role,
            bot_paket    : "basic",
            has_vipbot   : true,
            preis        : 29,
            vip_days     : 30
          },
          { onConflict: "creator_id" }
        );

      if (cfgErr) {
        msg.textContent = "‚ö†Ô∏è Bot-Setup fehlgeschlagen: " + cfgErr.message;
        msg.classList.add("text-red-400");
        return;
      }

      msg.textContent = "‚úÖ Registrierung erfolgreich ‚Äì bitte E‚ÄëMail best√§tigen.";
      msg.classList.add("text-green-400");
      setTimeout(() => (window.location.href = "/dashboard"), 1500);
    });
  </script>
</BaseLayout>
