---
/*  Front-Matter nur, falls du serverseitig irgend­wann
    Supabase brauchst – für das reine Client-Signup nicht nötig
*/
---
<html lang="de">
  <head>
    <title>Registrieren – Luxbase</title>
  </head>

  <body class="bg-luxblack text-white flex justify-center items-center min-h-screen px-4">
    <!-- ================= FORM ================= -->
    <form id="registerForm"
          class="bg-black border border-luxgold rounded-xl p-8 w-full max-w-md relative">
      <h1 class="text-2xl font-bold text-center text-luxgold mb-6">
        Registrieren
      </h1>

      <!-- Name -->
      <input id="name" type="text" placeholder="Dein Name" required
             class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600" />

      <!-- E-Mail -->
      <input id="email" type="email" placeholder="E-Mail" required
             class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600" />

      <!-- Rolle -->
      <select id="role" required
              class="w-full px-4 py-2 mb-4 rounded bg-gray-800 border border-gray-600">
        <option value="creator">Creator / Model</option>
        <option value="agentur">Agentur</option>
      </select>

      <!-- Passwort -->
      <div class="relative mb-2">
        <input id="password" type="password" placeholder="Passwort" required
               class="w-full px-4 py-2 pr-10 rounded bg-gray-800 border border-gray-600" />
        <button type="button" data-toggle="password"
                class="absolute right-2 top-2 text-luxgold text-sm">👁</button>
      </div>

      <!-- Passwort wiederholen -->
      <div class="relative mb-2">
        <input id="confirmPassword" type="password" placeholder="Passwort wiederholen" required
               class="w-full px-4 py-2 pr-10 rounded bg-gray-800 border border-gray-600" />
        <button type="button" data-toggle="confirmPassword"
                class="absolute right-2 top-2 text-luxgold text-sm">👁</button>
      </div>

      <!-- Kriterien -->
      <ul id="passwordCriteria" class="text-sm leading-relaxed mb-4">
        <li id="len"   class="text-red-400">• Mind. 8 Zeichen</li>
        <li id="upper" class="text-red-400">• Mind. 1 Großbuchstabe</li>
        <li id="lower" class="text-red-400">• Mind. 1 Kleinbuchstabe</li>
        <li id="num"   class="text-red-400">• Mind. 1 Zahl</li>
        <li id="match" class="text-red-400">• Beide Passwörter müssen übereinstimmen</li>
      </ul>

      <!-- Submit -->
      <button type="submit"
              class="w-full bg-luxgold text-black font-bold py-2 rounded hover:bg-yellow-400 transition">
        Registrieren
      </button>

      <!-- Feedback -->
      <p id="error"   class="text-red-400   text-sm mt-4 text-center"></p>
      <p id="success" class="text-green-400 text-sm mt-4 text-center"></p>
    </form>

    <!-- ================= SCRIPT ================= -->
    <script type="module">
      // ---------- DOM-Elemente ----------
      const form    = document.getElementById('registerForm');
      const pw      = document.getElementById('password');
      const confirm = document.getElementById('confirmPassword');
      const error   = document.getElementById('error');
      const success = document.getElementById('success');

      // Kriterien-Spans
      const crit = {
        len  : document.getElementById('len'),
        upper: document.getElementById('upper'),
        lower: document.getElementById('lower'),
        num  : document.getElementById('num'),
        match: document.getElementById('match')
      };

      // ---------- Passwort-Validierung ----------
      function updateCriteria () {
        const v  = pw.value;
        const ok = {
          len  : v.length >= 8,
          upper: /[A-Z]/.test(v),
          lower: /[a-z]/.test(v),
          num  : /\d/.test(v),
          match: v !== '' && v === confirm.value
        };

        Object.entries(ok).forEach(([key, pass]) => {
          crit[key].classList.toggle('text-green-400', pass);
          crit[key].classList.toggle('text-red-400'  , !pass);
        });

        return Object.values(ok).every(Boolean);
      }

      pw.addEventListener('input', updateCriteria);
      confirm.addEventListener('input', updateCriteria);

      // ---------- Passwort anzeigen / verbergen ----------
      document.querySelectorAll('[data-toggle]').forEach(btn => {
        btn.addEventListener('click', () => {
          const field = document.getElementById(btn.dataset.toggle);
          field.type  = field.type === 'password' ? 'text' : 'password';
        });
      });

      // ---------- Submit ----------
      const supabase = window.supabase;   // globaler Client aus BaseLayout

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        error.textContent   = '';
        success.textContent = '';

        if (!updateCriteria()) {
          error.textContent = 'Passwort erfüllt nicht alle Anforderungen.';
          return;
        }

        // Daten sammeln
        const name  = document.getElementById('name').value.trim();
        const email = document.getElementById('email').value.trim();
        const role  = document.getElementById('role').value;

        // Supabase-Signup
        const { error: signErr } = await supabase.auth.signUp({
          email,
          password: pw.value,
          options: { data: { name, role } }
        });

        if (signErr) {
          error.textContent = signErr.message;
        } else {
          success.textContent = 'Registrierung erfolgreich – bitte E-Mail bestätigen.';
          form.reset();
          updateCriteria();
        }
      });
    </script>
  </body>
</html>
