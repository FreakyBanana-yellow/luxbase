<script type="module">
  import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

  // Supabase from layout meta
  const meta = document.getElementById("supabase-config");
  const supabase = createClient(meta.dataset.url, meta.dataset.key);

  const form    = document.getElementById("registerForm");
  const pw      = document.getElementById("password");
  const confirm = document.getElementById("confirm");
  const msg     = document.getElementById("msg");

  // ── password rules (unchanged) ──────────────────────────────────────────────
  const rules = {
    rLen  : v => v.length >= 8,
    rUp   : v => /[A-Z]/.test(v),
    rLow  : v => /[a-z]/.test(v),
    rNum  : v => /\d/.test(v),
    rMatch: () => pw.value === confirm.value && pw.value !== ""
  };
  function updateRules () {
    const v = pw.value;
    for (const [id, fn] of Object.entries(rules)) {
      const ok = id === "rMatch" ? fn() : fn(v);
      document.getElementById(id).classList.toggle("text-green-400", ok);
      document.getElementById(id).classList.toggle("text-red-400",  !ok);
    }
    return (
      rules.rLen(v) && rules.rUp(v) && rules.rLow(v) && rules.rNum(v) && rules.rMatch()
    );
  }
  pw.addEventListener("input", updateRules);
  confirm.addEventListener("input", updateRules);
  document.getElementById("togglePw").onclick      = () => (pw.type      = pw.type      === "password" ? "text" : "password");
  document.getElementById("toggleConfirm").onclick = () => (confirm.type = confirm.type === "password" ? "text" : "password");

  // ── small helper: wait for session after signUp ─────────────────────────────
  async function waitForSession(maxMs = 4000) {
    const start = Date.now();
    while (Date.now() - start < maxMs) {
      const { data: { session } } = await supabase.auth.getSession();
      if (session?.user?.id) return session;
      await new Promise(r => setTimeout(r, 150));
    }
    return null;
  }

  // ── submit ──────────────────────────────────────────────────────────────────
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    msg.textContent = "";
    msg.className   = "mt-4 text-center text-sm";

    if (!updateRules()) {
      msg.textContent = "❌ Passwort erfüllt nicht alle Anforderungen.";
      msg.classList.add("text-red-400");
      return;
    }

    const name  = document.getElementById("name").value.trim();
    const email = document.getElementById("email").value.trim();
    const role  = document.getElementById("role").value;

    // 1) sign up
    const { data: s, error: signErr } = await supabase.auth.signUp({
      email,
      password: pw.value
    });
    if (signErr) {
      msg.textContent = "❌ " + signErr.message;
      msg.classList.add("text-red-400");
      return;
    }

    // 2) ensure we really have a session before writing any rows
    const session = await waitForSession();
    if (!session?.user?.id) {
      msg.textContent = "⚠️ Anmeldung noch nicht aktiv. Bitte E-Mail prüfen und erneut versuchen.";
      msg.classList.add("text-yellow-400");
      return;
    }

    // 3) create your row WITHOUT creator_id (DB trigger sets it)
    const { error: cfgErr } = await supabase
      .from("creator_config")
      .upsert(
        {
          // creator_id:  ❌  NICHT mitsenden!
          creator_name : name,
          email        : email,
          rolle        : role,
          bot_paket    : "basic",
          has_vipbot   : true,
          // optionale Defaults
          preis        : 29,
          vip_days     : 30
        },
        { onConflict: "creator_id" }
      );

    if (cfgErr) {
      msg.textContent = "⚠️ Bot-Setup fehlgeschlagen: " + cfgErr.message;
      msg.classList.add("text-red-400");
      return;
    }

    msg.textContent = "✅ Registrierung erfolgreich – bitte E‑Mail bestätigen.";
    msg.classList.add("text-green-400");
    setTimeout(() => (window.location.href = "/dashboard"), 1500);
  });
</script>
