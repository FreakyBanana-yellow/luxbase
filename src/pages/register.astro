---
import Layout from "../layouts/BaseLayout.astro";
const pageTitle = "Registrieren – Luxbase";
---

<Layout title={pageTitle}>
  <section class="flex items-center justify-center min-h-screen px-4 text-white">
    <form id="registerForm"
          class="bg-zinc-900 border border-luxgold rounded-xl p-8 w-full max-w-md shadow-xl">

      <h1 class="text-2xl font-serif font-bold text-center text-luxgold mb-6">
        Registrieren
      </h1>

      <input id="name" type="text" placeholder="Dein Name" required
             class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600">

      <input id="email" type="email" placeholder="E-Mail" required
             class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600">

      <select id="role" required
              class="w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600">
        <option value="">Rolle wählen …</option>
        <option value="creator">Creator / Model</option>
        <option value="agentur">Agentur</option>
      </select>

      <!-- Passwortfelder -->
      <div class="relative mb-3">
        <input id="password" type="password" placeholder="Passwort" required
               class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600">
        <button type="button" id="togglePw"
                class="absolute right-2 top-2 text-yellow-400">👁</button>
      </div>

      <div class="relative mb-2">
        <input id="confirm" type="password" placeholder="Passwort wiederholen" required
               class="w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600">
        <button type="button" id="toggleConfirm"
                class="absolute right-2 top-2 text-yellow-400">👁</button>
      </div>

      <!-- Live-Check -->
      <ul id="pwRules" class="text-sm mb-4 space-y-0.5 leading-tight">
        <li id="rLen"   class="text-red-400">• mind. 8 Zeichen</li>
        <li id="rUp"    class="text-red-400">• mind. 1 Großbuchstabe</li>
        <li id="rLow"   class="text-red-400">• mind. 1 Kleinbuchstabe</li>
        <li id="rNum"   class="text-red-400">• mind. 1 Zahl</li>
        <li id="rMatch" class="text-red-400">• Passwörter gleich</li>
      </ul>

      <button type="submit"
              class="w-full bg-luxgold text-black font-bold py-2 rounded hover:bg-yellow-400 transition">
        Registrieren
      </button>

      <p id="msg" class="mt-4 text-center text-sm min-h-[1.25rem]"></p>
    </form>
  </section>

  <!-- Supabase + Logik -->
  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

    // 1) Client initialisieren (Werte kommen direkt aus ENV)
    const supabase = createClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY
    );

    // 2) DOM-Refs
    const form      = document.getElementById("registerForm");
    const pw        = document.getElementById("password");
    const confirmPw = document.getElementById("confirm");
    const msg       = document.getElementById("msg");

    // 3) Live-Regeln
    const tests = {
      rLen  : v => v.length >= 8,
      rUp   : v => /[A-Z]/.test(v),
      rLow  : v => /[a-z]/.test(v),
      rNum  : v => /\d/.test(v),
      rMatch: () => pw.value === confirmPw.value && pw.value !== ""
    };
    const updateRules = () => {
      const v = pw.value;
      let allOk = true;
      for (const [id, fn] of Object.entries(tests)) {
        const ok = id === "rMatch" ? fn() : fn(v);
        document.getElementById(id).classList.toggle("text-green-400", ok);
        document.getElementById(id).classList.toggle("text-red-400", !ok);
        allOk &&= ok;
      }
      return allOk;
    };
    pw.addEventListener("input",      updateRules);
    confirmPw.addEventListener("input", updateRules);

    // 4) Passwort-Augen
    document.getElementById("togglePw").onclick      = () => pw.type        = pw.type        === "password" ? "text" : "password";
    document.getElementById("toggleConfirm").onclick = () => confirmPw.type = confirmPw.type === "password" ? "text" : "password";

    // 5) Submit
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      msg.textContent = "";
      msg.className   = "mt-4 text-center text-sm";

      if (!updateRules()) {
        msg.textContent = "❌ Passwort erfüllt nicht alle Anforderungen.";
        msg.classList.add("text-red-400");
        return;
      }

      const name  = document.getElementById("name").value.trim();
      const email = document.getElementById("email").value.trim();
      const role  = document.getElementById("role").value;
      const password = pw.value;

      /* ---------- Registrierung ---------- */
      const { data, error } = await supabase.auth.signUp({ email, password });
      if (error) {
        msg.textContent = "❌ " + error.message;
        msg.classList.add("text-red-400");
        return;
      }

      /* ---------- Profil schreiben ---------- */
      const { error: dbErr } = await supabase
        .from("profiles")
        .insert({ id: data.user.id, name, email, role });

      if (dbErr) {
        msg.textContent = "⚠️ Profil-Insert fehlgeschlagen: " + dbErr.message;
        msg.classList.add("text-red-400");
        console.error("Insert-Fehler", dbErr);
        return;
      }

      /* ---------- Erfolg ---------- */
      msg.textContent = "✅ Registrierung erfolgreich – bitte E-Mail bestätigen.";
      msg.classList.add("text-green-400");

      setTimeout(() => {
        window.location.href =
          role === "agentur" ? "/dashboard-agentur" :
          role === "creator" ? "/dashboard-model"  :
                               "/dashboard";
      }, 1800);
    });
  </script>
</Layout>
