---
import Layout from "../layouts/BaseLayout.astro";

// ENV-Werte einmal serverseitig holen
const { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } = Astro.env;
const pageTitle = "Registrieren ‚Äì Luxbase";
---

<Layout title={pageTitle}>
  <section class="flex items-center justify-center min-h-screen px-4 text-white">
    <form id="registerForm"
          class="bg-zinc-900 border border-luxgold rounded-xl p-8 w-full max-w-md shadow-xl">

      <h1 class="text-2xl font-serif font-bold text-center text-luxgold mb-6">
        Registrieren
      </h1>

      <input id="name"  type="text"   placeholder="Dein Name"   required class="field">
      <input id="email" type="email"  placeholder="E-Mail"      required class="field">

      <select id="role" required class="field">
        <option value="">Rolle w√§hlen ‚Ä¶</option>
        <option value="creator">Creator / Model</option>
        <option value="agentur">Agentur</option>
      </select>

      <!-- Passwortfelder -->
      <div class="wrap">
        <input id="password" type="password" placeholder="Passwort" required class="pw">
        <button type="button" id="togglePw" class="eye">üëÅ</button>
      </div>

      <div class="wrap mb-2">
        <input id="confirm"  type="password" placeholder="Passwort wiederholen" required class="pw">
        <button type="button" id="toggleConfirm" class="eye">üëÅ</button>
      </div>

      <!-- Live-Regeln -->
      <ul id="pwRules" class="text-sm mb-4 space-y-0.5 leading-tight">
        <li id="rLen"   class="rule">‚Ä¢ mind. 8 Zeichen</li>
        <li id="rUp"    class="rule">‚Ä¢ mind. 1 Gro√übuchstabe</li>
        <li id="rLow"   class="rule">‚Ä¢ mind. 1 Kleinbuchstabe</li>
        <li id="rNum"   class="rule">‚Ä¢ mind. 1 Zahl</li>
        <li id="rMatch" class="rule">‚Ä¢ Passw√∂rter gleich</li>
      </ul>

      <button type="submit"
              class="w-full bg-luxgold text-black font-bold py-2 rounded hover:bg-yellow-400 transition">
        Registrieren
      </button>

      <p id="msg" class="mt-4 text-center text-sm min-h-[1.25rem]"></p>
    </form>
  </section>

  <!-- ===========  CLIENT-LOGIK =========== -->
  <script type="module">
    import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

    /* Supabase-Client ‚Äì Werte werden bereits SERVERSEITIG in den String gesetzt */
    const supabase = createClient(
      "${PUBLIC_SUPABASE_URL}",
      "${PUBLIC_SUPABASE_ANON_KEY}"
    );

    /* ---------- DOM-Refs ---------- */
    const form       = document.getElementById("registerForm");
    const pw         = document.getElementById("password");
    const confirmPw  = document.getElementById("confirm");
    const msg        = document.getElementById("msg");

    /* ---------- Live-Regeln ---------- */
    const tests = {
      rLen  : v => v.length >= 8,
      rUp   : v => /[A-Z]/.test(v),
      rLow  : v => /[a-z]/.test(v),
      rNum  : v => /\d/.test(v),
      rMatch: () => pw.value === confirmPw.value && pw.value !== ""
    };
    const updateRules = () => {
      const v = pw.value; let ok = true;
      for (const [id, fn] of Object.entries(tests)) {
        const pass = id === "rMatch" ? fn() : fn(v);
        document.getElementById(id).classList.toggle("text-green-400", pass);
        document.getElementById(id).classList.toggle("text-red-400", !pass);
        ok &&= pass;
      }
      return ok;
    };
    pw.addEventListener("input", updateRules);
    confirmPw.addEventListener("input", updateRules);

    /* ---------- Augen-Buttons ---------- */
    document.getElementById("togglePw").onclick      = () => pw.type        = pw.type        === "password" ? "text" : "password";
    document.getElementById("toggleConfirm").onclick = () => confirmPw.type = confirmPw.type === "password" ? "text" : "password";

    /* ---------- Submit ---------- */
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      msg.textContent = ""; msg.className = "mt-4 text-center text-sm";

      if (!updateRules()) {
        msg.textContent = "‚ùå Passwort erf√ºllt nicht alle Anforderungen.";
        msg.classList.add("text-red-400"); return;
      }

      const name  = document.getElementById("name").value.trim();
      const email = document.getElementById("email").value.trim();
      const role  = document.getElementById("role").value;
      const password = pw.value;

      /* 1) User anlegen */
      const { data, error } = await supabase.auth.signUp({ email, password });
      if (error) {
        msg.textContent = "‚ùå " + error.message;
        msg.classList.add("text-red-400"); return;
      }

      /* 2) Profil schreiben */
      const { error: dbErr } = await supabase.from("profiles")
        .insert({ id: data.user.id, name, email, role });

      if (dbErr) {
        msg.textContent = "‚ö†Ô∏è Profil-Insert fehlgeschlagen: " + dbErr.message;
        msg.classList.add("text-red-400"); console.error(dbErr); return;
      }

      /* 3) Erfolg & Redirect */
      msg.textContent = "‚úÖ Registrierung erfolgreich ‚Äì bitte Mail best√§tigen.";
      msg.classList.add("text-green-400");
      setTimeout(() => {
        window.location.href =
          role === "agentur" ? "/dashboard-agentur"
                             : "/dashboard-model";
      }, 1800);
    });
  </script>

  <!-- kleine Hilfsklassen -->
  <style>
    .field{ @apply w-full px-4 py-2 mb-4 rounded bg-zinc-800 border border-zinc-600 }
    .wrap { @apply relative mb-3 }
    .pw   { @apply w-full px-4 py-2 pr-10 rounded bg-zinc-800 border border-zinc-600 }
    .eye  { @apply absolute right-2 top-2 text-yellow-400 select-none }
    .rule { @apply text-red-400 }
  </style>
</Layout>
